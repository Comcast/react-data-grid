{"version":3,"file":"AllFeatures-BHFmDYtP.js","sources":["../../website/routes/AllFeatures.tsx?tsr-split=component"],"sourcesContent":["import { useState } from 'react';\nimport { faker } from '@faker-js/faker';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { DataGrid, SelectColumn, textEditor } from '../../src';\nimport type { CalculatedColumn, CellCopyArgs, CellPasteArgs, Column, FillEvent } from '../../src';\nimport { textEditorClassname } from '../../src/editors/textEditor';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createFileRoute({\n  component: AllFeatures,\n  loader() {\n    rows ??= createRows();\n    return rows;\n  }\n});\n\nlet rows: readonly Row[] | undefined;\n\nfunction createRows(): Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 0; i < 2000; i++) {\n    rows.push({\n      id: `id_${i}`,\n      avatar: faker.image.avatar(),\n      email: faker.internet.email(),\n      title: faker.person.prefix(),\n      firstName: faker.person.firstName(),\n      lastName: faker.person.lastName(),\n      street: faker.location.street(),\n      zipCode: faker.location.zipCode(),\n      date: faker.date.past().toLocaleDateString(),\n      bs: faker.company.buzzPhrase(),\n      catchPhrase: faker.company.catchPhrase(),\n      companyName: faker.company.name(),\n      words: faker.lorem.words(),\n      sentence: faker.lorem.sentence()\n    });\n  }\n\n  return rows;\n}\n\nconst highlightClassname = css`\n  .rdg-cell {\n    background-color: #9370db;\n    color: white;\n  }\n\n  &:hover .rdg-cell {\n    background-color: #800080;\n  }\n`;\n\nconst copiedRowClassname = css``;\n\nexport interface Row {\n  id: string;\n  avatar: string;\n  email: string;\n  title: string;\n  firstName: string;\n  lastName: string;\n  street: string;\n  zipCode: string;\n  date: string;\n  bs: string;\n  catchPhrase: string;\n  companyName: string;\n  words: string;\n  sentence: string;\n}\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nconst avatarClassname = css`\n  margin: auto;\n  background-size: 100%;\n  block-size: 28px;\n  inline-size: 28px;\n`;\n\nconst titles = ['Dr.', 'Mr.', 'Mrs.', 'Miss', 'Ms.'] as const;\n\nconst columns: readonly Column<Row>[] = [\n  SelectColumn,\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80,\n    resizable: true,\n    frozen: true\n  },\n  {\n    key: 'avatar',\n    name: 'Avatar',\n    width: 40,\n    resizable: true,\n    renderCell({ row }) {\n      return <div className={avatarClassname} style={{ backgroundImage: `url(${row.avatar})` }} />;\n    }\n  },\n  {\n    key: 'title',\n    name: 'Title',\n    width: 200,\n    resizable: true,\n    renderEditCell({ row, onRowChange }) {\n      return (\n        <select\n          className={textEditorClassname}\n          value={row.title}\n          onChange={(event) => onRowChange({ ...row, title: event.target.value }, true)}\n          autoFocus\n        >\n          {titles.map((title) => (\n            <option key={title} value={title}>\n              {title}\n            </option>\n          ))}\n        </select>\n      );\n    }\n  },\n  {\n    key: 'firstName',\n    name: 'First Name',\n    width: 200,\n    resizable: true,\n    frozen: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'lastName',\n    name: 'Last Name',\n    width: 200,\n    resizable: true,\n    frozen: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'email',\n    name: 'Email',\n    width: 'max-content',\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'street',\n    name: 'Street',\n    width: 200,\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'zipCode',\n    name: 'ZipCode',\n    width: 200,\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'date',\n    name: 'Date',\n    width: 200,\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'bs',\n    name: 'bs',\n    width: 200,\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'catchPhrase',\n    name: 'Catch Phrase',\n    width: 'max-content',\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'companyName',\n    name: 'Company Name',\n    width: 200,\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'sentence',\n    name: 'Sentence',\n    width: 'max-content',\n    resizable: true,\n    renderEditCell: textEditor\n  }\n];\n\nfunction AllFeatures() {\n  const direction = useDirection();\n  const initialRows = Route.useLoaderData();\n  const [rows, setRows] = useState(initialRows);\n  const [selectedRows, setSelectedRows] = useState((): ReadonlySet<string> => new Set());\n  const [copiedCell, setCopiedCell] = useState<{\n    readonly row: Row;\n    readonly column: CalculatedColumn<Row>;\n  } | null>(null);\n\n  function handleFill({ columnKey, sourceRow, targetRow }: FillEvent<Row>): Row {\n    return { ...targetRow, [columnKey]: sourceRow[columnKey as keyof Row] };\n  }\n\n  function handleCellPaste(\n    { row, column }: CellCopyArgs<Row>,\n    event: React.ClipboardEvent<HTMLDivElement>\n  ): Row {\n    const targetColumnKey = column.key;\n\n    if (copiedCell !== null) {\n      const sourceColumnKey = copiedCell.column.key;\n      const sourceRow = copiedCell.row;\n\n      const incompatibleColumns = ['email', 'zipCode', 'date'];\n      if (\n        sourceColumnKey === 'avatar' ||\n        ['id', 'avatar'].includes(targetColumnKey) ||\n        ((incompatibleColumns.includes(targetColumnKey) ||\n          incompatibleColumns.includes(sourceColumnKey)) &&\n          sourceColumnKey !== targetColumnKey)\n      ) {\n        return row;\n      }\n\n      return { ...row, [targetColumnKey]: sourceRow[sourceColumnKey as keyof Row] };\n    }\n\n    const copiedText = event.clipboardData.getData('text/plain');\n    if (copiedText !== '') {\n      return { ...row, [targetColumnKey]: copiedText };\n    }\n\n    return row;\n  }\n\n  function handleCellCopy(\n    { row, column }: CellPasteArgs<Row>,\n    event: React.ClipboardEvent<HTMLDivElement>\n  ): void {\n    // copy highlighted text only\n    if (window.getSelection()?.isCollapsed === false) {\n      setCopiedCell(null);\n      return;\n    }\n\n    setCopiedCell({ row, column });\n    event.clipboardData.setData('text/plain', row[column.key as keyof Row]);\n    event.preventDefault();\n  }\n\n  return (\n    <>\n      {copiedCell && (\n        <style>\n          {`\n          .${copiedRowClassname} > [aria-colindex=\"${copiedCell.column.idx + 1}\"] {\n            background-color: #ccccff;\n            &.rdg-cell-dragged-over {\n              background-color: #9999ff;\n            }\n          }\n       `}\n        </style>\n      )}\n      <DataGrid\n        columns={columns}\n        rows={rows}\n        rowKeyGetter={rowKeyGetter}\n        onRowsChange={setRows}\n        onFill={handleFill}\n        onCellCopy={handleCellCopy}\n        onCellPaste={handleCellPaste}\n        rowHeight={30}\n        selectedRows={selectedRows}\n        isRowSelectionDisabled={(row) => row.id === 'id_2'}\n        onSelectedRowsChange={setSelectedRows}\n        className=\"fill-grid\"\n        rowClass={(row, index) => {\n          return clsx({\n            [highlightClassname]: row.id.includes('7') || index === 0,\n            [copiedRowClassname]: copiedCell?.row === row\n          });\n        }}\n        direction={direction}\n        onCellClick={(args, event) => {\n          if (args.column.key === 'title') {\n            event.preventGridDefault();\n            args.selectCell(true);\n          }\n        }}\n        onCellKeyDown={(_, event) => {\n          if (event.key === 'Escape') {\n            setCopiedCell(null);\n          }\n        }}\n      />\n    </>\n  );\n}\n"],"names":["highlightClassname","css","copiedRowClassname","rowKeyGetter","row","id","avatarClassname","titles","columns","SelectColumn","key","name","width","resizable","frozen","renderCell","jsx","className","style","backgroundImage","avatar","renderEditCell","onRowChange","textEditorClassname","value","title","onChange","event","target","autoFocus","map","textEditor","SplitComponent","direction","useDirection","initialRows","Route","useLoaderData","rows","setRows","useState","selectedRows","setSelectedRows","Set","copiedCell","setCopiedCell","handleFill","columnKey","sourceRow","targetRow","handleCellPaste","column","targetColumnKey","sourceColumnKey","incompatibleColumns","includes","copiedText","clipboardData","getData","handleCellCopy","window","getSelection","isCollapsed","setData","preventDefault","children","idx","DataGrid","onRowsChange","onFill","onCellCopy","onCellPaste","rowHeight","isRowSelectionDisabled","onSelectedRowsChange","rowClass","index","clsx","onCellClick","args","preventGridDefault","selectCell","onCellKeyDown","_"],"mappings":"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"}