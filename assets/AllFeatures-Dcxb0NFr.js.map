{"version":3,"file":"AllFeatures-Dcxb0NFr.js","names":["useState","css","clsx","DataGrid","SelectColumn","textEditor","CalculatedColumn","CellCopyArgs","CellPasteArgs","Column","FillEvent","textEditorClassname","useDirection","Route","highlightClassname","copiedRowClassname","Row","id","avatar","email","title","firstName","lastName","street","zipCode","date","bs","catchPhrase","companyName","words","sentence","rowKeyGetter","row","avatarClassname","titles","const","columns","key","name","width","resizable","frozen","renderCell","backgroundImage","renderEditCell","onRowChange","event","target","value","map","AllFeatures","direction","initialRows","useLoaderData","rows","setRows","selectedRows","setSelectedRows","ReadonlySet","Set","copiedCell","setCopiedCell","column","handleFill","columnKey","sourceRow","targetRow","handleCellPaste","React","ClipboardEvent","HTMLDivElement","targetColumnKey","sourceColumnKey","incompatibleColumns","includes","copiedText","clipboardData","getData","handleCellCopy","window","getSelection","isCollapsed","setData","preventDefault","idx","index","args","preventGridDefault","selectCell","_","component"],"sources":["../../website/routes/AllFeatures.wyw-in-js.css","../../website/routes/AllFeatures.tsx?tsr-split=component"],"sourcesContent":[".hbz8ijg {\n  .rdg-cell {\n    background-color: #9370db;\n    color: white;\n  }\n\n  &:hover .rdg-cell {\n    background-color: #800080;\n  }\n}\n\n.cmp4ma9 {}\n\n.a1c2mh7z {\n  margin: auto;\n  background-size: 100%;\n  block-size: 28px;\n  inline-size: 28px;\n}\n\n","import { useState } from 'react';\nimport { faker } from '@faker-js/faker';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { DataGrid, SelectColumn, textEditor } from '../../src';\nimport type { CalculatedColumn, CellCopyArgs, CellPasteArgs, Column, FillEvent } from '../../src';\nimport { textEditorClassname } from '../../src/editors/textEditor';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createFileRoute({\n  component: AllFeatures,\n  loader() {\n    rows ??= createRows();\n    return rows;\n  }\n});\n\nlet rows: readonly Row[] | undefined;\n\nfunction createRows(): Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 0; i < 2000; i++) {\n    rows.push({\n      id: `id_${i}`,\n      avatar: faker.image.avatar(),\n      email: faker.internet.email(),\n      title: faker.person.prefix(),\n      firstName: faker.person.firstName(),\n      lastName: faker.person.lastName(),\n      street: faker.location.street(),\n      zipCode: faker.location.zipCode(),\n      date: faker.date.past().toLocaleDateString(),\n      bs: faker.company.buzzPhrase(),\n      catchPhrase: faker.company.catchPhrase(),\n      companyName: faker.company.name(),\n      words: faker.lorem.words(),\n      sentence: faker.lorem.sentence()\n    });\n  }\n\n  return rows;\n}\n\nconst highlightClassname = css`\n  .rdg-cell {\n    background-color: #9370db;\n    color: white;\n  }\n\n  &:hover .rdg-cell {\n    background-color: #800080;\n  }\n`;\n\nconst copiedRowClassname = css``;\n\nexport interface Row {\n  id: string;\n  avatar: string;\n  email: string;\n  title: string;\n  firstName: string;\n  lastName: string;\n  street: string;\n  zipCode: string;\n  date: string;\n  bs: string;\n  catchPhrase: string;\n  companyName: string;\n  words: string;\n  sentence: string;\n}\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nconst avatarClassname = css`\n  margin: auto;\n  background-size: 100%;\n  block-size: 28px;\n  inline-size: 28px;\n`;\n\nconst titles = ['Dr.', 'Mr.', 'Mrs.', 'Miss', 'Ms.'] as const;\n\nconst columns: readonly Column<Row>[] = [\n  SelectColumn,\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80,\n    resizable: true,\n    frozen: true\n  },\n  {\n    key: 'avatar',\n    name: 'Avatar',\n    width: 40,\n    resizable: true,\n    renderCell({ row }) {\n      return <div className={avatarClassname} style={{ backgroundImage: `url(${row.avatar})` }} />;\n    }\n  },\n  {\n    key: 'title',\n    name: 'Title',\n    width: 200,\n    resizable: true,\n    renderEditCell({ row, onRowChange }) {\n      return (\n        <select\n          className={textEditorClassname}\n          value={row.title}\n          onChange={(event) => onRowChange({ ...row, title: event.target.value }, true)}\n          autoFocus\n        >\n          {titles.map((title) => (\n            <option key={title} value={title}>\n              {title}\n            </option>\n          ))}\n        </select>\n      );\n    }\n  },\n  {\n    key: 'firstName',\n    name: 'First Name',\n    width: 200,\n    resizable: true,\n    frozen: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'lastName',\n    name: 'Last Name',\n    width: 200,\n    resizable: true,\n    frozen: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'email',\n    name: 'Email',\n    width: 'max-content',\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'street',\n    name: 'Street',\n    width: 200,\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'zipCode',\n    name: 'ZipCode',\n    width: 200,\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'date',\n    name: 'Date',\n    width: 200,\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'bs',\n    name: 'bs',\n    width: 200,\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'catchPhrase',\n    name: 'Catch Phrase',\n    width: 'max-content',\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'companyName',\n    name: 'Company Name',\n    width: 200,\n    resizable: true,\n    renderEditCell: textEditor\n  },\n  {\n    key: 'sentence',\n    name: 'Sentence',\n    width: 'max-content',\n    resizable: true,\n    renderEditCell: textEditor\n  }\n];\n\nfunction AllFeatures() {\n  const direction = useDirection();\n  const initialRows = Route.useLoaderData();\n  const [rows, setRows] = useState(initialRows);\n  const [selectedRows, setSelectedRows] = useState((): ReadonlySet<string> => new Set());\n  const [copiedCell, setCopiedCell] = useState<{\n    readonly row: Row;\n    readonly column: CalculatedColumn<Row>;\n  } | null>(null);\n\n  function handleFill({ columnKey, sourceRow, targetRow }: FillEvent<Row>): Row {\n    return { ...targetRow, [columnKey]: sourceRow[columnKey as keyof Row] };\n  }\n\n  function handleCellPaste(\n    { row, column }: CellCopyArgs<Row>,\n    event: React.ClipboardEvent<HTMLDivElement>\n  ): Row {\n    const targetColumnKey = column.key;\n\n    if (copiedCell !== null) {\n      const sourceColumnKey = copiedCell.column.key;\n      const sourceRow = copiedCell.row;\n\n      const incompatibleColumns = ['email', 'zipCode', 'date'];\n      if (\n        sourceColumnKey === 'avatar' ||\n        ['id', 'avatar'].includes(targetColumnKey) ||\n        ((incompatibleColumns.includes(targetColumnKey) ||\n          incompatibleColumns.includes(sourceColumnKey)) &&\n          sourceColumnKey !== targetColumnKey)\n      ) {\n        return row;\n      }\n\n      return { ...row, [targetColumnKey]: sourceRow[sourceColumnKey as keyof Row] };\n    }\n\n    const copiedText = event.clipboardData.getData('text/plain');\n    if (copiedText !== '') {\n      return { ...row, [targetColumnKey]: copiedText };\n    }\n\n    return row;\n  }\n\n  function handleCellCopy(\n    { row, column }: CellPasteArgs<Row>,\n    event: React.ClipboardEvent<HTMLDivElement>\n  ): void {\n    // copy highlighted text only\n    if (window.getSelection()?.isCollapsed === false) {\n      setCopiedCell(null);\n      return;\n    }\n\n    setCopiedCell({ row, column });\n    event.clipboardData.setData('text/plain', row[column.key as keyof Row]);\n    event.preventDefault();\n  }\n\n  return (\n    <>\n      {copiedCell && (\n        <style>\n          {`\n          .${copiedRowClassname} > [aria-colindex=\"${copiedCell.column.idx + 1}\"] {\n            background-color: #ccccff;\n            &.rdg-cell-dragged-over {\n              background-color: #9999ff;\n            }\n          }\n       `}\n        </style>\n      )}\n      <DataGrid\n        aria-label=\"All Features Example\"\n        columns={columns}\n        rows={rows}\n        rowKeyGetter={rowKeyGetter}\n        onRowsChange={setRows}\n        onFill={handleFill}\n        onCellCopy={handleCellCopy}\n        onCellPaste={handleCellPaste}\n        rowHeight={30}\n        selectedRows={selectedRows}\n        isRowSelectionDisabled={(row) => row.id === 'id_2'}\n        onSelectedRowsChange={setSelectedRows}\n        className=\"fill-grid\"\n        rowClass={(row, index) => {\n          return clsx({\n            [highlightClassname]: row.id.includes('7') || index === 0,\n            [copiedRowClassname]: copiedCell?.row === row\n          });\n        }}\n        direction={direction}\n        onCellClick={(args, event) => {\n          if (args.column.key === 'title') {\n            event.preventGridDefault();\n            args.selectCell(true);\n          }\n        }}\n        onCellKeyDown={(_, event) => {\n          if (event.key === 'Escape') {\n            setCopiedCell(null);\n          }\n        }}\n      />\n    </>\n  );\n}\n"],"mappings":"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"}