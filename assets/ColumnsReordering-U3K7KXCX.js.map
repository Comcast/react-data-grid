{"version":3,"file":"ColumnsReordering-U3K7KXCX.js","names":["useCallback","useMemo","useState","DataGrid","Column","ColumnWidths","SortColumn","startViewTransition","useDirection","Route","Row","id","task","complete","priority","issueType","createRows","rows","i","push","Math","min","round","random","columns","key","name","width","resizable","sortable","draggable","initialColumnsOrder","map","_","index","ColumnsReordering","direction","columnsOrder","setColumnsOrder","sortColumns","setSortColumns","onSortColumnsChange","slice","columnWidths","setColumnWidths","Map","reorderedColumns","sortedRows","length","columnKey","sort","a","b","localeCompare","reverse","onColumnsReorder","sourceKey","targetKey","reorderColumns","sourceColumnOrderIndex","findIndex","targetColumnOrderIndex","sourceColumnOrder","newColumnsOrder","toSpliced","splice","resetOrderAndWidths","marginBottom","component"],"sources":["../../website/routes/ColumnsReordering.tsx?tsr-split=component"],"sourcesContent":["import { useCallback, useMemo, useState } from 'react';\n\nimport { DataGrid } from '../../src';\nimport type { Column, ColumnWidths, SortColumn } from '../../src';\nimport { startViewTransition } from '../utils';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createFileRoute({\n  component: ColumnsReordering\n});\n\ninterface Row {\n  readonly id: number;\n  readonly task: string;\n  readonly complete: number;\n  readonly priority: string;\n  readonly issueType: string;\n}\n\nfunction createRows(): Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.round(Math.random() * 3)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.round(Math.random() * 3)]\n    });\n  }\n\n  return rows;\n}\n\nconst columns: Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80\n  },\n  {\n    key: 'task',\n    name: 'Title',\n    resizable: true,\n    sortable: true,\n    draggable: true\n  },\n  {\n    key: 'priority',\n    name: 'Priority',\n    resizable: true,\n    sortable: true,\n    draggable: true\n  },\n  {\n    key: 'issueType',\n    name: 'Issue Type',\n    resizable: true,\n    sortable: true,\n    draggable: true\n  },\n  {\n    key: 'complete',\n    name: '% Complete',\n    resizable: true,\n    sortable: true,\n    draggable: true\n  }\n];\n\nconst initialColumnsOrder: readonly number[] = columns.map((_, index) => index);\n\nfunction ColumnsReordering() {\n  const direction = useDirection();\n  const [rows] = useState(createRows);\n  const [columnsOrder, setColumnsOrder] = useState(initialColumnsOrder);\n  const [sortColumns, setSortColumns] = useState<readonly SortColumn[]>([]);\n  const onSortColumnsChange = useCallback((sortColumns: SortColumn[]) => {\n    setSortColumns(sortColumns.slice(-1));\n  }, []);\n  const [columnWidths, setColumnWidths] = useState((): ColumnWidths => new Map());\n\n  const reorderedColumns = useMemo(() => {\n    return columnsOrder.map((index) => columns[index]);\n  }, [columnsOrder]);\n\n  const sortedRows = useMemo((): readonly Row[] => {\n    if (sortColumns.length === 0) return rows;\n    const { columnKey, direction } = sortColumns[0];\n\n    let sortedRows: Row[] = [...rows];\n\n    switch (columnKey) {\n      case 'task':\n      case 'priority':\n      case 'issueType':\n        sortedRows = sortedRows.sort((a, b) => a[columnKey].localeCompare(b[columnKey]));\n        break;\n      case 'complete':\n        sortedRows = sortedRows.sort((a, b) => a[columnKey] - b[columnKey]);\n        break;\n      default:\n    }\n    return direction === 'DESC' ? sortedRows.reverse() : sortedRows;\n  }, [rows, sortColumns]);\n\n  function onColumnsReorder(sourceKey: string, targetKey: string) {\n    function reorderColumns() {\n      setColumnsOrder((columnsOrder) => {\n        const sourceColumnOrderIndex = columnsOrder.findIndex(\n          (index) => columns[index].key === sourceKey\n        );\n        const targetColumnOrderIndex = columnsOrder.findIndex(\n          (index) => columns[index].key === targetKey\n        );\n        const sourceColumnOrder = columnsOrder[sourceColumnOrderIndex];\n        const newColumnsOrder = columnsOrder.toSpliced(sourceColumnOrderIndex, 1);\n        newColumnsOrder.splice(targetColumnOrderIndex, 0, sourceColumnOrder);\n        return newColumnsOrder;\n      });\n    }\n\n    startViewTransition(reorderColumns);\n  }\n\n  function resetOrderAndWidths() {\n    setColumnsOrder(initialColumnsOrder);\n    setColumnWidths(new Map());\n  }\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        onClick={resetOrderAndWidths}\n        style={{\n          width: 150,\n          marginBottom: 16\n        }}\n      >\n        Reset Columns\n      </button>\n      <DataGrid\n        aria-label=\"Columns Reordering Example\"\n        columns={reorderedColumns}\n        rows={sortedRows}\n        sortColumns={sortColumns}\n        onSortColumnsChange={onSortColumnsChange}\n        direction={direction}\n        defaultColumnOptions={{ width: '1fr' }}\n        onColumnsReorder={onColumnsReorder}\n        columnWidths={columnWidths}\n        onColumnWidthsChange={setColumnWidths}\n      />\n    </>\n  );\n}\n"],"mappings":"qIAmBA,SAASgB,GAAoB,CAC3B,IAAMC,EAAc,GAEpB,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,IACvBD,EAAKE,KAAK,CACRR,GAAIO,EACJN,KAAM,QAAQM,IACdL,SAAUO,KAAKC,IAAI,IAAKD,KAAKE,MAAMF,KAAKG,SAAW,MACnDT,SAAU,CAAC,WAAY,OAAQ,SAAU,OAAOM,KAAKE,MAAMF,KAAKG,SAAW,IAC3ER,UAAW,CAAC,MAAO,cAAe,OAAQ,SAASK,KAAKE,MAAMF,KAAKG,SAAW,MAIlF,OAAON,EAGT,MAAMO,EAAyB,CAC7B,CACEC,IAAK,KACLC,KAAM,KACNC,MAAO,IAET,CACEF,IAAK,OACLC,KAAM,QACNE,UAAW,GACXC,SAAU,GACVC,UAAW,IAEb,CACEL,IAAK,WACLC,KAAM,WACNE,UAAW,GACXC,SAAU,GACVC,UAAW,IAEb,CACEL,IAAK,YACLC,KAAM,aACNE,UAAW,GACXC,SAAU,GACVC,UAAW,IAEb,CACEL,IAAK,WACLC,KAAM,aACNE,UAAW,GACXC,SAAU,GACVC,UAAW,KAITC,EAAyCP,EAAQQ,KAAKC,EAAGC,IAAUA,GAEzE,SAASC,GAAoB,CAC3B,IAAMC,EAAY5B,IACZ,CAACS,IAAAA,EAAAA,EAAAA,UAAiBD,GAClB,CAACqB,EAAcC,IAAAA,EAAAA,EAAAA,UAA4BP,GAC3C,CAACQ,EAAaC,IAAAA,EAAAA,EAAAA,UAAkD,IAChEC,GAAAA,EAAAA,EAAAA,aAAmCF,GAA8B,CACrEC,EAAeD,EAAYG,MAAM,MAChC,IACG,CAACC,EAAcC,IAAAA,EAAAA,EAAAA,cAAgD,IAAIC,KAEnEC,GAAAA,EAAAA,EAAAA,aACGT,EAAaL,IAAKE,GAAUV,EAAQU,IAC1C,CAACG,IAEEU,GAAAA,EAAAA,EAAAA,aAA2C,CAC/C,GAAIR,EAAYS,SAAW,EAAG,OAAO/B,EACrC,GAAM,CAAEgC,YAAWb,UAAAA,GAAcG,EAAY,GAEzCQ,EAAoB,CAAC,GAAG9B,GAE5B,OAAQgC,EAAR,CACE,IAAK,OACL,IAAK,WACL,IAAK,YACHF,EAAaA,EAAWG,MAAMC,EAAGC,IAAMD,EAAEF,GAAWI,cAAcD,EAAEH,KACpE,MACF,IAAK,WACHF,EAAaA,EAAWG,MAAMC,EAAGC,IAAMD,EAAEF,GAAaG,EAAEH,IACxD,MACF,SAEF,OAAOb,IAAc,OAASW,EAAWO,UAAYP,GACpD,CAAC9B,EAAMsB,IAEV,SAASgB,EAAiBC,EAAmBC,EAAmB,CAC9D,SAASC,GAAiB,CACxBpB,EAAiBD,GAAiB,CAChC,IAAMsB,EAAyBtB,EAAauB,UACzC1B,GAAUV,EAAQU,GAAOT,MAAQ+B,GAE9BK,EAAyBxB,EAAauB,UACzC1B,GAAUV,EAAQU,GAAOT,MAAQgC,GAE9BK,EAAoBzB,EAAasB,GACjCI,EAAkB1B,EAAa2B,UAAUL,EAAwB,GAEvE,OADAI,EAAgBE,OAAOJ,EAAwB,EAAGC,GAC3CC,IAIXxD,EAAoBmD,GAGtB,SAASQ,GAAsB,CAC7B5B,EAAgBP,GAChBa,EAAgB,IAAIC,KAGtB,OACE,EAAA,EAAA,MAAA,EAAA,SAAA,CAAA,SAAA,EACE,EAAA,EAAA,KAAC,SAAA,CACC,KAAK,SACL,QAASqB,EACT,MAAO,CACLvC,MAAO,IACPwC,aAAc,aACd,mBAIJ,EAAA,EAAA,KAAC,EAAA,CACC,aAAW,6BACX,QAASrB,EACT,KAAMC,EACOR,cACQE,sBACVL,YACX,qBAAsB,CAAET,MAAO,OACb4B,mBACJZ,eACd,qBAAsBC"}