{"version":3,"file":"DataGrid-nAh57Sln.js","sources":["../../node_modules/clsx/dist/clsx.mjs","../../src/utils/colSpanUtils.ts","../../src/utils/domUtils.ts","../../src/utils/eventUtils.ts","../../src/utils/keyboardUtils.ts","../../src/utils/renderMeasuringCells.tsx","../../src/utils/selectedCellUtils.ts","../../src/style/cell.ts","../../src/utils/styleUtils.ts","../../src/utils/index.ts","../../src/cellRenderers/renderCheckbox.tsx","../../src/cellRenderers/renderValue.tsx","../../src/DataGridDefaultRenderersContext.ts","../../src/cellRenderers/SelectCellFormatter.tsx","../../src/hooks/useRowSelection.ts","../../src/Columns.tsx","../../src/renderHeaderCell.tsx","../../src/hooks/useCalculatedColumns.ts","../../src/hooks/useColumnWidths.ts","../../src/hooks/useGridDimensions.ts","../../src/hooks/useLatestFunc.ts","../../src/hooks/useRovingTabIndex.ts","../../src/hooks/useViewportColumns.ts","../../src/hooks/useViewportRows.ts","../../src/Cell.tsx","../../src/DragHandle.tsx","../../src/EditCell.tsx","../../src/GroupedColumnHeaderCell.tsx","../../src/HeaderCell.tsx","../../src/style/row.ts","../../src/HeaderRow.tsx","../../src/GroupedColumnHeaderRow.tsx","../../src/Row.tsx","../../src/ScrollToCell.tsx","../../src/sortStatus.tsx","../../src/style/core.ts","../../src/SummaryCell.tsx","../../src/SummaryRow.tsx","../../src/DataGrid.tsx"],"sourcesContent":["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<Element>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n","import type { CellEvent } from '../types';\n\nexport function createCellEvent<E extends React.SyntheticEvent<HTMLDivElement>>(\n  event: E\n): CellEvent<E> {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n\n  return cellEvent;\n}\n","import type { Direction, Maybe } from '../types';\n\n// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\n// event.key may differ by keyboard input language, so we use event.keyCode instead\n// event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\nconst vKey = 86;\n\nexport function isDefaultCellInput(\n  event: React.KeyboardEvent<HTMLDivElement>,\n  isUserHandlingPaste: boolean\n): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-deprecated\n  if (isCtrlKeyHeldDown(event) && (event.keyCode !== vKey || isUserHandlingPaste)) return false;\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return (\n      target.closest('.rdg-editor-container')?.querySelectorAll('input, textarea, select')\n        .length === 1\n    );\n  }\n  return false;\n}\n\nexport function getLeftRightKey(direction: Maybe<Direction>) {\n  const isRtl = direction === 'rtl';\n\n  return {\n    leftKey: isRtl ? 'ArrowRight' : 'ArrowLeft',\n    rightKey: isRtl ? 'ArrowLeft' : 'ArrowRight'\n  } as const;\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>(viewportColumns: readonly CalculatedColumn<R, SR>[]) {\n  return viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n    <div\n      key={key}\n      className={measuringCellClassname}\n      style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n      data-measuring-cell-key={key}\n    />\n  ));\n}\n","import type {\n  CalculatedColumn,\n  CalculatedColumnParent,\n  CellNavigationMode,\n  Maybe,\n  Position\n} from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return isCellEditableUtil(column, row);\n}\n\n// https://github.com/vercel/next.js/issues/56480\nexport function isCellEditableUtil<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.renderEditCell != null &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  moveUp: boolean;\n  moveNext: boolean;\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  mainHeaderRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n}\n\nfunction getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  mainHeaderRowIdx,\n  lastFrozenColumnIndex,\n  column\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'lastFrozenColumnIndex' | 'mainHeaderRowIdx'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  if (rowIdx === mainHeaderRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (\n    topSummaryRows &&\n    rowIdx > mainHeaderRowIdx &&\n    rowIdx <= topSummaryRowsCount + mainHeaderRowIdx\n  ) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  moveUp,\n  moveNext,\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  mainHeaderRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx, rowIdx: currentRowIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n  const columnsCount = columns.length;\n\n  const setColSpan = (moveNext: boolean) => {\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        mainHeaderRowIdx,\n        lastFrozenColumnIndex,\n        column\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveNext ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  const getParentRowIdx = (parent: CalculatedColumnParent<R, SR>) => {\n    return parent.level + mainHeaderRowIdx;\n  };\n\n  const setHeaderGroupColAndRowSpan = () => {\n    if (moveNext) {\n      // find the parent at the same row level\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx === parentRowIdx) {\n          nextIdx = parent.idx + parent.colSpan;\n          break;\n        }\n        parent = parent.parent;\n      }\n    } else if (moveUp) {\n      // find the first reachable parent\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      let found = false;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx >= parentRowIdx) {\n          nextIdx = parent.idx;\n          nextRowIdx = parentRowIdx;\n          found = true;\n          break;\n        }\n        parent = parent.parent;\n      }\n\n      // keep the current position if there is no parent matching the new row position\n      if (!found) {\n        nextIdx = currentIdx;\n        nextRowIdx = currentRowIdx;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(moveNext);\n\n    if (nextRowIdx < mainHeaderRowIdx) {\n      setHeaderGroupColAndRowSpan();\n    }\n  }\n\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  if (nextRowIdx < mainHeaderRowIdx) {\n    // Find the last reachable parent for the new rowIdx\n    // This check is needed when navigating to a column\n    // that does not have a parent matching the new rowIdx\n    const nextColumn = columns[nextIdx];\n    let parent = nextColumn.parent;\n    const nextParentRowIdx = nextRowIdx;\n    nextRowIdx = mainHeaderRowIdx;\n    while (parent !== undefined) {\n      const parentRowIdx = getParentRowIdx(parent);\n      if (parentRowIdx >= nextParentRowIdx) {\n        nextRowIdx = parentRowIdx;\n        nextIdx = parent.idx;\n      }\n      parent = parent.parent;\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // Exit the grid if we're at the first or last cell of the grid\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /* max-content does not work with size containment\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\n     * Chromium bug: at odd zoom levels or subpixel positioning,\n     * layout/paint/style containment can make cell borders disappear\n     *   https://issues.chromium.org/issues/40840864\n     */\n    position: relative; /* needed for absolute positioning to work */\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: 1px solid var(--rdg-border-color);\n    border-block-end: 1px solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    align-content: center;\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: 2px solid var(--rdg-selection-color);\n      outline-offset: -2px;\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n\n    /* Add box-shadow on the last frozen cell */\n    &:nth-last-child(1 of &) {\n      box-shadow: var(--rdg-cell-frozen-box-shadow);\n    }\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn, CalculatedColumnOrColumnGroup } from '../types';\nimport { cellClassname, cellFrozenClassname } from '../style/cell';\n\nexport function getRowStyle(rowIdx: number): CSSProperties {\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getHeaderCellStyle<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number,\n  rowSpan: number\n): React.CSSProperties {\n  const gridRowEnd = rowIdx + 1;\n  const paddingBlockStart = `calc(${rowSpan - 1} * var(--rdg-header-row-height))`;\n\n  if (column.parent === undefined) {\n    return {\n      insetBlockStart: 0,\n      gridRowStart: 1,\n      gridRowEnd,\n      paddingBlockStart\n    };\n  }\n\n  return {\n    insetBlockStart: `calc(${rowIdx - rowSpan} * var(--rdg-header-row-height))`,\n    gridRowStart: gridRowEnd - rowSpan,\n    gridRowEnd,\n    paddingBlockStart\n  };\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan = 1\n): React.CSSProperties {\n  const index = column.idx + 1;\n  return {\n    gridColumnStart: index,\n    gridColumnEnd: index + colSpan,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen\n    },\n    ...extraClasses\n  );\n}\n","import type { CalculatedColumn, CalculatedColumnOrColumnGroup, Maybe } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './eventUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: Maybe<(row: NoInfer<R>) => K>\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n\nexport function getHeaderCellRowSpan<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number\n) {\n  return column.parent === undefined ? rowIdx : column.level - column.parent.level;\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderCheckboxProps } from '../types';\n\nconst checkbox = css`\n  @layer rdg.CheckboxInput {\n    display: block;\n    margin: auto;\n    inline-size: 20px;\n    block-size: 20px;\n\n    &:focus-visible {\n      outline: 2px solid var(--rdg-checkbox-focus-color);\n      outline-offset: -3px;\n    }\n\n    &:enabled {\n      cursor: pointer;\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox-input ${checkbox}`;\n\nexport function renderCheckbox({ onChange, indeterminate, ...props }: RenderCheckboxProps) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <input\n      ref={(el) => {\n        if (el) {\n          el.indeterminate = indeterminate === true;\n        }\n      }}\n      type=\"checkbox\"\n      className={checkboxClassname}\n      onChange={handleChange}\n      {...props}\n    />\n  );\n}\n","import type { RenderCellProps } from '../types';\n\nexport function renderValue<R, SR>(props: RenderCellProps<R, SR>) {\n  try {\n    return props.row[props.column.key as keyof R] as React.ReactNode;\n  } catch {\n    return null;\n  }\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Maybe, Renderers } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const DataGridDefaultRenderersContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport function useDefaultRenderers<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultRenderersContext);\n}\n","import type { RenderCheckboxProps } from '../types';\nimport { useDefaultRenderers } from '../DataGridDefaultRenderersContext';\n\ntype SharedInputProps = Pick<\n  RenderCheckboxProps,\n  'disabled' | 'tabIndex' | 'aria-label' | 'aria-labelledby' | 'indeterminate' | 'onChange'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  value: boolean;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  indeterminate,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const renderCheckbox = useDefaultRenderers()!.renderCheckbox!;\n\n  return renderCheckbox({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    tabIndex,\n    indeterminate,\n    disabled,\n    checked: value,\n    onChange\n  });\n}\n","import { createContext, useContext } from 'react';\n\nimport type { SelectHeaderRowEvent, SelectRowEvent } from '../types';\n\nexport interface RowSelectionContextValue {\n  readonly isRowSelected: boolean;\n  readonly isRowSelectionDisabled: boolean;\n}\n\nexport const RowSelectionContext = createContext<RowSelectionContextValue | undefined>(undefined);\n\nexport const RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport function useRowSelection() {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within renderCell');\n  }\n\n  return {\n    isRowSelectionDisabled: rowSelectionContext.isRowSelectionDisabled,\n    isRowSelected: rowSelectionContext.isRowSelected,\n    onRowSelectionChange: rowSelectionChangeContext\n  };\n}\n\nexport interface HeaderRowSelectionContextValue {\n  readonly isRowSelected: boolean;\n  readonly isIndeterminate: boolean;\n}\n\nexport const HeaderRowSelectionContext = createContext<HeaderRowSelectionContextValue | undefined>(\n  undefined\n);\n\nexport const HeaderRowSelectionChangeContext = createContext<\n  ((selectRowEvent: SelectHeaderRowEvent) => void) | undefined\n>(undefined);\n\nexport function useHeaderRowSelection() {\n  const headerRowSelectionContext = useContext(HeaderRowSelectionContext);\n  const headerRowSelectionChangeContext = useContext(HeaderRowSelectionChangeContext);\n\n  if (headerRowSelectionContext === undefined || headerRowSelectionChangeContext === undefined) {\n    throw new Error('useHeaderRowSelection must be used within renderHeaderCell');\n  }\n\n  return {\n    isIndeterminate: headerRowSelectionContext.isIndeterminate,\n    isRowSelected: headerRowSelectionContext.isRowSelected,\n    onRowSelectionChange: headerRowSelectionChangeContext\n  };\n}\n","import { useHeaderRowSelection, useRowSelection } from './hooks/useRowSelection';\nimport type { Column, RenderCellProps, RenderGroupCellProps, RenderHeaderCellProps } from './types';\nimport { SelectCellFormatter } from './cellRenderers';\n\nexport const SELECT_COLUMN_KEY = 'rdg-select-column';\n\nfunction HeaderRenderer(props: RenderHeaderCellProps<unknown>) {\n  const { isIndeterminate, isRowSelected, onRowSelectionChange } = useHeaderRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select All\"\n      tabIndex={props.tabIndex}\n      indeterminate={isIndeterminate}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ checked: isIndeterminate ? false : checked });\n      }}\n    />\n  );\n}\n\nfunction SelectFormatter(props: RenderCellProps<unknown>) {\n  const { isRowSelectionDisabled, isRowSelected, onRowSelectionChange } = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      tabIndex={props.tabIndex}\n      disabled={isRowSelectionDisabled}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: RenderGroupCellProps<unknown>) {\n  const { isRowSelected, onRowSelectionChange } = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  renderHeaderCell(props) {\n    return <HeaderRenderer {...props} />;\n  },\n  renderCell(props) {\n    return <SelectFormatter {...props} />;\n  },\n  renderGroupCell(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n","import { css } from '@linaria/core';\n\nimport type { RenderHeaderCellProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersContext';\n\nconst headerSortCellClassname = css`\n  @layer rdg.SortableHeaderCell {\n    display: flex;\n  }\n`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function renderHeaderCell<R, SR>({\n  column,\n  sortDirection,\n  priority\n}: RenderHeaderCellProps<R, SR>) {\n  if (!column.sortable) return column.name;\n\n  return (\n    <SortableHeaderCell sortDirection={sortDirection} priority={priority}>\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  RenderHeaderCellProps<R, SR>,\n  'sortDirection' | 'priority'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  sortDirection,\n  priority,\n  children\n}: SortableHeaderCellProps<R, SR>) {\n  const renderSortStatus = useDefaultRenderers<R, SR>()!.renderSortStatus!;\n\n  return (\n    <span className={headerSortCellClassname}>\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{renderSortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n","import { useMemo } from 'react';\n\nimport { clampColumnWidth, max, min } from '../utils';\nimport type { CalculatedColumn, CalculatedColumnParent, ColumnOrColumnGroup, Omit } from '../types';\nimport { renderValue } from '../cellRenderers';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport type { DataGridProps } from '../DataGrid';\nimport renderHeaderCell from '../renderHeaderCell';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer V> ? Mutable<V>[] : T[P];\n};\n\ninterface WithParent<R, SR> {\n  readonly parent: MutableCalculatedColumnParent<R, SR> | undefined;\n}\n\ntype MutableCalculatedColumnParent<R, SR> = Omit<Mutable<CalculatedColumnParent<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\ntype MutableCalculatedColumn<R, SR> = Omit<Mutable<CalculatedColumn<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\n\ninterface CalculatedColumnsArgs<R, SR> {\n  rawColumns: readonly ColumnOrColumnGroup<R, SR>[];\n  defaultColumnOptions: DataGridProps<R, SR>['defaultColumnOptions'];\n  viewportWidth: number;\n  scrollLeft: number;\n  getColumnWidth: (column: CalculatedColumn<R, SR>) => string | number;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  defaultColumnOptions,\n  getColumnWidth,\n  viewportWidth,\n  scrollLeft,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultRenderCell = defaultColumnOptions?.renderCell ?? renderValue;\n  const defaultRenderHeaderCell = defaultColumnOptions?.renderHeaderCell ?? renderHeaderCell;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n  const defaultDraggable = defaultColumnOptions?.draggable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, headerRowsCount } = useMemo((): {\n    readonly columns: readonly CalculatedColumn<R, SR>[];\n    readonly colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    readonly lastFrozenColumnIndex: number;\n    readonly headerRowsCount: number;\n  } => {\n    let lastFrozenColumnIndex = -1;\n    let headerRowsCount = 1;\n    const columns: MutableCalculatedColumn<R, SR>[] = [];\n\n    collectColumns(rawColumns, 1);\n\n    function collectColumns(\n      rawColumns: readonly ColumnOrColumnGroup<R, SR>[],\n      level: number,\n      parent?: MutableCalculatedColumnParent<R, SR>\n    ) {\n      for (const rawColumn of rawColumns) {\n        if ('children' in rawColumn) {\n          const calculatedColumnParent: MutableCalculatedColumnParent<R, SR> = {\n            name: rawColumn.name,\n            parent,\n            idx: -1,\n            colSpan: 0,\n            level: 0,\n            headerCellClass: rawColumn.headerCellClass\n          };\n\n          collectColumns(rawColumn.children, level + 1, calculatedColumnParent);\n          continue;\n        }\n\n        const frozen = rawColumn.frozen ?? false;\n\n        const column: MutableCalculatedColumn<R, SR> = {\n          ...rawColumn,\n          parent,\n          idx: 0,\n          level: 0,\n          frozen,\n          width: rawColumn.width ?? defaultWidth,\n          minWidth: rawColumn.minWidth ?? defaultMinWidth,\n          maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n          sortable: rawColumn.sortable ?? defaultSortable,\n          resizable: rawColumn.resizable ?? defaultResizable,\n          draggable: rawColumn.draggable ?? defaultDraggable,\n          renderCell: rawColumn.renderCell ?? defaultRenderCell,\n          renderHeaderCell: rawColumn.renderHeaderCell ?? defaultRenderHeaderCell\n        };\n\n        columns.push(column);\n\n        if (frozen) {\n          lastFrozenColumnIndex++;\n        }\n\n        if (level > headerRowsCount) {\n          headerRowsCount = level;\n        }\n      }\n    }\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort frozen columns second:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // TODO: sort columns to keep them grouped if they have a parent\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n      updateColumnParent(column, idx, 0);\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      headerRowsCount\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultRenderCell,\n    defaultRenderHeaderCell,\n    defaultResizable,\n    defaultSortable,\n    defaultDraggable\n  ]);\n\n  const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n\n    for (const column of columns) {\n      let width = getColumnWidth(column);\n\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {};\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [getColumnWidth, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    headerRowsCount,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth\n  };\n}\n\nfunction updateColumnParent<R, SR>(\n  column: MutableCalculatedColumn<R, SR> | MutableCalculatedColumnParent<R, SR>,\n  index: number,\n  level: number\n) {\n  if (level < column.level) {\n    column.level = level;\n  }\n\n  if (column.parent !== undefined) {\n    const { parent } = column;\n    if (parent.idx === -1) {\n      parent.idx = index;\n    }\n    parent.colSpan += 1;\n    updateColumnParent(parent, index, level - 1);\n  }\n}\n","import { useLayoutEffect, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport type { CalculatedColumn, ResizedWidth, StateSetter } from '../types';\nimport type { DataGridProps } from '../DataGrid';\n\nexport function useColumnWidths<R, SR>(\n  columns: readonly CalculatedColumn<R, SR>[],\n  viewportColumns: readonly CalculatedColumn<R, SR>[],\n  templateColumns: readonly string[],\n  gridRef: React.RefObject<HTMLDivElement | null>,\n  gridWidth: number,\n  resizedColumnWidths: ReadonlyMap<string, number>,\n  measuredColumnWidths: ReadonlyMap<string, number>,\n  setResizedColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  setMeasuredColumnWidths: StateSetter<ReadonlyMap<string, number>>,\n  onColumnResize: DataGridProps<R, SR>['onColumnResize']\n) {\n  const [columnToAutoResize, setColumnToAutoResize] = useState<{\n    readonly key: string;\n    readonly width: ResizedWidth;\n  } | null>(null);\n  const [prevGridWidth, setPreviousGridWidth] = useState(gridWidth);\n  const columnsCanFlex: boolean = columns.length === viewportColumns.length;\n  // Allow columns to flex again when...\n  const ignorePreviouslyMeasuredColumns: boolean =\n    // there is enough space for columns to flex and the grid was resized\n    columnsCanFlex && gridWidth !== prevGridWidth;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure: string[] = [];\n\n  for (const { key, idx, width } of viewportColumns) {\n    if (key === columnToAutoResize?.key) {\n      newTemplateColumns[idx] =\n        columnToAutoResize.width === 'max-content'\n          ? columnToAutoResize.width\n          : `${columnToAutoResize.width}px`;\n      columnsToMeasure.push(key);\n    } else if (\n      typeof width === 'string' &&\n      (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) &&\n      !resizedColumnWidths.has(key)\n    ) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n\n  useLayoutEffect(updateMeasuredWidths);\n\n  function updateMeasuredWidths() {\n    setPreviousGridWidth(gridWidth);\n    if (columnsToMeasure.length === 0) return;\n\n    setMeasuredColumnWidths((measuredColumnWidths) => {\n      const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n      let hasChanges = false;\n\n      for (const key of columnsToMeasure) {\n        const measuredWidth = measureColumnWidth(gridRef, key);\n        hasChanges ||= measuredWidth !== measuredColumnWidths.get(key);\n        if (measuredWidth === undefined) {\n          newMeasuredColumnWidths.delete(key);\n        } else {\n          newMeasuredColumnWidths.set(key, measuredWidth);\n        }\n      }\n\n      return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n    });\n\n    if (columnToAutoResize !== null) {\n      const resizingKey = columnToAutoResize.key;\n      setResizedColumnWidths((resizedColumnWidths) => {\n        const oldWidth = resizedColumnWidths.get(resizingKey);\n        const newWidth = measureColumnWidth(gridRef, resizingKey);\n        if (newWidth !== undefined && oldWidth !== newWidth) {\n          const newResizedColumnWidths = new Map(resizedColumnWidths);\n          newResizedColumnWidths.set(resizingKey, newWidth);\n          return newResizedColumnWidths;\n        }\n        return resizedColumnWidths;\n      });\n      setColumnToAutoResize(null);\n    }\n  }\n\n  function handleColumnResize(column: CalculatedColumn<R, SR>, nextWidth: ResizedWidth) {\n    const { key: resizingKey } = column;\n\n    flushSync(() => {\n      if (columnsCanFlex) {\n        // remeasure all the columns that can flex and are not resized by the user\n        setMeasuredColumnWidths((measuredColumnWidths) => {\n          const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n          for (const { key, width } of viewportColumns) {\n            if (resizingKey !== key && typeof width === 'string' && !resizedColumnWidths.has(key)) {\n              newMeasuredColumnWidths.delete(key);\n            }\n          }\n          return newMeasuredColumnWidths;\n        });\n      }\n\n      setColumnToAutoResize({\n        key: resizingKey,\n        width: nextWidth\n      });\n    });\n\n    if (onColumnResize) {\n      const previousWidth = resizedColumnWidths.get(resizingKey);\n      const newWidth =\n        typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey);\n      if (newWidth !== undefined && newWidth !== previousWidth) {\n        onColumnResize(column, newWidth);\n      }\n    }\n  }\n\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  } as const;\n}\n\nfunction measureColumnWidth(gridRef: React.RefObject<HTMLDivElement | null>, key: string) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current?.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}\n","import { useLayoutEffect, useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nexport function useGridDimensions() {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n  const [horizontalScrollbarHeight, setHorizontalScrollbarHeight] = useState(0);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialHorizontalScrollbarHeight = offsetHeight - clientHeight;\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - initialHorizontalScrollbarHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n    setHorizontalScrollbarHeight(initialHorizontalScrollbarHeight);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      const { clientHeight, offsetHeight } = gridRef.current!;\n\n      // we use flushSync here to avoid flashing scrollbars\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n        setHorizontalScrollbarHeight(offsetHeight - clientHeight);\n      });\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize, horizontalScrollbarHeight] as const;\n}\n","import { useCallback, useEffect, useRef } from 'react';\n\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n","import { useState } from 'react';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingTabIndex(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocusable = isSelected && !isChildFocused;\n\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        // eslint-disable-next-line react-compiler/react-compiler\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\n\nimport { floor, max, min } from '../utils';\n\ninterface ViewportRowsArgs<R> {\n  rows: readonly R[];\n  rowHeight: number | ((row: R) => number);\n  clientHeight: number;\n  scrollTop: number;\n  enableVirtualization: boolean;\n}\n\nexport function useViewportRows<R>({\n  rows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row) => {\n      const currentRowHeight = rowHeight(row);\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, isCellEditableUtil } from './utils';\nimport type { CellRendererProps } from './types';\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isDraggedOver,\n  row,\n  rowIdx,\n  className,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  style,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  const { cellClass } = column;\n  className = getCellClassname(\n    column,\n    {\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n  const isEditable = isCellEditableUtil(column, row);\n\n  function selectCellWrapper(openEditor?: boolean) {\n    selectCell({ rowIdx, idx: column.idx }, openEditor);\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onClick) {\n      const cellEvent = createCellEvent(event);\n      onClick({ rowIdx, row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleContextMenu(event: React.MouseEvent<HTMLDivElement>) {\n    if (onContextMenu) {\n      const cellEvent = createCellEvent(event);\n      onContextMenu({ rowIdx, row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onDoubleClick) {\n      const cellEvent = createCellEvent(event);\n      onDoubleClick({ rowIdx, row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper(true);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      aria-readonly={!isEditable || undefined}\n      tabIndex={tabIndex}\n      className={className}\n      style={{\n        ...getCellStyle(column, colSpan),\n        ...style\n      }}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {column.renderCell({\n        column,\n        row,\n        rowIdx,\n        isCellEditable: isEditable,\n        tabIndex: childTabIndex,\n        onRowChange: handleRowChange\n      })}\n    </div>\n  );\n}\n\nconst CellComponent = memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => React.JSX.Element;\n\nexport default CellComponent;\n\nexport function defaultRenderCell<R, SR>(key: React.Key, props: CellRendererProps<R, SR>) {\n  return <CellComponent key={key} {...props} />;\n}\n","import { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getCellStyle } from './utils';\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    --rdg-drag-handle-size: 8px;\n    z-index: 0;\n    cursor: move;\n    inline-size: var(--rdg-drag-handle-size);\n    block-size: var(--rdg-drag-handle-size);\n    background-color: var(--rdg-selection-color);\n    place-self: end;\n\n    &:hover {\n      --rdg-drag-handle-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nconst cellDragHandleFrozenClassname = css`\n  @layer rdg.DragHandle {\n    z-index: 1;\n    position: sticky;\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  gridRowStart: number;\n  column: CalculatedColumn<R, SR>;\n  columnWidth: number | string;\n  maxColIdx: number;\n  isLastRow: boolean;\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.RefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onClick: () => void;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  gridRowStart,\n  rows,\n  column,\n  columnWidth,\n  maxColIdx,\n  isLastRow,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  onClick,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  const { idx, rowIdx } = selectedPosition;\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n    // keep the focus on the cell\n    event.preventDefault();\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  function getStyle(): React.CSSProperties {\n    const colSpan = column.colSpan?.({ type: 'ROW', row: rows[rowIdx] }) ?? 1;\n    const { insetInlineStart, ...style } = getCellStyle(column, colSpan);\n    const marginEnd = 'calc(var(--rdg-drag-handle-size) * -0.5 + 1px)';\n    const isLastColumn = column.idx + colSpan - 1 === maxColIdx;\n\n    return {\n      ...style,\n      gridRowStart,\n      marginInlineEnd: isLastColumn ? undefined : marginEnd,\n      marginBlockEnd: isLastRow ? undefined : marginEnd,\n      insetInlineStart: insetInlineStart\n        ? `calc(${insetInlineStart} + ${columnWidth}px + var(--rdg-drag-handle-size) * -0.5 - 1px)`\n        : undefined\n    };\n  }\n\n  return (\n    <div\n      style={getStyle()}\n      className={clsx(cellDragHandleClassname, column.frozen && cellDragHandleFrozenClassname)}\n      onClick={onClick}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, onEditorNavigation } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellRendererProps,\n  EditCellKeyDownArgs,\n  Maybe,\n  Omit,\n  RenderEditCellProps\n} from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<RenderEditCellProps<R, SR>, 'onRowChange' | 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  rowIdx: number;\n  onRowChange: (row: R, commitChanges: boolean, shouldFocusCell: boolean) => void;\n  closeEditor: (shouldFocusCell: boolean) => void;\n  navigate: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onKeyDown: Maybe<(args: EditCellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number>(undefined);\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick ?? true;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown(\n        {\n          mode: 'EDIT',\n          row,\n          column,\n          rowIdx,\n          navigate() {\n            navigate(event);\n          },\n          onClose\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (event.key === 'Escape') {\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n\n  function onClose(commitChanges = false, shouldFocusCell = true) {\n    if (commitChanges) {\n      onRowChange(row, true, shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n\n  function onEditorRowChange(row: R, commitChangesAndFocus = false) {\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.displayCellContent && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={handleKeyDown}\n      onMouseDownCapture={cancelFrameRequest}\n    >\n      {column.renderEditCell != null && (\n        <>\n          {column.renderEditCell({\n            column,\n            row,\n            rowIdx,\n            onRowChange: onEditorRowChange,\n            onClose\n          })}\n          {column.editorOptions?.displayCellContent &&\n            column.renderCell({\n              column,\n              row,\n              rowIdx,\n              isCellEditable: true,\n              tabIndex: -1,\n              onRowChange: onEditorRowChange\n            })}\n        </>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getHeaderCellRowSpan, getHeaderCellStyle } from './utils';\nimport type { CalculatedColumnParent } from './types';\nimport type { GroupedColumnHeaderRowProps } from './GroupedColumnHeaderRow';\nimport { cellClassname } from './style/cell';\n\ntype SharedGroupedColumnHeaderRowProps<R, SR> = Pick<\n  GroupedColumnHeaderRowProps<R, SR>,\n  'rowIdx' | 'selectCell'\n>;\n\ninterface GroupedColumnHeaderCellProps<R, SR> extends SharedGroupedColumnHeaderRowProps<R, SR> {\n  column: CalculatedColumnParent<R, SR>;\n  isCellSelected: boolean;\n}\n\nexport default function GroupedColumnHeaderCell<R, SR>({\n  column,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: GroupedColumnHeaderCellProps<R, SR>) {\n  const { tabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { colSpan } = column;\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const index = column.idx + 1;\n\n  function onClick() {\n    selectCell({ idx: column.idx, rowIdx });\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={index}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={clsx(cellClassname, column.headerCellClass)}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan),\n        gridColumnStart: index,\n        gridColumnEnd: index + colSpan\n      }}\n      onFocus={onFocus}\n      onClick={onClick}\n    >\n      {column.name}\n    </div>\n  );\n}\n","import { useRef, useState } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport {\n  clampColumnWidth,\n  getCellClassname,\n  getCellStyle,\n  getHeaderCellRowSpan,\n  getHeaderCellStyle,\n  getLeftRightKey,\n  isCtrlKeyHeldDown,\n  stopPropagation\n} from './utils';\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\n\nconst cellSortableClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: pointer;\n  }\n`;\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\nexport const resizeHandleClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: col-resize;\n    position: absolute;\n    inset-block-start: 0;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 10px;\n  }\n`;\n\nconst cellDraggableClassname = 'rdg-cell-draggable';\n\nconst cellDragging = css`\n  opacity: 0.5;\n`;\n\nconst cellDraggingClassname = `rdg-cell-dragging ${cellDragging}`;\n\nconst cellOver = css`\n  background-color: var(--rdg-header-draggable-background-color);\n`;\n\nconst cellOverClassname = `rdg-cell-drag-over ${cellOver}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n  | 'onColumnsReorder'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  rowIdx: number;\n  isCellSelected: boolean;\n  dragDropKey: string;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  rowIdx,\n  isCellSelected,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction,\n  dragDropKey\n}: HeaderCellProps<R, SR>) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [isOver, setIsOver] = useState(false);\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n  const { sortable, resizable, draggable } = column;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellSortableClassname]: sortable,\n    [cellResizableClassname]: resizable,\n    [cellDraggableClassname]: draggable,\n    [cellDraggingClassname]: isDragging,\n    [cellOverClassname]: isOver\n  });\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst === true && sortDirection === 'DESC') ||\n        (sortDescendingFirst !== true && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick(event: React.MouseEvent<HTMLSpanElement>) {\n    selectCell({ idx: column.idx, rowIdx });\n\n    if (sortable) {\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell({ idx: 0, rowIdx });\n    }\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    const { key } = event;\n    if (sortable && (key === ' ' || key === 'Enter')) {\n      // prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    } else if (\n      resizable &&\n      isCtrlKeyHeldDown(event) &&\n      (key === 'ArrowLeft' || key === 'ArrowRight')\n    ) {\n      // prevent navigation\n      // TODO: check if we can use `preventDefault` instead\n      event.stopPropagation();\n      const { width } = event.currentTarget.getBoundingClientRect();\n      const { leftKey } = getLeftRightKey(direction);\n      const offset = key === leftKey ? -10 : 10;\n      const newWidth = clampColumnWidth(width + offset, column);\n      if (newWidth !== width) {\n        onColumnResize(column, newWidth);\n      }\n    }\n  }\n\n  function onDragStart(event: React.DragEvent<HTMLDivElement>) {\n    event.dataTransfer.setData(dragDropKey, column.key);\n    event.dataTransfer.dropEffect = 'move';\n    setIsDragging(true);\n  }\n\n  function onDragEnd() {\n    setIsDragging(false);\n  }\n\n  function onDragOver(event: React.DragEvent<HTMLDivElement>) {\n    // prevent default to allow drop\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }\n\n  function onDrop(event: React.DragEvent<HTMLDivElement>) {\n    setIsOver(false);\n    // The dragDropKey is derived from the useId() hook, which can sometimes generate keys with uppercase letters.\n    // When setting data using event.dataTransfer.setData(), the key is automatically converted to lowercase in some browsers.\n    // To ensure consistent comparison, we normalize the dragDropKey to lowercase before checking its presence in the event's dataTransfer types.\n    // https://html.spec.whatwg.org/multipage/dnd.html#the-datatransfer-interface\n    if (event.dataTransfer.types.includes(dragDropKey.toLowerCase())) {\n      const sourceKey = event.dataTransfer.getData(dragDropKey.toLowerCase());\n      if (sourceKey !== column.key) {\n        // prevent the browser from redirecting in some cases\n        event.preventDefault();\n        onColumnsReorder?.(sourceKey, column.key);\n      }\n    }\n  }\n\n  function onDragEnter(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(true);\n    }\n  }\n\n  function onDragLeave(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(false);\n    }\n  }\n\n  let draggableProps: React.ComponentProps<'div'> | undefined;\n  if (draggable) {\n    draggableProps = {\n      draggable: true,\n      /* events fired on the draggable target */\n      onDragStart,\n      onDragEnd,\n      /* events fired on the drop targets */\n      onDragOver,\n      onDragEnter,\n      onDragLeave,\n      onDrop\n    };\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan),\n        ...getCellStyle(column, colSpan)\n      }}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onKeyDown={onKeyDown}\n      {...draggableProps}\n    >\n      {column.renderHeaderCell({\n        column,\n        sortDirection,\n        priority,\n        tabIndex: childTabIndex\n      })}\n\n      {resizable && (\n        <ResizeHandle column={column} onColumnResize={onColumnResize} direction={direction} />\n      )}\n    </div>\n  );\n}\n\ntype ResizeHandleProps<R, SR> = Pick<\n  HeaderCellProps<R, SR>,\n  'column' | 'onColumnResize' | 'direction'\n>;\n\nfunction ResizeHandle<R, SR>({ column, onColumnResize, direction }: ResizeHandleProps<R, SR>) {\n  const resizingOffsetRef = useRef<number>(undefined);\n  const isRtl = direction === 'rtl';\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    // Fix column resizing on a draggable column in FF\n    event.preventDefault();\n\n    const { currentTarget, pointerId } = event;\n    currentTarget.setPointerCapture(pointerId);\n    const headerCell = currentTarget.parentElement!;\n    const { right, left } = headerCell.getBoundingClientRect();\n    resizingOffsetRef.current = isRtl ? event.clientX - left : right - event.clientX;\n  }\n\n  function onPointerMove(event: React.PointerEvent<HTMLDivElement>) {\n    const offset = resizingOffsetRef.current;\n    if (offset === undefined) return;\n    const { width, right, left } = event.currentTarget.parentElement!.getBoundingClientRect();\n    let newWidth = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n    newWidth = clampColumnWidth(newWidth, column);\n    if (width > 0 && newWidth !== width) {\n      onColumnResize(column, newWidth);\n    }\n  }\n\n  function onLostPointerCapture() {\n    resizingOffsetRef.current = undefined;\n  }\n\n  function onDoubleClick() {\n    onColumnResize(column, 'max-content');\n  }\n\n  return (\n    <div\n      className={resizeHandleClassname}\n      onClick={stopPropagation}\n      onPointerDown={onPointerDown}\n      onPointerMove={onPointerMove}\n      // we are not using pointerup because it does not fire in some cases\n      // pointer down -> alt+tab -> pointer up over another window -> pointerup event not fired\n      onLostPointerCapture={onLostPointerCapture}\n      onDoubleClick={onDoubleClick}\n    />\n  );\n}\n\n// only accept pertinent drag events:\n// - ignore drag events going from the container to an element inside the container\n// - ignore drag events going from an element inside the container to the container\nfunction isEventPertinent(event: React.DragEvent) {\n  const relatedTarget = event.relatedTarget as HTMLElement | null;\n\n  return !event.currentTarget.contains(relatedTarget);\n}\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = 'rdg-row-selected';\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      block-size: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n\nexport const topSummaryRowClassname = 'rdg-top-summary-row';\n\nexport const bottomSummaryRowClassname = 'rdg-bottom-summary-row';\n","import { memo, useId } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan } from './utils';\nimport type { CalculatedColumn, Direction, Maybe, Position, ResizedWidth } from './types';\nimport type { DataGridProps } from './DataGrid';\nimport HeaderCell from './HeaderCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowSelectedClassname } from './style/row';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange' | 'onColumnsReorder'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  rowIdx: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: ResizedWidth) => void;\n  selectCell: (position: Position) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n  headerRowClass: Maybe<string>;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 1 to show up above regular cells and the focus sink */\n      z-index: 2;\n      position: sticky;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nexport const headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  headerRowClass,\n  rowIdx,\n  columns,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const dragDropKey = useId();\n\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        rowIdx={rowIdx}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        onColumnsReorder={onColumnsReorder}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n        dragDropKey={dragDropKey}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={clsx(\n        headerRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1\n        },\n        headerRowClass\n      )}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => React.JSX.Element;\n","import { memo } from 'react';\n\nimport type { CalculatedColumn, CalculatedColumnParent, Position } from './types';\nimport GroupedColumnHeaderCell from './GroupedColumnHeaderCell';\nimport { headerRowClassname } from './HeaderRow';\n\nexport interface GroupedColumnHeaderRowProps<R, SR> {\n  rowIdx: number;\n  level: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectCell: (position: Position) => void;\n  selectedCellIdx: number | undefined;\n}\n\nfunction GroupedColumnHeaderRow<R, SR>({\n  rowIdx,\n  level,\n  columns,\n  selectedCellIdx,\n  selectCell\n}: GroupedColumnHeaderRowProps<R, SR>) {\n  const cells = [];\n  const renderedParents = new Set<CalculatedColumnParent<R, SR>>();\n\n  for (const column of columns) {\n    let { parent } = column;\n\n    if (parent === undefined) continue;\n\n    while (parent.level > level) {\n      if (parent.parent === undefined) break;\n      parent = parent.parent;\n    }\n\n    if (parent.level === level && !renderedParents.has(parent)) {\n      renderedParents.add(parent);\n      const { idx } = parent;\n      cells.push(\n        <GroupedColumnHeaderCell<R, SR>\n          key={idx}\n          column={parent}\n          rowIdx={rowIdx}\n          isCellSelected={selectedCellIdx === idx}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={headerRowClassname}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(GroupedColumnHeaderRow) as <R, SR>(\n  props: GroupedColumnHeaderRowProps<R, SR>\n) => React.JSX.Element;\n","import { memo, useMemo } from 'react';\nimport clsx from 'clsx';\n\nimport { RowSelectionContext, useLatestFunc, type RowSelectionContextValue } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { CalculatedColumn, RenderRowProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersContext';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nfunction Row<R, SR>({\n  className,\n  rowIdx,\n  gridRowStart,\n  selectedCellIdx,\n  isRowSelectionDisabled,\n  isRowSelected,\n  draggedOverCellIdx,\n  lastFrozenColumnIndex,\n  row,\n  viewportColumns,\n  selectedCellEditor,\n  onCellClick,\n  onCellDoubleClick,\n  onCellContextMenu,\n  rowClass,\n  setDraggedOverRowIdx,\n  onMouseEnter,\n  onRowChange,\n  selectCell,\n  ...props\n}: RenderRowProps<R, SR>) {\n  const renderCell = useDefaultRenderers<R, SR>()!.renderCell!;\n\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row, rowIdx),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        renderCell(column.key, {\n          column,\n          colSpan,\n          row,\n          rowIdx,\n          isDraggedOver: draggedOverCellIdx === idx,\n          isCellSelected,\n          onClick: onCellClick,\n          onDoubleClick: onCellDoubleClick,\n          onContextMenu: onCellContextMenu,\n          onRowChange: handleRowChange,\n          selectCell\n        })\n      );\n    }\n  }\n\n  const selectionValue = useMemo(\n    (): RowSelectionContextValue => ({ isRowSelected, isRowSelectionDisabled }),\n    [isRowSelectionDisabled, isRowSelected]\n  );\n\n  return (\n    <RowSelectionContext value={selectionValue}>\n      <div\n        role=\"row\"\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionContext>\n  );\n}\n\nconst RowComponent = memo(Row) as <R, SR>(props: RenderRowProps<R, SR>) => React.JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRenderRow<R, SR>(key: React.Key, props: RenderRowProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n","import { useLayoutEffect, useRef } from 'react';\n\nimport { scrollIntoView } from './utils';\n\nexport interface PartialPosition {\n  readonly idx?: number | undefined;\n  readonly rowIdx?: number | undefined;\n}\n\nexport default function ScrollToCell({\n  scrollToPosition: { idx, rowIdx },\n  gridRef,\n  setScrollToCellPosition\n}: {\n  scrollToPosition: PartialPosition;\n  gridRef: React.RefObject<HTMLDivElement | null>;\n  setScrollToCellPosition: (cell: null) => void;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // scroll until the cell is completely visible\n    // this is needed if the grid has auto-sized columns\n    scrollIntoView(ref.current);\n  });\n\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridRef.current!,\n      threshold: 1.0\n    });\n\n    observer.observe(ref.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridRef, setScrollToCellPosition]);\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        gridColumn: idx === undefined ? '1/-1' : idx + 1,\n        gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n      }}\n    />\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderSortIconProps, RenderSortPriorityProps, RenderSortStatusProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function renderSortStatus({ sortDirection, priority }: RenderSortStatusProps) {\n  return (\n    <>\n      {renderSortIcon({ sortDirection })}\n      {renderSortPriority({ priority })}\n    </>\n  );\n}\n\nexport function renderSortIcon({ sortDirection }: RenderSortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function renderSortPriority({ priority }: RenderSortPriorityProps) {\n  return priority;\n}\n","import { css } from '@linaria/core';\n\nimport { cell } from './cell';\nimport { bottomSummaryRowClassname, row, topSummaryRowClassname } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 90.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 17.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n`;\n\nconst root = css`\n  @layer rdg.Defaults {\n    *,\n    *::before,\n    *::after {\n      box-sizing: inherit;\n    }\n  }\n\n  @layer rdg.Root {\n    ${lightTheme}\n    --rdg-selection-color: #66afe9;\n    --rdg-font-size: 14px;\n    --rdg-cell-frozen-box-shadow: 2px 0 5px -2px rgba(136, 136, 136, 0.3);\n\n    &:dir(rtl) {\n      --rdg-cell-frozen-box-shadow: -2px 0 5px -2px rgba(136, 136, 136, 0.3);\n    }\n\n    display: grid;\n\n    color-scheme: var(--rdg-color-scheme, light dark);\n    accent-color: light-dark(hsl(207deg 100% 29%), hsl(207deg 100% 79%));\n\n    /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n    /* We set a stacking context so internal elements don't render on top of external elements. */\n    /* size containment is not used as it could break \"width: min-content\" for example, and the grid would infinitely resize on Chromium browsers */\n    contain: content;\n    content-visibility: auto;\n    block-size: 350px;\n    border: 1px solid var(--rdg-border-color);\n    box-sizing: border-box;\n    overflow: auto;\n    background-color: var(--rdg-background-color);\n    color: var(--rdg-color);\n    font-size: var(--rdg-font-size);\n\n    /* needed on Firefox to fix scrollbars */\n    &::before {\n      content: '';\n      grid-column: 1/-1;\n      grid-row: 1/-1;\n    }\n\n    &.rdg-dark {\n      --rdg-color-scheme: dark;\n      ${darkTheme}\n    }\n\n    &.rdg-light {\n      --rdg-color-scheme: light;\n    }\n\n    @media (prefers-color-scheme: dark) {\n      &:not(.rdg-light) {\n        ${darkTheme}\n      }\n    }\n\n    > :nth-last-child(1 of .${topSummaryRowClassname}) {\n      > .${cell} {\n        border-block-end: 2px solid var(--rdg-summary-border-color);\n      }\n    }\n\n    > :nth-child(1 of .${bottomSummaryRowClassname}) {\n      > .${cell} {\n        border-block-start: 2px solid var(--rdg-summary-border-color);\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 1 to show up above regular frozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const focusSinkHeaderAndSummaryClassname = css`\n  @layer rdg.FocusSink {\n    /* Should have a higher value than 3 to show up above header and summary rows */\n    z-index: 3;\n  }\n`;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CellRendererProps } from './types';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<\n  CellRendererProps<R, SR>,\n  'rowIdx' | 'column' | 'colSpan' | 'isCellSelected' | 'selectCell'\n>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell({ rowIdx, idx: column.idx });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.renderSummaryCell?.({ column, row, tabIndex: childTabIndex })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => React.JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { RenderRowProps } from './types';\nimport { cell, cellFrozen } from './style/cell';\nimport {\n  bottomSummaryRowClassname,\n  rowClassname,\n  rowSelectedClassname,\n  topSummaryRowClassname\n} from './style/row';\nimport SummaryCell from './SummaryCell';\n\ntype SharedRenderRowProps<R, SR> = Pick<\n  RenderRowProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart' | 'selectCell'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRenderRowProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  isTop: boolean;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 2;\n    }\n\n    > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [`${topSummaryRowClassname} ${topSummaryRow}`]: isTop,\n          [bottomSummaryRowClassname]: !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => React.JSX.Element;\n","import {\n  useCallback,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\nimport type { Key, KeyboardEvent } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  HeaderRowSelectionChangeContext,\n  HeaderRowSelectionContext,\n  RowSelectionChangeContext,\n  useCalculatedColumns,\n  useColumnWidths,\n  useGridDimensions,\n  useLatestFunc,\n  useViewportColumns,\n  useViewportRows,\n  type HeaderRowSelectionContextValue\n} from './hooks';\nimport {\n  abs,\n  assertIsValidKeyGetter,\n  canExitGrid,\n  createCellEvent,\n  getColSpan,\n  getLeftRightKey,\n  getNextSelectedCellPosition,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  isSelectedCellEditable,\n  renderMeasuringCells,\n  scrollIntoView,\n  sign\n} from './utils';\nimport type {\n  CalculatedColumn,\n  CellClickArgs,\n  CellClipboardEvent,\n  CellCopyEvent,\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  CellMouseEvent,\n  CellNavigationMode,\n  CellPasteEvent,\n  CellSelectArgs,\n  Column,\n  ColumnOrColumnGroup,\n  Direction,\n  FillEvent,\n  Maybe,\n  Position,\n  Renderers,\n  RowsChangeData,\n  SelectHeaderRowEvent,\n  SelectRowEvent,\n  SortColumn\n} from './types';\nimport { defaultRenderCell } from './Cell';\nimport { renderCheckbox as defaultRenderCheckbox } from './cellRenderers';\nimport {\n  DataGridDefaultRenderersContext,\n  useDefaultRenderers\n} from './DataGridDefaultRenderersContext';\nimport DragHandle from './DragHandle';\nimport EditCell from './EditCell';\nimport GroupedColumnHeaderRow from './GroupedColumnHeaderRow';\nimport HeaderRow from './HeaderRow';\nimport { defaultRenderRow } from './Row';\nimport type { PartialPosition } from './ScrollToCell';\nimport ScrollToCell from './ScrollToCell';\nimport { default as defaultRenderSortStatus } from './sortStatus';\nimport {\n  focusSinkClassname,\n  focusSinkHeaderAndSummaryClassname,\n  rootClassname,\n  viewportDraggingClassname\n} from './style/core';\nimport { rowSelected, rowSelectedWithFrozenCell } from './style/row';\nimport SummaryRow from './SummaryRow';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\nexport type DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  | 'renderCell'\n  | 'renderHeaderCell'\n  | 'width'\n  | 'minWidth'\n  | 'maxWidth'\n  | 'resizable'\n  | 'sortable'\n  | 'draggable'\n>;\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToCell: (position: PartialPosition) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.ComponentProps<'div'>,\n  | 'role'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-description'\n  | 'aria-describedby'\n  | 'aria-rowcount'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  ref?: Maybe<React.Ref<DataGridHandle>>;\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly ColumnOrColumnGroup<NoInfer<R>, NoInfer<SR>>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the top of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: NoInfer<R>) => K>;\n  onRowsChange?: Maybe<(rows: NoInfer<R>[], data: RowsChangeData<NoInfer<R>, NoInfer<SR>>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((row: NoInfer<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Determines if row selection is disabled, per row */\n  isRowSelectionDisabled?: Maybe<(row: NoInfer<R>) => boolean>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<NoInfer<K>>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<NoInfer<R>, NoInfer<SR>>>;\n  onFill?: Maybe<(event: FillEvent<NoInfer<R>>) => NoInfer<R>>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a cell is clicked */\n  onCellClick?: Maybe<\n    (args: CellClickArgs<NoInfer<R>, NoInfer<SR>>, event: CellMouseEvent) => void\n  >;\n  /** Function called whenever a cell is double clicked */\n  onCellDoubleClick?: Maybe<\n    (args: CellClickArgs<NoInfer<R>, NoInfer<SR>>, event: CellMouseEvent) => void\n  >;\n  /** Function called whenever a cell is right clicked */\n  onCellContextMenu?: Maybe<\n    (args: CellClickArgs<NoInfer<R>, NoInfer<SR>>, event: CellMouseEvent) => void\n  >;\n  onCellKeyDown?: Maybe<\n    (args: CellKeyDownArgs<NoInfer<R>, NoInfer<SR>>, event: CellKeyboardEvent) => void\n  >;\n  onCellCopy?: Maybe<\n    (args: CellCopyEvent<NoInfer<R>, NoInfer<SR>>, event: CellClipboardEvent) => void\n  >;\n  onCellPaste?: Maybe<\n    (args: CellPasteEvent<NoInfer<R>, NoInfer<SR>>, event: CellClipboardEvent) => NoInfer<R>\n  >;\n  /** Function called whenever cell selection is changed */\n  onSelectedCellChange?: Maybe<(args: CellSelectArgs<NoInfer<R>, NoInfer<SR>>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(column: CalculatedColumn<R, SR>, width: number) => void>;\n  /** Called when a column is reordered */\n  onColumnsReorder?: Maybe<(sourceColumnKey: string, targetColumnKey: string) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  renderers?: Maybe<Renderers<NoInfer<R>, NoInfer<SR>>>;\n  rowClass?: Maybe<(row: NoInfer<R>, rowIdx: number) => Maybe<string>>;\n  headerRowClass?: Maybe<string>;\n  /** @default 'ltr' */\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n  'data-cy'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nexport function DataGrid<R, SR = unknown, K extends Key = Key>(props: DataGridProps<R, SR, K>) {\n  const {\n    ref,\n    // Grid and data Props\n    columns: rawColumns,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    isRowSelectionDisabled,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    // Event props\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onSelectedCellChange,\n    onScroll,\n    onColumnResize,\n    onColumnsReorder,\n    onFill,\n    onCellCopy,\n    onCellPaste,\n    // Toggles and modes\n    enableVirtualization: rawEnableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    headerRowClass,\n    direction: rawDirection,\n    // ARIA\n    role: rawRole,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-description': ariaDescription,\n    'aria-describedby': ariaDescribedBy,\n    'aria-rowcount': rawAriaRowCount,\n    'data-testid': testId,\n    'data-cy': dataCy\n  } = props;\n\n  /**\n   * defaults\n   */\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const role = rawRole ?? 'grid';\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const renderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const renderCell = renderers?.renderCell ?? defaultRenderers?.renderCell ?? defaultRenderCell;\n  const renderSortStatus =\n    renderers?.renderSortStatus ?? defaultRenderers?.renderSortStatus ?? defaultRenderSortStatus;\n  const renderCheckbox =\n    renderers?.renderCheckbox ?? defaultRenderers?.renderCheckbox ?? defaultRenderCheckbox;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [resizedColumnWidths, setResizedColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [measuredColumnWidths, setMeasuredColumnWidths] = useState(\n    (): ReadonlyMap<string, number> => new Map()\n  );\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState<PartialPosition | null>(null);\n  const [shouldFocusCell, setShouldFocusCell] = useState(false);\n  const [previousRowIdx, setPreviousRowIdx] = useState(-1);\n\n  const getColumnWidth = useCallback(\n    (column: CalculatedColumn<R, SR>) => {\n      return (\n        resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width\n      );\n    },\n    [measuredColumnWidths, resizedColumnWidths]\n  );\n\n  const [gridRef, gridWidth, gridHeight, horizontalScrollbarHeight] = useGridDimensions();\n  const {\n    columns,\n    colSpanColumns,\n    lastFrozenColumnIndex,\n    headerRowsCount,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    totalFrozenColumnWidth\n  } = useCalculatedColumns({\n    rawColumns,\n    defaultColumnOptions,\n    getColumnWidth,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    enableVirtualization\n  });\n\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const groupedColumnHeaderRowsCount = headerRowsCount - 1;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n  const mainHeaderRowIdx = minRowIdx + groupedColumnHeaderRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n\n  const [selectedPosition, setSelectedPosition] = useState(\n    (): SelectCellState | EditCellState<R> => ({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' })\n  );\n\n  /**\n   * refs\n   */\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n\n  /**\n   * computed values\n   */\n  const isTreeGrid = role === 'treegrid';\n  const headerRowsHeight = headerRowsCount * headerRowHeight;\n  const summaryRowsHeight = summaryRowsCount * summaryRowHeight;\n  const clientHeight = gridHeight - headerRowsHeight - summaryRowsHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const { leftKey, rightKey } = getLeftRightKey(direction);\n  const ariaRowCount = rawAriaRowCount ?? headerRowsCount + rows.length + summaryRowsCount;\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      renderCheckbox,\n      renderSortStatus,\n      renderCell\n    }),\n    [renderCheckbox, renderSortStatus, renderCell]\n  );\n\n  const headerSelectionValue = useMemo((): HeaderRowSelectionContextValue => {\n    // no rows to select = explicitely unchecked\n    let hasSelectedRow = false;\n    let hasUnselectedRow = false;\n\n    if (rowKeyGetter != null && selectedRows != null && selectedRows.size > 0) {\n      for (const row of rows) {\n        if (selectedRows.has(rowKeyGetter(row))) {\n          hasSelectedRow = true;\n        } else {\n          hasUnselectedRow = true;\n        }\n\n        if (hasSelectedRow && hasUnselectedRow) break;\n      }\n    }\n\n    return {\n      isRowSelected: hasSelectedRow && !hasUnselectedRow,\n      isIndeterminate: hasSelectedRow && hasUnselectedRow\n    };\n  }, [rows, selectedRows, rowKeyGetter]);\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rows,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows\n  });\n\n  const { gridTemplateColumns, handleColumnResize } = useColumnWidths(\n    columns,\n    viewportColumns,\n    templateColumns,\n    gridRef,\n    gridWidth,\n    resizedColumnWidths,\n    measuredColumnWidths,\n    setResizedColumnWidths,\n    setMeasuredColumnWidths,\n    onColumnResize\n  );\n\n  const minColIdx = isTreeGrid ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n  const scrollHeight =\n    headerRowHeight + totalRowHeight + summaryRowsHeight + horizontalScrollbarHeight;\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onColumnsReorderLastest = useLatestFunc(onColumnsReorder);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectHeaderRowLatest = useLatestFunc(selectHeaderRow);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectHeaderCellLatest = useLatestFunc(({ idx, rowIdx }: Position) => {\n    selectCell({ rowIdx: minRowIdx + rowIdx - 1, idx });\n  });\n\n  /**\n   * callbacks\n   */\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  const focusCellOrCellContent = useCallback(() => {\n    const cell = getCellToScroll(gridRef.current!);\n    if (cell === null) return;\n\n    scrollIntoView(cell);\n    // Focus cell content when available instead of the cell itself\n    const elementToFocus = cell.querySelector<Element & HTMLOrSVGElement>('[tabindex=\"0\"]') ?? cell;\n    elementToFocus.focus({ preventScroll: true });\n  }, [gridRef]);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      focusSinkRef.current !== null &&\n      selectedCellIsWithinSelectionBounds &&\n      selectedPosition.idx === -1\n    ) {\n      focusSinkRef.current.focus({ preventScroll: true });\n      scrollIntoView(focusSinkRef.current);\n    }\n  }, [selectedCellIsWithinSelectionBounds, selectedPosition]);\n\n  useLayoutEffect(() => {\n    if (shouldFocusCell) {\n      setShouldFocusCell(false);\n      focusCellOrCellContent();\n    }\n  }, [shouldFocusCell, focusCellOrCellContent]);\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToCell({ idx, rowIdx }) {\n      const scrollToIdx =\n        idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx =\n        rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({ idx: scrollToIdx, rowIdx: scrollToRowIdx });\n      }\n    },\n    selectCell\n  }));\n\n  /**\n   * event handlers\n   */\n  function selectHeaderRow(args: SelectHeaderRowEvent) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n\n    const newSelectedRows = new Set(selectedRows);\n    for (const row of rows) {\n      if (isRowSelectionDisabled?.(row) === true) continue;\n      const rowKey = rowKeyGetter(row);\n      if (args.checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectRow(args: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const { row, checked, isShiftClick } = args;\n    if (isRowSelectionDisabled?.(row) === true) return;\n    const newSelectedRows = new Set(selectedRows);\n    const rowKey = rowKeyGetter(row);\n    const rowIdx = rows.indexOf(row);\n    setPreviousRowIdx(rowIdx);\n\n    if (checked) {\n      newSelectedRows.add(rowKey);\n    } else {\n      newSelectedRows.delete(rowKey);\n    }\n\n    if (\n      isShiftClick &&\n      previousRowIdx !== -1 &&\n      previousRowIdx !== rowIdx &&\n      previousRowIdx < rows.length\n    ) {\n      const step = sign(rowIdx - previousRowIdx);\n      for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n        const row = rows[i];\n        if (isRowSelectionDisabled?.(row) === true) continue;\n        if (checked) {\n          newSelectedRows.add(rowKeyGetter(row));\n        } else {\n          newSelectedRows.delete(rowKeyGetter(row));\n        }\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function handleKeyDown(event: KeyboardEvent<HTMLDivElement>) {\n    const { idx, rowIdx, mode } = selectedPosition;\n    if (mode === 'EDIT') return;\n\n    if (onCellKeyDown && isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown(\n        {\n          mode: 'SELECT',\n          row,\n          column: columns[idx],\n          rowIdx,\n          selectCell\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = isTreeGrid && event.target === focusSinkRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    switch (event.key) {\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    if (row === rows[rowIdx]) return;\n    const updatedRows = [...rows];\n    updatedRows[rowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCellCopy(event: CellClipboardEvent) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const { idx, rowIdx } = selectedPosition;\n    onCellCopy?.({ row: rows[rowIdx], column: columns[idx] }, event);\n  }\n\n  function handleCellPaste(event: CellClipboardEvent) {\n    if (!onCellPaste || !onRowsChange || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const updatedRow = onCellPaste({ row: rows[rowIdx], column }, event);\n    updateRow(column, rowIdx, updatedRow);\n  }\n\n  function handleCellInput(event: KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // prevent scrolling\n      event.preventDefault();\n      return;\n    }\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event, onCellPaste != null)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinEditBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && idx >= 0 && idx <= maxColIdx;\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinEditBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    const samePosition = isSamePosition(selectedPosition, position);\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx];\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (samePosition) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(getCellToScroll(gridRef.current!));\n    } else {\n      setShouldFocusCell(true);\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n\n    if (onSelectedCellChange && !samePosition) {\n      onSelectedCellChange({\n        rowIdx: position.rowIdx,\n        row: isRowIdxWithinViewportBounds(position.rowIdx) ? rows[position.rowIdx] : undefined,\n        column: columns[position.idx]\n      });\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: minRowIdx };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: maxRowIdx };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let cellNavigationMode: CellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n\n    // prevent scrolling and do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      moveUp: key === 'ArrowUp',\n      moveNext: key === rightKey || (key === 'Tab' && !shiftKey),\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      mainHeaderRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function renderDragHandle() {\n    if (\n      onFill == null ||\n      selectedPosition.mode === 'EDIT' ||\n      !isCellWithinViewportBounds(selectedPosition)\n    ) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    if (column.renderEditCell == null || column.editable === false) {\n      return;\n    }\n\n    const columnWidth = getColumnWidth(column);\n\n    return (\n      <DragHandle\n        gridRowStart={headerAndTopSummaryRowsCount + rowIdx + 1}\n        rows={rows}\n        column={column}\n        columnWidth={columnWidth}\n        maxColIdx={maxColIdx}\n        isLastRow={rowIdx === maxRowIdx}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onClick={focusCellOrCellContent}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    const closeOnExternalRowChange = column.editorOptions?.closeOnExternalRowChange ?? true;\n\n    const closeEditor = (shouldFocusCell: boolean) => {\n      setShouldFocusCell(shouldFocusCell);\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges: boolean, shouldFocusCell: boolean) => {\n      if (commitChanges) {\n        // Prevents two issues when editor is closed by clicking on a different cell\n        //\n        // Otherwise commitEditorChanges may be called before the cell state is changed to\n        // SELECT and this results in onRowChange getting called twice.\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor(shouldFocusCell);\n        });\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (\n      closeOnExternalRowChange &&\n      rows[selectedPosition.rowIdx] !== selectedPosition.originalRow\n    ) {\n      // Discard changes if rows are updated from outside\n      closeEditor(false);\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        onKeyDown={onCellKeyDown}\n        navigate={navigate}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    // idx can be -1 if grouping is enabled\n    const selectedColumn = selectedPosition.idx === -1 ? undefined : columns[selectedPosition.idx];\n    if (\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = selectedIdx === -1 ? undefined : columns[selectedIdx];\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      let key: K | number = rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n\n      rowElements.push(\n        renderRow(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex': headerAndTopSummaryRowsCount + rowIdx + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelectionDisabled: isRowSelectionDisabled?.(row) ?? false,\n          isRowSelected,\n          onCellClick: onCellClickLatest,\n          onCellDoubleClick: onCellDoubleClickLatest,\n          onCellContextMenu: onCellContextMenuLatest,\n          rowClass,\n          gridRowStart,\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectCellLatest,\n          selectedCellEditor: getCellEditor(rowIdx)\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `repeat(${headerRowsCount}, ${headerRowHeight}px)`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused =\n    selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n\n  return (\n    // biome-ignore lint/a11y/useValidAriaProps: aria-description is a valid prop\n    <div\n      role={role}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-description={ariaDescription}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={ariaRowCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            isRowIdxWithinViewportBounds(selectedPosition.rowIdx) ||\n            scrollToPosition?.rowIdx !== undefined\n              ? `${headerRowsHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateColumns,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-scroll-height': `${scrollHeight}px`,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      onCopy={handleCellCopy}\n      onPaste={handleCellPaste}\n      data-testid={testId}\n      data-cy={dataCy}\n    >\n      <DataGridDefaultRenderersContext value={defaultGridComponents}>\n        <HeaderRowSelectionChangeContext value={selectHeaderRowLatest}>\n          <HeaderRowSelectionContext value={headerSelectionValue}>\n            {Array.from({ length: groupedColumnHeaderRowsCount }, (_, index) => (\n              <GroupedColumnHeaderRow\n                key={index}\n                rowIdx={index + 1}\n                level={-groupedColumnHeaderRowsCount + index}\n                columns={getRowViewportColumns(minRowIdx + index)}\n                selectedCellIdx={\n                  selectedPosition.rowIdx === minRowIdx + index ? selectedPosition.idx : undefined\n                }\n                selectCell={selectHeaderCellLatest}\n              />\n            ))}\n            <HeaderRow\n              headerRowClass={headerRowClass}\n              rowIdx={headerRowsCount}\n              columns={getRowViewportColumns(mainHeaderRowIdx)}\n              onColumnResize={handleColumnResizeLatest}\n              onColumnsReorder={onColumnsReorderLastest}\n              sortColumns={sortColumns}\n              onSortColumnsChange={onSortColumnsChangeLatest}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n              selectedCellIdx={\n                selectedPosition.rowIdx === mainHeaderRowIdx ? selectedPosition.idx : undefined\n              }\n              selectCell={selectHeaderCellLatest}\n              shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n              direction={direction}\n            />\n          </HeaderRowSelectionContext>\n        </HeaderRowSelectionChangeContext>\n        {rows.length === 0 && noRowsFallback ? (\n          noRowsFallback\n        ) : (\n          <>\n            {topSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + 1 + rowIdx;\n              const summaryRowIdx = mainHeaderRowIdx + 1 + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top = headerRowsHeight + summaryRowHeight * rowIdx;\n\n              return (\n                <SummaryRow\n                  key={rowIdx}\n                  aria-rowindex={gridRowStart}\n                  rowIdx={summaryRowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={undefined}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  isTop\n                  selectCell={selectCellLatest}\n                />\n              );\n            })}\n            <RowSelectionChangeContext value={selectRowLatest}>\n              {getViewportRows()}\n            </RowSelectionChangeContext>\n            {bottomSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n              const summaryRowIdx = rows.length + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top =\n                clientHeight > totalRowHeight\n                  ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                  : undefined;\n              const bottom =\n                top === undefined\n                  ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                  : undefined;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={ariaRowCount - bottomSummaryRowsCount + rowIdx + 1}\n                  key={rowIdx}\n                  rowIdx={summaryRowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={bottom}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  isTop={false}\n                  selectCell={selectCellLatest}\n                />\n              );\n            })}\n          </>\n        )}\n      </DataGridDefaultRenderersContext>\n\n      {renderDragHandle()}\n\n      {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n      {renderMeasuringCells(viewportColumns)}\n\n      {/* extra div is needed for row navigation in a treegrid */}\n      {isTreeGrid && (\n        <div\n          ref={focusSinkRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [focusSinkHeaderAndSummaryClassname]: !isRowIdxWithinViewportBounds(\n              selectedPosition.rowIdx\n            ),\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n          }}\n        />\n      )}\n\n      {scrollToPosition !== null && (\n        <ScrollToCell\n          scrollToPosition={scrollToPosition}\n          setScrollToCellPosition={setScrollToPosition}\n          gridRef={gridRef}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction getCellToScroll(gridEl: HTMLDivElement) {\n  return gridEl.querySelector<HTMLDivElement>(':scope > [role=\"row\"] > [tabindex=\"0\"]');\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n"],"names":["r","f","o","clsx","getColSpan","column","lastFrozenColumnIndex","args","colSpan","stopPropagation","event","scrollIntoView","element","createCellEvent","defaultPrevented","cellEvent","nonInputKeys","isCtrlKeyHeldDown","vKey","isDefaultCellInput","isUserHandlingPaste","onEditorNavigation","key","target","getLeftRightKey","direction","isRtl","measuringCellClassname","renderMeasuringCells","viewportColumns","map","idx","minWidth","maxWidth","jsx","className","style","gridColumnStart","isSelectedCellEditable","selectedPosition","columns","rows","row","isCellEditableUtil","getSelectedCellColSpan","topSummaryRows","bottomSummaryRows","rowIdx","mainHeaderRowIdx","topSummaryRowsCount","getNextSelectedCellPosition","moveUp","moveNext","cellNavigationMode","colSpanColumns","minRowIdx","maxRowIdx","currentIdx","currentRowIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","columnsCount","setColSpan","colIdx","getParentRowIdx","parent","setHeaderGroupColAndRowSpan","parentRowIdx","found","nextParentRowIdx","canExitGrid","maxColIdx","shiftKey","cell","cellClassname","cellFrozen","cellFrozenClassname","getRowStyle","getHeaderCellStyle","rowSpan","gridRowEnd","paddingBlockStart","getCellStyle","index","getCellClassname","extraClasses","min","max","floor","sign","abs","assertIsValidKeyGetter","keyGetter","clampColumnWidth","width","getHeaderCellRowSpan","checkbox","checkboxClassname","renderCheckbox","onChange","indeterminate","props","handleChange","e","checked","nativeEvent","ref","el","type","renderValue","DataGridDefaultRenderersContext","createContext","useDefaultRenderers","useContext","SelectCellFormatter","value","tabIndex","disabled","ariaLabel","ariaLabelledBy","RowSelectionContext","RowSelectionChangeContext","useRowSelection","rowSelectionContext","rowSelectionChangeContext","HeaderRowSelectionContext","HeaderRowSelectionChangeContext","useHeaderRowSelection","headerRowSelectionContext","headerRowSelectionChangeContext","SELECT_COLUMN_KEY","HeaderRenderer","isIndeterminate","isRowSelected","onRowSelectionChange","SelectFormatter","isRowSelectionDisabled","isShiftClick","SelectGroupFormatter","SelectColumn","headerSortCellClassname","headerSortName","headerSortNameClassname","renderHeaderCell","sortDirection","priority","sortable","SortableHeaderCell","children","name","renderSortStatus","jsxs","DEFAULT_COLUMN_WIDTH","DEFAULT_COLUMN_MIN_WIDTH","useCalculatedColumns","rawColumns","defaultColumnOptions","getColumnWidth","viewportWidth","scrollLeft","enableVirtualization","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultRenderCell","defaultRenderHeaderCell","defaultSortable","defaultResizable","defaultDraggable","headerRowsCount","useMemo","collectColumns","level","rawColumn","calculatedColumnParent","frozen","aKey","frozenA","bKey","frozenB","updateColumnParent","templateColumns","layoutCssVars","totalFrozenColumnWidth","columnMetrics","left","columnMetric","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useColumnWidths","gridRef","gridWidth","resizedColumnWidths","measuredColumnWidths","setResizedColumnWidths","setMeasuredColumnWidths","onColumnResize","columnToAutoResize","setColumnToAutoResize","useState","prevGridWidth","setPreviousGridWidth","columnsCanFlex","ignorePreviouslyMeasuredColumns","newTemplateColumns","columnsToMeasure","gridTemplateColumns","useLayoutEffect","updateMeasuredWidths","newMeasuredColumnWidths","hasChanges","measuredWidth","measureColumnWidth","resizingKey","oldWidth","newWidth","newResizedColumnWidths","handleColumnResize","nextWidth","flushSync","previousWidth","selector","useGridDimensions","useRef","inlineSize","setInlineSize","blockSize","setBlockSize","horizontalScrollbarHeight","setHorizontalScrollbarHeight","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","height","initialHorizontalScrollbarHeight","initialWidth","initialHeight","resizeObserver","entries","size","useLatestFunc","fn","useEffect","callbackFn","useCallback","useRovingTabIndex","isSelected","isChildFocused","setIsChildFocused","onFocus","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","useViewportRows","rowHeight","scrollTop","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","validateRowIdx","start","end","middle","currentOffset","rowVisibleStartIdx","rowVisibleEndIdx","cellDraggedOver","cellDraggedOverClassname","Cell","isCellSelected","isDraggedOver","onClick","onDoubleClick","onContextMenu","onRowChange","selectCell","childTabIndex","cellClass","isEditable","selectCellWrapper","openEditor","handleClick","isGridDefaultPrevented","handleContextMenu","handleDoubleClick","handleRowChange","newRow","role","renderCell","isCellEditable","CellComponent","memo","cellDragHandle","cellDragHandleFrozenClassname","cellDragHandleClassname","DragHandle","gridRowStart","columnWidth","isLastRow","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","setDraggedOverRowIdx","handleMouseDown","preventDefault","buttons","window","addEventListener","onMouseOver","onMouseUp","removeEventListener","handleDragEnd","overRowIdx","current","startRowIndex","endRowIndex","updateRows","length","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","columnKey","targetRow","push","getStyle","insetInlineStart","marginEnd","isLastColumn","marginInlineEnd","marginBlockEnd","onMouseDown","cellEditing","EditCell","closeEditor","onKeyDown","navigate","frameRequestRef","commitOnOutsideClick","editorOptions","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","handleKeyDown","mode","commitChanges","shouldFocusCell","onEditorRowChange","commitChangesAndFocus","displayCellContent","onMouseDownCapture","renderEditCell","Fragment","GroupedColumnHeaderCell","cellSortableClassname","cellResizable","cellResizableClassname","resizeHandleClassname","cellDraggableClassname","cellDragging","cellDraggingClassname","cellOver","cellOverClassname","HeaderCell","onColumnsReorder","sortColumns","onSortColumnsChange","shouldFocusGrid","dragDropKey","isDragging","setIsDragging","isOver","setIsOver","sortIndex","findIndex","sort","sortColumn","ariaSort","resizable","draggable","headerCellClass","onSort","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","ctrlKey","metaKey","handleFocus","currentTarget","getBoundingClientRect","leftKey","onDragStart","dataTransfer","setData","dropEffect","onDragEnd","onDragOver","onDrop","types","includes","toLowerCase","sourceKey","getData","onDragEnter","isEventPertinent","onDragLeave","draggableProps","ResizeHandle","resizingOffsetRef","onPointerDown","pointerType","pointerId","setPointerCapture","headerCell","parentElement","right","clientX","onPointerMove","onLostPointerCapture","relatedTarget","contains","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","topSummaryRowClassname","bottomSummaryRowClassname","headerRow","headerRowClassname","HeaderRow","headerRowClass","selectedCellIdx","useId","cells","GroupedColumnHeaderRow","renderedParents","Row","draggedOverCellIdx","selectedCellEditor","onCellClick","onCellDoubleClick","onCellContextMenu","rowClass","onMouseEnter","handleDragEnter","selectionValue","RowComponent","defaultRenderRow","ScrollToCell","setScrollToCellPosition","removeScrollToCell","observer","arrow","arrowClassname","renderSortIcon","renderSortPriority","viewBox","d","root","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","focusSinkHeaderAndSummaryClassname","summaryCellClassname","SummaryCell","summaryCellClass","renderSummaryCell","summaryRow","topSummaryRow","summaryRowClassname","SummaryRow","top","bottom","isTop","ariaRowIndex","DataGrid","rowKeyGetter","rawRowHeight","rawHeaderRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onCellKeyDown","onSelectedCellChange","onScroll","onCellCopy","onCellPaste","rawEnableVirtualization","renderers","rawDirection","rawRole","ariaDescription","ariaDescribedBy","rawAriaRowCount","testId","dataCy","defaultRenderers","headerRowHeight","summaryRowHeight","renderRow","defaultRenderSortStatus","defaultRenderCheckbox","noRowsFallback","setScrollTop","setScrollLeft","draggedOverRowIdx","setOverRowIdx","scrollToPosition","setScrollToPosition","setShouldFocusCell","previousRowIdx","setPreviousRowIdx","gridHeight","bottomSummaryRowsCount","summaryRowsCount","headerAndTopSummaryRowsCount","groupedColumnHeaderRowsCount","setSelectedPosition","focusSinkRef","isTreeGrid","headerRowsHeight","summaryRowsHeight","isSelectable","rightKey","ariaRowCount","defaultGridComponents","headerSelectionValue","hasSelectedRow","hasUnselectedRow","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","scrollHeight","handleColumnResizeLatest","onColumnsReorderLastest","onSortColumnsChangeLatest","onCellClickLatest","onCellDoubleClickLatest","onCellContextMenuLatest","selectHeaderRowLatest","selectHeaderRow","selectRowLatest","selectRow","handleFormatterRowChangeLatest","updateRow","selectCellLatest","selectHeaderCellLatest","focusCellOrCellContent","getCellToScroll","useImperativeHandle","scrollToIdx","scrollToRowIdx","isRowIdxWithinViewportBounds","newSelectedRows","rowKey","step","isCellEvent","isRowEvent","handleCellInput","handleScroll","commitEditorChanges","handleCellCopy","handleCellPaste","isColIdxWithinSelectionBounds","isCellWithinEditBounds","enableEditor","samePosition","isSamePosition","getNextPosition","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","renderDragHandle","getCellEditor","closeOnExternalRowChange","getRowViewportColumns","selectedColumn","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","templateRows","isGroupRowFocused","_","summaryRowIdx","isSummaryRowSelected","gridEl","p1","p2"],"mappings":"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","x_google_ignoreList":[0]}