{"version":3,"file":"ScrollToCell-Br19r_7C.js","names":["useRef","useState","css","clsx","DataGrid","Column","DataGridHandle","renderCoordinates","useDirection","Route","Row","rows","Array","from","length","_","i","columns","key","String","push","name","width","frozen","resizable","renderCell","flexClassname","smoothClassname","SplitComponent","ScrollToCell","direction","idx","setIdx","rowIdx","setRowIdx","scrollBehavior","setScrollBehavior","ScrollBehavior","gridRef","scrollToColumn","current","scrollToCell","scrollToRow","inlineSize","event","valueAsNumber","target","Number","isNaN","undefined","component"],"sources":["../../website/routes/ScrollToCell.tsx?tsr-split=component"],"sourcesContent":["import { useRef, useState } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { DataGrid } from '../../src';\nimport type { Column, DataGridHandle } from '../../src';\nimport { renderCoordinates } from '../renderers';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createFileRoute({\n  component: ScrollToCell\n});\n\ntype Row = number;\nconst rows: readonly Row[] = Array.from({ length: 200 }, (_, i) => i);\nconst columns: Column<Row>[] = [];\nfor (let i = 0; i < 200; i++) {\n  const key = String(i);\n  columns.push({\n    key,\n    name: key,\n    width: 120,\n    frozen: i < 5,\n    resizable: true,\n    renderCell: renderCoordinates\n  });\n}\n\nconst flexClassname = css`\n  display: flex;\n  gap: 5px;\n  align-items: center;\n  margin-block-end: 5px;\n\n  > fieldset {\n    display: contents;\n  }\n`;\n\nconst smoothClassname = css`\n  scroll-behavior: smooth;\n`;\n\nfunction ScrollToCell() {\n  const direction = useDirection();\n  const [idx, setIdx] = useState<number | undefined>(10);\n  const [rowIdx, setRowIdx] = useState<number | undefined>(10);\n  const [scrollBehavior, setScrollBehavior] = useState<ScrollBehavior>('auto');\n  const gridRef = useRef<DataGridHandle>(null);\n\n  function scrollToColumn() {\n    gridRef.current!.scrollToCell({ idx });\n  }\n\n  function scrollToRow() {\n    gridRef.current!.scrollToCell({ rowIdx });\n  }\n\n  function scrollToCell() {\n    gridRef.current!.scrollToCell({ idx, rowIdx });\n  }\n\n  return (\n    <>\n      <div className={flexClassname}>\n        <label>\n          <span>Column index: </span>\n          <input\n            style={{ inlineSize: 50 }}\n            type=\"number\"\n            value={idx ?? ''}\n            onChange={(event) => {\n              const { valueAsNumber } = event.target;\n              setIdx(Number.isNaN(valueAsNumber) ? undefined : valueAsNumber);\n            }}\n          />\n        </label>\n        <label>\n          <span>Row index: </span>\n          <input\n            style={{ inlineSize: 50 }}\n            type=\"number\"\n            value={rowIdx ?? ''}\n            onChange={(event) => {\n              const { valueAsNumber } = event.target;\n              setRowIdx(Number.isNaN(valueAsNumber) ? undefined : valueAsNumber);\n            }}\n          />\n        </label>\n        <fieldset>\n          <legend>Scroll behavior</legend>\n          <label>\n            Auto\n            <input\n              type=\"radio\"\n              name=\"scroll-behavior\"\n              checked={scrollBehavior === 'auto'}\n              onChange={() => {\n                setScrollBehavior('auto');\n              }}\n            />\n          </label>\n          <label>\n            Smooth\n            <input\n              type=\"radio\"\n              name=\"scroll-behavior\"\n              checked={scrollBehavior === 'smooth'}\n              onChange={() => {\n                setScrollBehavior('smooth');\n              }}\n            />\n          </label>\n        </fieldset>\n      </div>\n      <div className={flexClassname}>\n        <button type=\"button\" onClick={scrollToCell}>\n          Scroll to cell\n        </button>\n        <button type=\"button\" onClick={scrollToColumn}>\n          Scroll to column\n        </button>\n        <button type=\"button\" onClick={scrollToRow}>\n          Scroll to row\n        </button>\n      </div>\n      <DataGrid\n        ref={gridRef}\n        aria-label=\"Scroll To Cell Example\"\n        columns={columns}\n        rows={rows}\n        className={clsx('fill-grid', { [smoothClassname]: scrollBehavior === 'smooth' })}\n        direction={direction}\n      />\n    </>\n  );\n}\n"],"mappings":"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"}