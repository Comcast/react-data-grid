{"version":3,"file":"CommonFeatures-DUwa1T9h.js","names":["useMemo","useRef","useState","createPortal","flushSync","faker","css","DataGrid","SelectCellFormatter","SelectColumn","textEditor","Column","DataGridHandle","SortColumn","textEditorClassname","Direction","exportToCsv","exportToPdf","useDirection","Route","toolbarClassname","dialogContainerClassname","dateFormatter","Intl","DateTimeFormat","navigator","language","currencyFormatter","NumberFormat","style","currency","SummaryRow","id","totalCount","yesCount","Row","title","client","area","country","contact","assignee","progress","startTimestamp","endTimestamp","budget","transaction","account","version","available","getColumns","countries","direction","key","name","frozen","resizable","renderSummaryCell","renderEditCell","row","width","draggable","p","e","onRowChange","target","value","map","renderCell","props","inlineSize","Math","round","onClose","event","valueAsNumber","document","body","editorOptions","displayCellContent","format","tabIndex","floor","rowKeyGetter","createRows","now","Date","rows","countrySet","Set","i","location","add","push","company","person","jobArea","internet","exampleEmail","fullName","random","finance","transactionType","iban","system","semver","sort","Collator","compare","Comparator","a","b","getComparator","sortColumn","localeCompare","Error","CommonFeatures","setRows","sortColumns","setSortColumns","selectedRows","setSelectedRows","ReadonlySet","isExporting","setIsExporting","gridRef","columns","summaryRows","length","filter","r","sortedRows","toSorted","comparator","columnKey","compResult","handleExportToCsv","current","element","handleExportToPdf","sortable","component"],"sources":["../../website/routes/CommonFeatures.wyw-in-js.css","../../website/routes/CommonFeatures.tsx?tsr-split=component"],"sourcesContent":[".t7hd9f8 {\n  display: flex;\n  justify-content: flex-end;\n  gap: 8px;\n  margin-block-end: 8px;\n}\n\n.dhwnept {\n  position: absolute;\n  inset: 0;\n  display: flex;\n  place-items: center;\n  background: rgba(0, 0, 0, 0.1);\n\n  > dialog {\n    width: 300px;\n    > input {\n      width: 100%;\n    }\n\n    > menu {\n      text-align: end;\n    }\n  }\n}\n\n","import { useMemo, useRef, useState } from 'react';\nimport { createPortal, flushSync } from 'react-dom';\nimport { faker } from '@faker-js/faker';\nimport { css } from '@linaria/core';\n\nimport {\n  DataGrid,\n  SelectCellFormatter,\n  SelectColumn,\n  textEditor,\n  type Column,\n  type DataGridHandle,\n  type SortColumn\n} from '../../src';\nimport { textEditorClassname } from '../../src/editors/textEditor';\nimport type { Direction } from '../../src/types';\nimport { exportToCsv, exportToPdf } from '../utils';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createFileRoute({\n  component: CommonFeatures\n});\n\nconst toolbarClassname = css`\n  display: flex;\n  justify-content: flex-end;\n  gap: 8px;\n  margin-block-end: 8px;\n`;\n\nconst dialogContainerClassname = css`\n  position: absolute;\n  inset: 0;\n  display: flex;\n  place-items: center;\n  background: rgba(0, 0, 0, 0.1);\n\n  > dialog {\n    width: 300px;\n    > input {\n      width: 100%;\n    }\n\n    > menu {\n      text-align: end;\n    }\n  }\n`;\n\nconst dateFormatter = new Intl.DateTimeFormat(navigator.language);\nconst currencyFormatter = new Intl.NumberFormat(navigator.language, {\n  style: 'currency',\n  currency: 'eur'\n});\n\ninterface SummaryRow {\n  id: string;\n  totalCount: number;\n  yesCount: number;\n}\n\ninterface Row {\n  id: number;\n  title: string;\n  client: string;\n  area: string;\n  country: string;\n  contact: string;\n  assignee: string;\n  progress: number;\n  startTimestamp: number;\n  endTimestamp: number;\n  budget: number;\n  transaction: string;\n  account: string;\n  version: string;\n  available: boolean;\n}\n\nfunction getColumns(\n  countries: readonly string[],\n  direction: Direction\n): readonly Column<Row, SummaryRow>[] {\n  return [\n    SelectColumn,\n    {\n      key: 'id',\n      name: 'ID',\n      frozen: true,\n      resizable: false,\n      renderSummaryCell() {\n        return <strong>Total</strong>;\n      }\n    },\n    {\n      key: 'title',\n      name: 'Task',\n      frozen: true,\n      renderEditCell: textEditor,\n      renderSummaryCell({ row }) {\n        return `${row.totalCount} records`;\n      }\n    },\n    {\n      key: 'client',\n      name: 'Client',\n      width: 'max-content',\n      draggable: true,\n      renderEditCell: textEditor\n    },\n    {\n      key: 'area',\n      name: 'Area',\n      renderEditCell: textEditor\n    },\n    {\n      key: 'country',\n      name: 'Country',\n      renderEditCell: (p) => (\n        <select\n          autoFocus\n          className={textEditorClassname}\n          value={p.row.country}\n          onChange={(e) => p.onRowChange({ ...p.row, country: e.target.value }, true)}\n        >\n          {countries.map((country) => (\n            <option key={country}>{country}</option>\n          ))}\n        </select>\n      )\n    },\n    {\n      key: 'contact',\n      name: 'Contact',\n      renderEditCell: textEditor\n    },\n    {\n      key: 'assignee',\n      name: 'Assignee',\n      renderEditCell: textEditor\n    },\n    {\n      key: 'progress',\n      name: 'Completion',\n      renderCell(props) {\n        const value = props.row.progress;\n        return (\n          <>\n            <progress max={100} value={value} style={{ inlineSize: 50 }} /> {Math.round(value)}%\n          </>\n        );\n      },\n      renderEditCell({ row, onRowChange, onClose }) {\n        return createPortal(\n          <div\n            dir={direction}\n            className={dialogContainerClassname}\n            onKeyDown={(event) => {\n              if (event.key === 'Escape') {\n                onClose();\n              }\n            }}\n          >\n            <dialog open>\n              <input\n                autoFocus\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                value={row.progress}\n                onChange={(e) => onRowChange({ ...row, progress: e.target.valueAsNumber })}\n              />\n              <menu>\n                <button type=\"button\" onClick={() => onClose()}>\n                  Cancel\n                </button>\n                <button type=\"button\" onClick={() => onClose(true)}>\n                  Save\n                </button>\n              </menu>\n            </dialog>\n          </div>,\n          document.body\n        );\n      },\n      editorOptions: {\n        displayCellContent: true\n      }\n    },\n    {\n      key: 'startTimestamp',\n      name: 'Start date',\n      renderCell(props) {\n        return dateFormatter.format(props.row.startTimestamp);\n      }\n    },\n    {\n      key: 'endTimestamp',\n      name: 'Deadline',\n      renderCell(props) {\n        return dateFormatter.format(props.row.endTimestamp);\n      }\n    },\n    {\n      key: 'budget',\n      name: 'Budget',\n      renderCell(props) {\n        return currencyFormatter.format(props.row.budget);\n      }\n    },\n    {\n      key: 'transaction',\n      name: 'Transaction type'\n    },\n    {\n      key: 'account',\n      name: 'Account'\n    },\n    {\n      key: 'version',\n      name: 'Version',\n      renderEditCell: textEditor\n    },\n    {\n      key: 'available',\n      name: 'Available',\n      renderCell({ row, onRowChange, tabIndex }) {\n        return (\n          <SelectCellFormatter\n            value={row.available}\n            onChange={() => {\n              onRowChange({ ...row, available: !row.available });\n            }}\n            tabIndex={tabIndex}\n          />\n        );\n      },\n      renderSummaryCell({ row: { yesCount, totalCount } }) {\n        return `${Math.floor((100 * yesCount) / totalCount)}% ✔️`;\n      }\n    }\n  ];\n}\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nlet countries: string[] = [];\n\nfunction createRows(): readonly Row[] {\n  const now = Date.now();\n  const rows: Row[] = [];\n  const countrySet = new Set<string>();\n\n  for (let i = 0; i < 1000; i++) {\n    const country = faker.location.country();\n    countrySet.add(country);\n\n    rows.push({\n      id: i,\n      title: `Task #${i + 1}`,\n      client: faker.company.name(),\n      area: faker.person.jobArea(),\n      country,\n      contact: faker.internet.exampleEmail(),\n      assignee: faker.person.fullName(),\n      progress: Math.random() * 100,\n      startTimestamp: now - Math.round(Math.random() * 1e10),\n      endTimestamp: now + Math.round(Math.random() * 1e10),\n      budget: 500 + Math.random() * 10500,\n      transaction: faker.finance.transactionType(),\n      account: faker.finance.iban(),\n      version: faker.system.semver(),\n      available: Math.random() > 0.5\n    });\n  }\n\n  countries = [...countrySet].sort(new Intl.Collator().compare);\n\n  return rows;\n}\n\ntype Comparator = (a: Row, b: Row) => number;\n\nfunction getComparator(sortColumn: string): Comparator {\n  switch (sortColumn) {\n    case 'assignee':\n    case 'title':\n    case 'client':\n    case 'area':\n    case 'country':\n    case 'contact':\n    case 'transaction':\n    case 'account':\n    case 'version':\n      return (a, b) => {\n        return a[sortColumn].localeCompare(b[sortColumn]);\n      };\n    case 'available':\n      return (a, b) => {\n        return a[sortColumn] === b[sortColumn] ? 0 : a[sortColumn] ? 1 : -1;\n      };\n    case 'id':\n    case 'progress':\n    case 'startTimestamp':\n    case 'endTimestamp':\n    case 'budget':\n      return (a, b) => {\n        return a[sortColumn] - b[sortColumn];\n      };\n    default:\n      throw new Error(`unsupported sortColumn: \"${sortColumn}\"`);\n  }\n}\n\nfunction CommonFeatures() {\n  const direction = useDirection();\n  const [rows, setRows] = useState(createRows);\n  const [sortColumns, setSortColumns] = useState<readonly SortColumn[]>([]);\n  const [selectedRows, setSelectedRows] = useState((): ReadonlySet<number> => new Set());\n  const [isExporting, setIsExporting] = useState(false);\n  const gridRef = useRef<DataGridHandle>(null);\n  const columns = useMemo(() => getColumns(countries, direction), [direction]);\n\n  const summaryRows = useMemo((): readonly SummaryRow[] => {\n    return [\n      {\n        id: 'total_0',\n        totalCount: rows.length,\n        yesCount: rows.filter((r) => r.available).length\n      }\n    ];\n  }, [rows]);\n\n  const sortedRows = useMemo((): readonly Row[] => {\n    if (sortColumns.length === 0) return rows;\n\n    return rows.toSorted((a, b) => {\n      for (const sort of sortColumns) {\n        const comparator = getComparator(sort.columnKey);\n        const compResult = comparator(a, b);\n        if (compResult !== 0) {\n          return sort.direction === 'ASC' ? compResult : -compResult;\n        }\n      }\n      return 0;\n    });\n  }, [rows, sortColumns]);\n\n  function handleExportToCsv() {\n    flushSync(() => {\n      setIsExporting(true);\n    });\n\n    exportToCsv(gridRef.current!.element!, 'CommonFeatures.csv');\n\n    flushSync(() => {\n      setIsExporting(false);\n    });\n  }\n\n  async function handleExportToPdf() {\n    flushSync(() => {\n      setIsExporting(true);\n    });\n\n    await exportToPdf(gridRef.current!.element!, 'CommonFeatures.pdf');\n\n    flushSync(() => {\n      setIsExporting(false);\n    });\n  }\n\n  return (\n    <>\n      <div className={toolbarClassname}>\n        <button type=\"button\" onClick={handleExportToCsv}>\n          Export to CSV\n        </button>\n        <button type=\"button\" onClick={handleExportToPdf}>\n          Export to PDF\n        </button>\n      </div>\n      <DataGrid\n        ref={gridRef}\n        aria-label=\"Common Features Example\"\n        rowKeyGetter={rowKeyGetter}\n        columns={columns}\n        rows={sortedRows}\n        defaultColumnOptions={{\n          sortable: true,\n          resizable: true\n        }}\n        selectedRows={selectedRows}\n        onSelectedRowsChange={setSelectedRows}\n        onRowsChange={setRows}\n        sortColumns={sortColumns}\n        onSortColumnsChange={setSortColumns}\n        topSummaryRows={summaryRows}\n        bottomSummaryRows={summaryRows}\n        className=\"fill-grid\"\n        direction={direction}\n        enableVirtualization={!isExporting}\n      />\n    </>\n  );\n}\n"],"mappings":"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"}