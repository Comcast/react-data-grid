{"version":3,"mappings":"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","names":["gridEl: HTMLDivElement","fileName: string","selector: string","value: unknown","data: Blob","toolbarClassname","dialogContainerClassname","dateFormatter","Intl","DateTimeFormat","navigator","language","currencyFormatter","NumberFormat","style","currency","getColumns","countries","direction","SelectColumn","key","name","frozen","resizable","renderSummaryCell","renderEditCell","textEditor","row","totalCount","width","draggable","p","textEditorClassname","country","e","onRowChange","target","value","map","renderCell","props","progress","inlineSize","Math","round","onClose","event","valueAsNumber","document","body","editorOptions","displayCellContent","format","startTimestamp","endTimestamp","budget","tabIndex","available","yesCount","floor","rowKeyGetter","id","createRows","now","Date","rows","countrySet","Set","i","faker","location","add","push","title","client","company","area","person","jobArea","contact","internet","exampleEmail","assignee","fullName","random","transaction","finance","transactionType","account","iban","version","system","semver","sort","Collator","compare","getComparator","sortColumn","a","b","localeCompare","Error","SplitComponent","useDirection","setRows","sortColumns","setSortColumns","selectedRows","setSelectedRows","isExporting","setIsExporting","gridRef","columns","summaryRows","length","filter","r","sortedRows","toSorted","comparator","columnKey","compResult","handleExportToCsv","exportToCsv","current","element","handleExportToPdf","exportToPdf","sortable"],"ignoreList":[],"sources":["../../website/exportUtils.tsx","../../website/routes/CommonFeatures.tsx?tsr-split=component"],"sourcesContent":["export function exportToCsv(gridEl: HTMLDivElement, fileName: string) {\n  const { head, body, foot } = getGridContent(gridEl);\n  const content = [...head, ...body, ...foot]\n    .map((cells) => cells.map(serialiseCellValue).join(','))\n    .join('\\n');\n\n  downloadFile(fileName, new Blob([content], { type: 'text/csv;charset=utf-8;' }));\n}\n\nexport async function exportToPdf(gridEl: HTMLDivElement, fileName: string) {\n  const { head, body, foot } = getGridContent(gridEl);\n  const [{ jsPDF }, { default: autoTable }] = await Promise.all([\n    import('jspdf'),\n    import('jspdf-autotable')\n  ]);\n  const doc = new jsPDF({\n    orientation: 'l',\n    unit: 'px'\n  });\n\n  autoTable(doc, {\n    head,\n    body,\n    foot,\n    horizontalPageBreak: true,\n    styles: { cellPadding: 1.5, fontSize: 8, cellWidth: 'wrap' },\n    tableWidth: 'wrap'\n  });\n  doc.save(fileName);\n}\n\nfunction getGridContent(gridEl: HTMLDivElement) {\n  return {\n    head: getRows('.rdg-header-row'),\n    body: getRows('.rdg-row:not(.rdg-summary-row)'),\n    foot: getRows('.rdg-summary-row')\n  };\n\n  function getRows(selector: string) {\n    return Array.from(gridEl.querySelectorAll<HTMLDivElement>(selector)).map((gridRow) => {\n      return Array.from(gridRow.querySelectorAll<HTMLDivElement>('.rdg-cell')).map(\n        (gridCell) => gridCell.innerText\n      );\n    });\n  }\n}\n\nfunction serialiseCellValue(value: unknown) {\n  if (typeof value === 'string') {\n    const formattedValue = value.replace(/\"/g, '\"\"');\n    return formattedValue.includes(',') ? `\"${formattedValue}\"` : formattedValue;\n  }\n  return value;\n}\n\nfunction downloadFile(fileName: string, data: Blob) {\n  const downloadLink = document.createElement('a');\n  downloadLink.download = fileName;\n  const url = URL.createObjectURL(data);\n  downloadLink.href = url;\n  downloadLink.click();\n  URL.revokeObjectURL(url);\n}\n","import { useMemo, useRef, useState } from 'react';\nimport { createPortal, flushSync } from 'react-dom';\nimport { faker } from '@faker-js/faker';\nimport { css } from '@linaria/core';\n\nimport {\n  DataGrid,\n  SelectCellFormatter,\n  SelectColumn,\n  textEditor,\n  type Column,\n  type DataGridHandle,\n  type SortColumn\n} from '../../src';\nimport { textEditorClassname } from '../../src/editors/textEditor';\nimport type { Direction } from '../../src/types';\nimport { useDirection } from '../directionContext';\nimport { exportToCsv, exportToPdf } from '../exportUtils';\n\nexport const Route = createFileRoute({\n  component: CommonFeatures\n});\n\nconst toolbarClassname = css`\n  display: flex;\n  justify-content: flex-end;\n  gap: 8px;\n  margin-block-end: 8px;\n`;\n\nconst dialogContainerClassname = css`\n  position: absolute;\n  inset: 0;\n  display: flex;\n  place-items: center;\n  background: rgba(0, 0, 0, 0.1);\n\n  > dialog {\n    width: 300px;\n    > input {\n      width: 100%;\n    }\n\n    > menu {\n      text-align: end;\n    }\n  }\n`;\n\nconst dateFormatter = new Intl.DateTimeFormat(navigator.language);\nconst currencyFormatter = new Intl.NumberFormat(navigator.language, {\n  style: 'currency',\n  currency: 'eur'\n});\n\ninterface SummaryRow {\n  id: string;\n  totalCount: number;\n  yesCount: number;\n}\n\ninterface Row {\n  id: number;\n  title: string;\n  client: string;\n  area: string;\n  country: string;\n  contact: string;\n  assignee: string;\n  progress: number;\n  startTimestamp: number;\n  endTimestamp: number;\n  budget: number;\n  transaction: string;\n  account: string;\n  version: string;\n  available: boolean;\n}\n\nfunction getColumns(\n  countries: readonly string[],\n  direction: Direction\n): readonly Column<Row, SummaryRow>[] {\n  return [\n    SelectColumn,\n    {\n      key: 'id',\n      name: 'ID',\n      frozen: true,\n      resizable: false,\n      renderSummaryCell() {\n        return <strong>Total</strong>;\n      }\n    },\n    {\n      key: 'title',\n      name: 'Task',\n      frozen: true,\n      renderEditCell: textEditor,\n      renderSummaryCell({ row }) {\n        return `${row.totalCount} records`;\n      }\n    },\n    {\n      key: 'client',\n      name: 'Client',\n      width: 'max-content',\n      draggable: true,\n      renderEditCell: textEditor\n    },\n    {\n      key: 'area',\n      name: 'Area',\n      renderEditCell: textEditor\n    },\n    {\n      key: 'country',\n      name: 'Country',\n      renderEditCell: (p) => (\n        <select\n          autoFocus\n          className={textEditorClassname}\n          value={p.row.country}\n          onChange={(e) => p.onRowChange({ ...p.row, country: e.target.value }, true)}\n        >\n          {countries.map((country) => (\n            <option key={country}>{country}</option>\n          ))}\n        </select>\n      )\n    },\n    {\n      key: 'contact',\n      name: 'Contact',\n      renderEditCell: textEditor\n    },\n    {\n      key: 'assignee',\n      name: 'Assignee',\n      renderEditCell: textEditor\n    },\n    {\n      key: 'progress',\n      name: 'Completion',\n      renderCell(props) {\n        const value = props.row.progress;\n        return (\n          <>\n            <progress max={100} value={value} style={{ inlineSize: 50 }} /> {Math.round(value)}%\n          </>\n        );\n      },\n      renderEditCell({ row, onRowChange, onClose }) {\n        return createPortal(\n          <div\n            dir={direction}\n            className={dialogContainerClassname}\n            onKeyDown={(event) => {\n              if (event.key === 'Escape') {\n                onClose();\n              }\n            }}\n          >\n            <dialog open>\n              <input\n                autoFocus\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                value={row.progress}\n                onChange={(e) => onRowChange({ ...row, progress: e.target.valueAsNumber })}\n              />\n              <menu>\n                <button type=\"button\" onClick={() => onClose()}>\n                  Cancel\n                </button>\n                <button type=\"button\" onClick={() => onClose(true)}>\n                  Save\n                </button>\n              </menu>\n            </dialog>\n          </div>,\n          document.body\n        );\n      },\n      editorOptions: {\n        displayCellContent: true\n      }\n    },\n    {\n      key: 'startTimestamp',\n      name: 'Start date',\n      renderCell(props) {\n        return dateFormatter.format(props.row.startTimestamp);\n      }\n    },\n    {\n      key: 'endTimestamp',\n      name: 'Deadline',\n      renderCell(props) {\n        return dateFormatter.format(props.row.endTimestamp);\n      }\n    },\n    {\n      key: 'budget',\n      name: 'Budget',\n      renderCell(props) {\n        return currencyFormatter.format(props.row.budget);\n      }\n    },\n    {\n      key: 'transaction',\n      name: 'Transaction type'\n    },\n    {\n      key: 'account',\n      name: 'Account'\n    },\n    {\n      key: 'version',\n      name: 'Version',\n      renderEditCell: textEditor\n    },\n    {\n      key: 'available',\n      name: 'Available',\n      renderCell({ row, onRowChange, tabIndex }) {\n        return (\n          <SelectCellFormatter\n            value={row.available}\n            onChange={() => {\n              onRowChange({ ...row, available: !row.available });\n            }}\n            tabIndex={tabIndex}\n          />\n        );\n      },\n      renderSummaryCell({ row: { yesCount, totalCount } }) {\n        return `${Math.floor((100 * yesCount) / totalCount)}% ✔️`;\n      }\n    }\n  ];\n}\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nlet countries: string[] = [];\n\nfunction createRows(): readonly Row[] {\n  const now = Date.now();\n  const rows: Row[] = [];\n  const countrySet = new Set<string>();\n\n  for (let i = 0; i < 1000; i++) {\n    const country = faker.location.country();\n    countrySet.add(country);\n\n    rows.push({\n      id: i,\n      title: `Task #${i + 1}`,\n      client: faker.company.name(),\n      area: faker.person.jobArea(),\n      country,\n      contact: faker.internet.exampleEmail(),\n      assignee: faker.person.fullName(),\n      progress: Math.random() * 100,\n      startTimestamp: now - Math.round(Math.random() * 1e10),\n      endTimestamp: now + Math.round(Math.random() * 1e10),\n      budget: 500 + Math.random() * 10500,\n      transaction: faker.finance.transactionType(),\n      account: faker.finance.iban(),\n      version: faker.system.semver(),\n      available: Math.random() > 0.5\n    });\n  }\n\n  countries = [...countrySet].sort(new Intl.Collator().compare);\n\n  return rows;\n}\n\ntype Comparator = (a: Row, b: Row) => number;\n\nfunction getComparator(sortColumn: string): Comparator {\n  switch (sortColumn) {\n    case 'assignee':\n    case 'title':\n    case 'client':\n    case 'area':\n    case 'country':\n    case 'contact':\n    case 'transaction':\n    case 'account':\n    case 'version':\n      return (a, b) => {\n        return a[sortColumn].localeCompare(b[sortColumn]);\n      };\n    case 'available':\n      return (a, b) => {\n        return a[sortColumn] === b[sortColumn] ? 0 : a[sortColumn] ? 1 : -1;\n      };\n    case 'id':\n    case 'progress':\n    case 'startTimestamp':\n    case 'endTimestamp':\n    case 'budget':\n      return (a, b) => {\n        return a[sortColumn] - b[sortColumn];\n      };\n    default:\n      throw new Error(`unsupported sortColumn: \"${sortColumn}\"`);\n  }\n}\n\nfunction CommonFeatures() {\n  const direction = useDirection();\n  const [rows, setRows] = useState(createRows);\n  const [sortColumns, setSortColumns] = useState<readonly SortColumn[]>([]);\n  const [selectedRows, setSelectedRows] = useState((): ReadonlySet<number> => new Set());\n  const [isExporting, setIsExporting] = useState(false);\n  const gridRef = useRef<DataGridHandle>(null);\n  const columns = useMemo(() => getColumns(countries, direction), [direction]);\n\n  const summaryRows = useMemo((): readonly SummaryRow[] => {\n    return [\n      {\n        id: 'total_0',\n        totalCount: rows.length,\n        yesCount: rows.filter((r) => r.available).length\n      }\n    ];\n  }, [rows]);\n\n  const sortedRows = useMemo((): readonly Row[] => {\n    if (sortColumns.length === 0) return rows;\n\n    return rows.toSorted((a, b) => {\n      for (const sort of sortColumns) {\n        const comparator = getComparator(sort.columnKey);\n        const compResult = comparator(a, b);\n        if (compResult !== 0) {\n          return sort.direction === 'ASC' ? compResult : -compResult;\n        }\n      }\n      return 0;\n    });\n  }, [rows, sortColumns]);\n\n  function handleExportToCsv() {\n    flushSync(() => {\n      setIsExporting(true);\n    });\n\n    exportToCsv(gridRef.current!.element!, 'CommonFeatures.csv');\n\n    flushSync(() => {\n      setIsExporting(false);\n    });\n  }\n\n  async function handleExportToPdf() {\n    flushSync(() => {\n      setIsExporting(true);\n    });\n\n    await exportToPdf(gridRef.current!.element!, 'CommonFeatures.pdf');\n\n    flushSync(() => {\n      setIsExporting(false);\n    });\n  }\n\n  return (\n    <>\n      <div className={toolbarClassname}>\n        <button type=\"button\" onClick={handleExportToCsv}>\n          Export to CSV\n        </button>\n        <button type=\"button\" onClick={handleExportToPdf}>\n          Export to PDF\n        </button>\n      </div>\n      <DataGrid\n        ref={gridRef}\n        aria-label=\"Common Features Example\"\n        rowKeyGetter={rowKeyGetter}\n        columns={columns}\n        rows={sortedRows}\n        defaultColumnOptions={{\n          sortable: true,\n          resizable: true\n        }}\n        selectedRows={selectedRows}\n        onSelectedRowsChange={setSelectedRows}\n        onRowsChange={setRows}\n        sortColumns={sortColumns}\n        onSortColumnsChange={setSortColumns}\n        topSummaryRows={summaryRows}\n        bottomSummaryRows={summaryRows}\n        className=\"fill-grid\"\n        direction={direction}\n        enableVirtualization={!isExporting}\n      />\n    </>\n  );\n}\n"],"file":"assets/CommonFeatures-ssbmwlCQ.js"}