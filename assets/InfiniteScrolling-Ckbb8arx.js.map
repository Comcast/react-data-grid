{"version":3,"file":"InfiniteScrolling-Ckbb8arx.js","sources":["../../website/routes/InfiniteScrolling.tsx?tsr-split=component"],"sourcesContent":["import { useState } from 'react';\nimport { faker } from '@faker-js/faker';\nimport { createFileRoute } from '@tanstack/react-router';\nimport { css } from '@linaria/core';\n\nimport { DataGrid } from '../../src';\nimport type { Column } from '../../src';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createFileRoute('/InfiniteScrolling')({\n  component: InfiniteScrolling\n});\n\nconst loadMoreRowsClassname = css`\n  inline-size: 180px;\n  padding-block: 8px;\n  padding-inline: 16px;\n  position: absolute;\n  inset-block-end: 8px;\n  inset-inline-end: 8px;\n  color: white;\n  line-height: 35px;\n  background: rgb(0 0 0 / 0.6);\n`;\n\ninterface Row {\n  id: string;\n  email: string;\n  title: string;\n  firstName: string;\n  lastName: string;\n}\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nconst columns: readonly Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID'\n  },\n  {\n    key: 'title',\n    name: 'Title'\n  },\n  {\n    key: 'firstName',\n    name: 'First Name'\n  },\n  {\n    key: 'lastName',\n    name: 'Last Name'\n  },\n  {\n    key: 'email',\n    name: 'Email'\n  }\n];\n\nfunction createFakeRowObjectData(index: number): Row {\n  return {\n    id: `id_${index}`,\n    email: faker.internet.email(),\n    title: faker.person.prefix(),\n    firstName: faker.person.firstName(),\n    lastName: faker.person.lastName()\n  };\n}\n\nfunction createRows(numberOfRows: number): Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 0; i < numberOfRows; i++) {\n    rows[i] = createFakeRowObjectData(i);\n  }\n\n  return rows;\n}\n\nfunction isAtBottom({ currentTarget }: React.UIEvent<HTMLDivElement>): boolean {\n  return currentTarget.scrollTop + 10 >= currentTarget.scrollHeight - currentTarget.clientHeight;\n}\n\nfunction loadMoreRows(newRowsCount: number, length: number): Promise<Row[]> {\n  return new Promise((resolve) => {\n    const newRows: Row[] = [];\n\n    for (let i = 0; i < newRowsCount; i++) {\n      newRows[i] = createFakeRowObjectData(i + length);\n    }\n\n    setTimeout(() => resolve(newRows), 1000);\n  });\n}\n\nfunction InfiniteScrolling() {\n  const direction = useDirection();\n  const [rows, setRows] = useState(() => createRows(50));\n  const [isLoading, setIsLoading] = useState(false);\n\n  async function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    if (isLoading || !isAtBottom(event)) return;\n\n    setIsLoading(true);\n\n    const newRows = await loadMoreRows(50, rows.length);\n\n    setRows([...rows, ...newRows]);\n    setIsLoading(false);\n  }\n\n  return (\n    <>\n      <DataGrid\n        columns={columns}\n        rows={rows}\n        rowKeyGetter={rowKeyGetter}\n        onRowsChange={setRows}\n        rowHeight={30}\n        onScroll={handleScroll}\n        className=\"fill-grid\"\n        direction={direction}\n      />\n      {isLoading && <div className={loadMoreRowsClassname}>Loading more rows...</div>}\n    </>\n  );\n}\n"],"names":["loadMoreRowsClassname","css","rowKeyGetter","row","id","columns","key","name","createFakeRowObjectData","index","email","faker","internet","title","person","prefix","firstName","lastName","createRows","numberOfRows","rows","i","isAtBottom","currentTarget","scrollTop","scrollHeight","clientHeight","loadMoreRows","newRowsCount","length","Promise","resolve","newRows","setTimeout","SplitComponent","direction","useDirection","setRows","useState","isLoading","setIsLoading","handleScroll","event","jsxs","Fragment","children","jsx","DataGrid","onRowsChange","rowHeight","onScroll","className"],"mappings":"wGAaA,MAAMA,EAAwBC,UAoB9B,SAASC,EAAaC,EAAU,CAC9B,OAAOA,EAAIC,EACb,CAEA,MAAMC,EAAkC,CACtC,CACEC,IAAK,KACLC,KAAM,IACR,EACA,CACED,IAAK,QACLC,KAAM,OACR,EACA,CACED,IAAK,YACLC,KAAM,YACR,EACA,CACED,IAAK,WACLC,KAAM,WACR,EACA,CACED,IAAK,QACLC,KAAM,OACR,CAAC,EAGH,SAASC,EAAwBC,EAAoB,CAC5C,MAAA,CACLL,GAAI,MAAMK,CAAK,GACfC,MAAOC,EAAMC,SAASF,MAAM,EAC5BG,MAAOF,EAAMG,OAAOC,OAAO,EAC3BC,UAAWL,EAAMG,OAAOE,UAAU,EAClCC,SAAUN,EAAMG,OAAOG,SAAS,CAClC,CACF,CAEA,SAASC,EAAWC,EAA6B,CAC/C,MAAMC,EAAc,CAAE,EAEtB,QAASC,EAAI,EAAGA,EAAIF,EAAcE,IAC3BA,EAAAA,CAAC,EAAIb,EAAwBa,CAAC,EAG9BD,OAAAA,CACT,CAEA,SAASE,EAAW,CAAEC,cAAAA,CAA6C,EAAY,CAC7E,OAAOA,EAAcC,UAAY,IAAMD,EAAcE,aAAeF,EAAcG,YACpF,CAEA,SAASC,EAAaC,EAAsBC,EAAgC,CACnE,OAAA,IAAIC,QAAqBC,GAAA,CAC9B,MAAMC,EAAiB,CAAE,EAEzB,QAASX,EAAI,EAAGA,EAAIO,EAAcP,IAChCW,EAAQX,CAAC,EAAIb,EAAwBa,EAAIQ,CAAM,EAGjDI,WAAW,IAAMF,EAAQC,CAAO,EAAG,GAAI,CACzC,CAAC,CACH,CAAC,MAAAE,EAAA,UAE4B,CAC3B,MAAMC,EAAYC,EAAa,EACzB,CAAChB,EAAMiB,CAAO,EAAIC,WAAS,IAAMpB,EAAW,EAAE,CAAC,EAC/C,CAACqB,EAAWC,CAAY,EAAIF,EAAAA,SAAS,EAAK,EAEhD,eAAeG,EAAaC,EAAsC,CAChE,GAAIH,GAAa,CAACjB,EAAWoB,CAAK,EAAG,OAErCF,EAAa,EAAI,EAEjB,MAAMR,EAAU,MAAML,EAAa,GAAIP,EAAKS,MAAM,EAElDQ,EAAQ,CAAC,GAAGjB,EAAM,GAAGY,CAAO,CAAC,EAC7BQ,EAAa,EAAK,CACpB,CAEA,OAEIG,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SAAA,CAAAC,EAAA,IAACC,EACC,CAAA1C,QAAAA,EACAe,KAAAA,EACAlB,aAAAA,EACA8C,aAAcX,EACdY,UAAW,GACXC,SAAUT,EACVU,UAAU,YACVhB,UAAAA,EAAqB,EAEtBI,GAAaO,EAAA,IAAC,MAAI,CAAAK,UAAWnD,EAAuB6C,SAAoB,sBAAA,CAAA,CAAA,CAC3E,CAAA,CAEJ"}