{"version":3,"file":"DataGrid-BN1mWLOW.js","names":["column: CalculatedColumn<R, SR>","lastFrozenColumnIndex: number","args: ColSpanArgs<R, SR>","event: React.SyntheticEvent","element: Maybe<Element>","behavior: ScrollBehavior","event: E","e: React.KeyboardEvent","event: React.KeyboardEvent<HTMLDivElement>","isUserHandlingPaste: boolean","direction: Maybe<Direction>","viewportColumns: readonly CalculatedColumn<R, SR>[]","column: CalculatedColumn<R, SR>","row: R","moveNext: boolean","parent: CalculatedColumnParent<R, SR>","rowIdx: number","column: CalculatedColumnOrColumnGroup<R, SR>","rowSpan: number","column: CalculatedColumn<R, SR>","keyGetter: Maybe<(row: NoInfer<R>) => K>","width: number","column: CalculatedColumnOrColumnGroup<R, SR>","rowIdx: number","e: React.ChangeEvent<HTMLInputElement>","props: RenderCellProps<R, SR>","props: RenderHeaderCellProps<unknown>","props: RenderCellProps<unknown>","props: RenderGroupCellProps<unknown>","SelectColumn: Column<any, any>","columns: MutableCalculatedColumn<R, SR>[]","rawColumns: readonly ColumnOrColumnGroup<R, SR>[]","level: number","parent?: MutableCalculatedColumnParent<R, SR>","calculatedColumnParent: MutableCalculatedColumnParent<R, SR>","column: MutableCalculatedColumn<R, SR>","colSpanColumns: CalculatedColumn<R, SR>[]","templateColumns: string[]","layoutCssVars: Record<string, string>","column: MutableCalculatedColumn<R, SR> | MutableCalculatedColumnParent<R, SR>","index: number","columns: readonly CalculatedColumn<R, SR>[]","viewportColumns: readonly CalculatedColumn<R, SR>[]","templateColumns: readonly string[]","gridRef: React.RefObject<HTMLDivElement | null>","gridWidth: number","columnWidths: ColumnWidths","onColumnWidthsChange: (columnWidths: ColumnWidths) => void","onColumnResize: DataGridProps<R, SR>['onColumnResize']","setColumnResizing: (isColumnResizing: boolean) => void","columnsCanFlex: boolean","columnsToMeasure: string[]","column: CalculatedColumn<R, SR>","nextWidth: ResizedWidth","key: string","fn: T","isSelected: boolean","event: React.FocusEvent<HTMLDivElement>","colIdx: number","colSpan: number | undefined","viewportColumns: CalculatedColumn<R, SR>[]","rowIdx: number","offset: number","enableEditor?: boolean","event: React.MouseEvent<HTMLDivElement>","eventHandler?: CellMouseEventHandler<R, SR>","event: MouseEvent<HTMLDivElement>","newRow: R","key: React.Key","props: CellRendererProps<R, SR>","event: MouseEvent","event: React.KeyboardEvent<HTMLDivElement>","row: R","ctrlClick: boolean","nextSort: SortColumn","nextSortColumn: SortColumn | undefined","event: React.FocusEvent<HTMLDivElement>","event: React.MouseEvent<HTMLSpanElement>","event: React.KeyboardEvent<HTMLSpanElement>","event: React.DragEvent<HTMLDivElement>","dragTargetProps: React.ComponentProps<'div'> | undefined","dropTargetProps: React.ComponentProps<'div'> | undefined","style: React.CSSProperties","event: React.PointerEvent<HTMLDivElement>","event: React.DragEvent","column: CalculatedColumn<R, SR>","newRow: R","key: React.Key","props: RenderRowProps<R, SR>","props: DataGridProps<R, SR, K>","columnWidths: ColumnWidths","column: CalculatedColumn<R, SR>","args: SelectHeaderRowEvent","args: SelectRowEvent<R>","event: KeyboardEvent<HTMLDivElement>","event: React.UIEvent<HTMLDivElement>","rowIdx: number","row: R","event: CellClipboardEvent","event: React.PointerEvent<HTMLDivElement>","event: React.MouseEvent<HTMLDivElement>","startRowIdx: number","endRowIdx: number","indexes: number[]","idx: number","position: Position","options?: SelectCellOptions","key: string","ctrlKey: boolean","shiftKey: boolean","cellNavigationMode: CellNavigationMode","currentRowIdx: number","dragHandleStyle: React.CSSProperties","shouldFocusCell: boolean","commitChanges: boolean","rowElements: React.ReactNode[]","key: K | number","gridEl: HTMLDivElement","p1: Position","p2: Position"],"sources":["../../node_modules/clsx/dist/clsx.mjs","../../src/utils/colSpanUtils.ts","../../src/utils/domUtils.ts","../../src/utils/eventUtils.ts","../../src/utils/keyboardUtils.ts","../../src/utils/renderMeasuringCells.tsx","../../src/utils/selectedCellUtils.ts","../../src/style/cell.ts","../../src/utils/styleUtils.ts","../../src/utils/index.ts","../../src/cellRenderers/renderCheckbox.tsx","../../src/cellRenderers/renderValue.tsx","../../src/DataGridDefaultRenderersContext.ts","../../src/cellRenderers/SelectCellFormatter.tsx","../../src/hooks/useRowSelection.ts","../../src/Columns.tsx","../../src/renderHeaderCell.tsx","../../src/hooks/useCalculatedColumns.ts","../../src/hooks/useColumnWidths.ts","../../src/hooks/useGridDimensions.ts","../../src/hooks/useLatestFunc.ts","../../src/hooks/useRovingTabIndex.ts","../../src/hooks/useViewportColumns.ts","../../src/hooks/useViewportRows.ts","../../src/Cell.tsx","../../src/EditCell.tsx","../../src/GroupedColumnHeaderCell.tsx","../../src/HeaderCell.tsx","../../src/style/row.ts","../../src/HeaderRow.tsx","../../src/GroupedColumnHeaderRow.tsx","../../src/Row.tsx","../../src/ScrollToCell.tsx","../../src/sortStatus.tsx","../../src/style/core.ts","../../src/SummaryCell.tsx","../../src/SummaryRow.tsx","../../src/DataGrid.tsx"],"sourcesContent":["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<Element>, behavior: ScrollBehavior = 'instant') {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest', behavior });\n}\n","import type { CellEvent } from '../types';\n\nexport function createCellEvent<E extends React.SyntheticEvent<HTMLDivElement>>(\n  event: E\n): CellEvent<E> {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n\n  return cellEvent;\n}\n","import type { Direction, Maybe } from '../types';\n\n// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\n// event.key may differ by keyboard input language, so we use event.keyCode instead\n// event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\nconst vKey = 86;\n\nexport function isDefaultCellInput(\n  event: React.KeyboardEvent<HTMLDivElement>,\n  isUserHandlingPaste: boolean\n): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-deprecated\n  if (isCtrlKeyHeldDown(event) && (event.keyCode !== vKey || isUserHandlingPaste)) return false;\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return (\n      target.closest('.rdg-editor-container')?.querySelectorAll('input, textarea, select')\n        .length === 1\n    );\n  }\n  return false;\n}\n\nexport function getLeftRightKey(direction: Maybe<Direction>) {\n  const isRtl = direction === 'rtl';\n\n  return {\n    leftKey: isRtl ? 'ArrowRight' : 'ArrowLeft',\n    rightKey: isRtl ? 'ArrowLeft' : 'ArrowRight'\n  } as const;\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>(viewportColumns: readonly CalculatedColumn<R, SR>[]) {\n  return viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n    <div\n      key={key}\n      className={measuringCellClassname}\n      style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n      data-measuring-cell-key={key}\n    />\n  ));\n}\n","import type {\n  CalculatedColumn,\n  CalculatedColumnParent,\n  CellNavigationMode,\n  Maybe,\n  Position\n} from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return isCellEditableUtil(column, row);\n}\n\n// https://github.com/vercel/next.js/issues/56480\nexport function isCellEditableUtil<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.renderEditCell != null &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  moveUp: boolean;\n  moveNext: boolean;\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  mainHeaderRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n}\n\nfunction getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  mainHeaderRowIdx,\n  lastFrozenColumnIndex,\n  column\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'lastFrozenColumnIndex' | 'mainHeaderRowIdx'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  if (rowIdx === mainHeaderRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (\n    topSummaryRows &&\n    rowIdx > mainHeaderRowIdx &&\n    rowIdx <= topSummaryRowsCount + mainHeaderRowIdx\n  ) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  moveUp,\n  moveNext,\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  mainHeaderRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx, rowIdx: currentRowIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n  const columnsCount = columns.length;\n\n  const setColSpan = (moveNext: boolean) => {\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        mainHeaderRowIdx,\n        lastFrozenColumnIndex,\n        column\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveNext ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  const getParentRowIdx = (parent: CalculatedColumnParent<R, SR>) => {\n    return parent.level + mainHeaderRowIdx;\n  };\n\n  const setHeaderGroupColAndRowSpan = () => {\n    if (moveNext) {\n      // find the parent at the same row level\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx === parentRowIdx) {\n          nextIdx = parent.idx + parent.colSpan;\n          break;\n        }\n        parent = parent.parent;\n      }\n    } else if (moveUp) {\n      // find the first reachable parent\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      let found = false;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx >= parentRowIdx) {\n          nextIdx = parent.idx;\n          nextRowIdx = parentRowIdx;\n          found = true;\n          break;\n        }\n        parent = parent.parent;\n      }\n\n      // keep the current position if there is no parent matching the new row position\n      if (!found) {\n        nextIdx = currentIdx;\n        nextRowIdx = currentRowIdx;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(moveNext);\n\n    if (nextRowIdx < mainHeaderRowIdx) {\n      setHeaderGroupColAndRowSpan();\n    }\n  }\n\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  if (nextRowIdx < mainHeaderRowIdx && nextIdx > -1 && nextIdx < columnsCount) {\n    // Find the last reachable parent for the new rowIdx\n    // This check is needed when navigating to a column\n    // that does not have a parent matching the new rowIdx\n    const nextColumn = columns[nextIdx];\n    let parent = nextColumn.parent;\n    const nextParentRowIdx = nextRowIdx;\n    nextRowIdx = mainHeaderRowIdx;\n    while (parent !== undefined) {\n      const parentRowIdx = getParentRowIdx(parent);\n      if (parentRowIdx >= nextParentRowIdx) {\n        nextRowIdx = parentRowIdx;\n        nextIdx = parent.idx;\n      }\n      parent = parent.parent;\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // Exit the grid if we're at the first or last cell of the grid\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /* max-content does not work with size containment\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\n     * Chromium bug: at odd zoom levels or subpixel positioning,\n     * layout/paint/style containment can make cell borders disappear\n     *   https://issues.chromium.org/issues/40840864\n     */\n    position: relative; /* needed for absolute positioning to work */\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: var(--rdg-border-width) solid var(--rdg-border-color);\n    border-block-end: var(--rdg-border-width) solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    align-content: center;\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: var(--rdg-selection-width) solid var(--rdg-selection-color);\n      outline-offset: calc(var(--rdg-selection-width) * -1);\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n\n    /* Add box-shadow on the last frozen cell */\n    &:nth-last-child(1 of &) {\n      box-shadow: var(--rdg-cell-frozen-box-shadow);\n    }\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    --rdg-drag-handle-size: 8px;\n    z-index: 0;\n    cursor: move;\n    inline-size: var(--rdg-drag-handle-size);\n    block-size: var(--rdg-drag-handle-size);\n    background-color: var(--rdg-selection-color);\n    place-self: end;\n\n    &:hover {\n      --rdg-drag-handle-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nexport const cellDragHandleFrozenClassname = css`\n  @layer rdg.DragHandle {\n    z-index: 1;\n    position: sticky;\n  }\n`;\n\nexport const cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn, CalculatedColumnOrColumnGroup } from '../types';\nimport { cellClassname, cellFrozenClassname } from '../style/cell';\n\nexport function getRowStyle(rowIdx: number): CSSProperties {\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getHeaderCellStyle<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number,\n  rowSpan: number\n): React.CSSProperties {\n  const gridRowEnd = rowIdx + 1;\n  const paddingBlockStart = `calc(${rowSpan - 1} * var(--rdg-header-row-height))`;\n\n  if (column.parent === undefined) {\n    return {\n      insetBlockStart: 0,\n      gridRowStart: 1,\n      gridRowEnd,\n      paddingBlockStart\n    };\n  }\n\n  return {\n    insetBlockStart: `calc(${rowIdx - rowSpan} * var(--rdg-header-row-height))`,\n    gridRowStart: gridRowEnd - rowSpan,\n    gridRowEnd,\n    paddingBlockStart\n  };\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan = 1\n): React.CSSProperties {\n  const index = column.idx + 1;\n  return {\n    gridColumnStart: index,\n    gridColumnEnd: index + colSpan,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen\n    },\n    ...extraClasses\n  );\n}\n","import type { CalculatedColumn, CalculatedColumnOrColumnGroup, Maybe } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './eventUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: Maybe<(row: NoInfer<R>) => K>\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n\nexport function getHeaderCellRowSpan<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number\n) {\n  return column.parent === undefined ? rowIdx : column.level - column.parent.level;\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderCheckboxProps } from '../types';\n\nconst checkbox = css`\n  @layer rdg.CheckboxInput {\n    display: block;\n    margin: auto;\n    inline-size: 20px;\n    block-size: 20px;\n\n    &:focus-visible {\n      outline: 2px solid var(--rdg-checkbox-focus-color);\n      outline-offset: -3px;\n    }\n\n    &:enabled {\n      cursor: pointer;\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox-input ${checkbox}`;\n\nexport function renderCheckbox({ onChange, indeterminate, ...props }: RenderCheckboxProps) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <input\n      ref={(el) => {\n        if (el) {\n          el.indeterminate = indeterminate === true;\n        }\n      }}\n      type=\"checkbox\"\n      className={checkboxClassname}\n      onChange={handleChange}\n      {...props}\n    />\n  );\n}\n","import type { RenderCellProps } from '../types';\n\nexport function renderValue<R, SR>(props: RenderCellProps<R, SR>) {\n  try {\n    return props.row[props.column.key as keyof R] as React.ReactNode;\n  } catch {\n    return null;\n  }\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Maybe, Renderers } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const DataGridDefaultRenderersContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport function useDefaultRenderers<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultRenderersContext);\n}\n","import type { RenderCheckboxProps } from '../types';\nimport { useDefaultRenderers } from '../DataGridDefaultRenderersContext';\n\ntype SharedInputProps = Pick<\n  RenderCheckboxProps,\n  'disabled' | 'tabIndex' | 'aria-label' | 'aria-labelledby' | 'indeterminate' | 'onChange'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  value: boolean;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  indeterminate,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const renderCheckbox = useDefaultRenderers()!.renderCheckbox!;\n\n  return renderCheckbox({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    tabIndex,\n    indeterminate,\n    disabled,\n    checked: value,\n    onChange\n  });\n}\n","import { createContext, useContext } from 'react';\n\nimport type { SelectHeaderRowEvent, SelectRowEvent } from '../types';\n\nexport interface RowSelectionContextValue {\n  readonly isRowSelected: boolean;\n  readonly isRowSelectionDisabled: boolean;\n}\n\nexport const RowSelectionContext = createContext<RowSelectionContextValue | undefined>(undefined);\n\nexport const RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport function useRowSelection() {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within renderCell');\n  }\n\n  return {\n    isRowSelectionDisabled: rowSelectionContext.isRowSelectionDisabled,\n    isRowSelected: rowSelectionContext.isRowSelected,\n    onRowSelectionChange: rowSelectionChangeContext\n  };\n}\n\nexport interface HeaderRowSelectionContextValue {\n  readonly isRowSelected: boolean;\n  readonly isIndeterminate: boolean;\n}\n\nexport const HeaderRowSelectionContext = createContext<HeaderRowSelectionContextValue | undefined>(\n  undefined\n);\n\nexport const HeaderRowSelectionChangeContext = createContext<\n  ((selectRowEvent: SelectHeaderRowEvent) => void) | undefined\n>(undefined);\n\nexport function useHeaderRowSelection() {\n  const headerRowSelectionContext = useContext(HeaderRowSelectionContext);\n  const headerRowSelectionChangeContext = useContext(HeaderRowSelectionChangeContext);\n\n  if (headerRowSelectionContext === undefined || headerRowSelectionChangeContext === undefined) {\n    throw new Error('useHeaderRowSelection must be used within renderHeaderCell');\n  }\n\n  return {\n    isIndeterminate: headerRowSelectionContext.isIndeterminate,\n    isRowSelected: headerRowSelectionContext.isRowSelected,\n    onRowSelectionChange: headerRowSelectionChangeContext\n  };\n}\n","import { useHeaderRowSelection, useRowSelection } from './hooks/useRowSelection';\nimport type { Column, RenderCellProps, RenderGroupCellProps, RenderHeaderCellProps } from './types';\nimport { SelectCellFormatter } from './cellRenderers';\n\nexport const SELECT_COLUMN_KEY = 'rdg-select-column';\n\nfunction HeaderRenderer(props: RenderHeaderCellProps<unknown>) {\n  const { isIndeterminate, isRowSelected, onRowSelectionChange } = useHeaderRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select All\"\n      tabIndex={props.tabIndex}\n      indeterminate={isIndeterminate}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ checked: isIndeterminate ? false : checked });\n      }}\n    />\n  );\n}\n\nfunction SelectFormatter(props: RenderCellProps<unknown>) {\n  const { isRowSelectionDisabled, isRowSelected, onRowSelectionChange } = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      tabIndex={props.tabIndex}\n      disabled={isRowSelectionDisabled}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: RenderGroupCellProps<unknown>) {\n  const { isRowSelected, onRowSelectionChange } = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  renderHeaderCell(props) {\n    return <HeaderRenderer {...props} />;\n  },\n  renderCell(props) {\n    return <SelectFormatter {...props} />;\n  },\n  renderGroupCell(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n","import { css } from '@linaria/core';\n\nimport type { RenderHeaderCellProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersContext';\n\nconst headerSortCellClassname = css`\n  @layer rdg.SortableHeaderCell {\n    display: flex;\n  }\n`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function renderHeaderCell<R, SR>({\n  column,\n  sortDirection,\n  priority\n}: RenderHeaderCellProps<R, SR>) {\n  if (!column.sortable) return column.name;\n\n  return (\n    <SortableHeaderCell sortDirection={sortDirection} priority={priority}>\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  RenderHeaderCellProps<R, SR>,\n  'sortDirection' | 'priority'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  sortDirection,\n  priority,\n  children\n}: SortableHeaderCellProps<R, SR>) {\n  const renderSortStatus = useDefaultRenderers<R, SR>()!.renderSortStatus!;\n\n  return (\n    <span className={headerSortCellClassname}>\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{renderSortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n","import { useMemo } from 'react';\n\nimport { clampColumnWidth, max, min } from '../utils';\nimport type { CalculatedColumn, CalculatedColumnParent, ColumnOrColumnGroup, Omit } from '../types';\nimport { renderValue } from '../cellRenderers';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport type { DataGridProps } from '../DataGrid';\nimport renderHeaderCell from '../renderHeaderCell';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer V> ? Mutable<V>[] : T[P];\n};\n\ninterface WithParent<R, SR> {\n  readonly parent: MutableCalculatedColumnParent<R, SR> | undefined;\n}\n\ntype MutableCalculatedColumnParent<R, SR> = Omit<Mutable<CalculatedColumnParent<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\ntype MutableCalculatedColumn<R, SR> = Omit<Mutable<CalculatedColumn<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\n\ninterface CalculatedColumnsArgs<R, SR> {\n  rawColumns: readonly ColumnOrColumnGroup<R, SR>[];\n  defaultColumnOptions: DataGridProps<R, SR>['defaultColumnOptions'];\n  viewportWidth: number;\n  scrollLeft: number;\n  getColumnWidth: (column: CalculatedColumn<R, SR>) => string | number;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  defaultColumnOptions,\n  getColumnWidth,\n  viewportWidth,\n  scrollLeft,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultRenderCell = defaultColumnOptions?.renderCell ?? renderValue;\n  const defaultRenderHeaderCell = defaultColumnOptions?.renderHeaderCell ?? renderHeaderCell;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n  const defaultDraggable = defaultColumnOptions?.draggable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, headerRowsCount } = useMemo((): {\n    readonly columns: readonly CalculatedColumn<R, SR>[];\n    readonly colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    readonly lastFrozenColumnIndex: number;\n    readonly headerRowsCount: number;\n  } => {\n    let lastFrozenColumnIndex = -1;\n    let headerRowsCount = 1;\n    const columns: MutableCalculatedColumn<R, SR>[] = [];\n\n    collectColumns(rawColumns, 1);\n\n    function collectColumns(\n      rawColumns: readonly ColumnOrColumnGroup<R, SR>[],\n      level: number,\n      parent?: MutableCalculatedColumnParent<R, SR>\n    ) {\n      for (const rawColumn of rawColumns) {\n        if ('children' in rawColumn) {\n          const calculatedColumnParent: MutableCalculatedColumnParent<R, SR> = {\n            name: rawColumn.name,\n            parent,\n            idx: -1,\n            colSpan: 0,\n            level: 0,\n            headerCellClass: rawColumn.headerCellClass\n          };\n\n          collectColumns(rawColumn.children, level + 1, calculatedColumnParent);\n          continue;\n        }\n\n        const frozen = rawColumn.frozen ?? false;\n\n        const column: MutableCalculatedColumn<R, SR> = {\n          ...rawColumn,\n          parent,\n          idx: 0,\n          level: 0,\n          frozen,\n          width: rawColumn.width ?? defaultWidth,\n          minWidth: rawColumn.minWidth ?? defaultMinWidth,\n          maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n          sortable: rawColumn.sortable ?? defaultSortable,\n          resizable: rawColumn.resizable ?? defaultResizable,\n          draggable: rawColumn.draggable ?? defaultDraggable,\n          renderCell: rawColumn.renderCell ?? defaultRenderCell,\n          renderHeaderCell: rawColumn.renderHeaderCell ?? defaultRenderHeaderCell\n        };\n\n        columns.push(column);\n\n        if (frozen) {\n          lastFrozenColumnIndex++;\n        }\n\n        if (level > headerRowsCount) {\n          headerRowsCount = level;\n        }\n      }\n    }\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort frozen columns second:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // TODO: sort columns to keep them grouped if they have a parent\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n      updateColumnParent(column, idx, 0);\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      headerRowsCount\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultRenderCell,\n    defaultRenderHeaderCell,\n    defaultResizable,\n    defaultSortable,\n    defaultDraggable\n  ]);\n\n  const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n\n    for (const column of columns) {\n      let width = getColumnWidth(column);\n\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {};\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [getColumnWidth, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    headerRowsCount,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth\n  };\n}\n\nfunction updateColumnParent<R, SR>(\n  column: MutableCalculatedColumn<R, SR> | MutableCalculatedColumnParent<R, SR>,\n  index: number,\n  level: number\n) {\n  if (level < column.level) {\n    column.level = level;\n  }\n\n  if (column.parent !== undefined) {\n    const { parent } = column;\n    if (parent.idx === -1) {\n      parent.idx = index;\n    }\n    parent.colSpan += 1;\n    updateColumnParent(parent, index, level - 1);\n  }\n}\n","import { useLayoutEffect, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport type { CalculatedColumn, ColumnWidths, ResizedWidth } from '../types';\nimport type { DataGridProps } from '../DataGrid';\n\nexport function useColumnWidths<R, SR>(\n  columns: readonly CalculatedColumn<R, SR>[],\n  viewportColumns: readonly CalculatedColumn<R, SR>[],\n  templateColumns: readonly string[],\n  gridRef: React.RefObject<HTMLDivElement | null>,\n  gridWidth: number,\n  columnWidths: ColumnWidths,\n  onColumnWidthsChange: (columnWidths: ColumnWidths) => void,\n  onColumnResize: DataGridProps<R, SR>['onColumnResize'],\n  setColumnResizing: (isColumnResizing: boolean) => void\n) {\n  const [columnToAutoResize, setColumnToAutoResize] = useState<{\n    readonly key: string;\n    readonly width: ResizedWidth;\n  } | null>(null);\n  const [columnsToMeasureOnResize, setColumnsToMeasureOnResize] =\n    useState<ReadonlySet<string> | null>(null);\n  const [prevGridWidth, setPreviousGridWidth] = useState(gridWidth);\n  const columnsCanFlex: boolean = columns.length === viewportColumns.length;\n  const ignorePreviouslyMeasuredColumnsOnGridWidthChange =\n    // Allow columns to flex again when...\n    columnsCanFlex &&\n    // there is enough space for columns to flex and the grid was resized\n    gridWidth !== prevGridWidth;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure: string[] = [];\n\n  for (const { key, idx, width } of viewportColumns) {\n    const columnWidth = columnWidths.get(key);\n    if (key === columnToAutoResize?.key) {\n      newTemplateColumns[idx] =\n        columnToAutoResize.width === 'max-content'\n          ? columnToAutoResize.width\n          : `${columnToAutoResize.width}px`;\n      columnsToMeasure.push(key);\n    } else if (\n      typeof width === 'string' &&\n      // If the column is resized by the user, we don't want to measure it again\n      columnWidth?.type !== 'resized' &&\n      (ignorePreviouslyMeasuredColumnsOnGridWidthChange ||\n        columnsToMeasureOnResize?.has(key) === true ||\n        columnWidth === undefined)\n    ) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n\n  useLayoutEffect(updateMeasuredAndResizedWidths);\n\n  function updateMeasuredAndResizedWidths() {\n    setPreviousGridWidth(gridWidth);\n    if (columnsToMeasure.length === 0) return;\n\n    const newColumnWidths = new Map(columnWidths);\n    let hasChanges = false;\n\n    for (const key of columnsToMeasure) {\n      const measuredWidth = measureColumnWidth(gridRef, key);\n      hasChanges ||= measuredWidth !== columnWidths.get(key)?.width;\n      if (measuredWidth === undefined) {\n        newColumnWidths.delete(key);\n      } else {\n        newColumnWidths.set(key, { type: 'measured', width: measuredWidth });\n      }\n    }\n\n    if (columnToAutoResize !== null) {\n      const resizingKey = columnToAutoResize.key;\n      const oldWidth = columnWidths.get(resizingKey)?.width;\n      const newWidth = measureColumnWidth(gridRef, resizingKey);\n      if (newWidth !== undefined && oldWidth !== newWidth) {\n        hasChanges = true;\n        newColumnWidths.set(resizingKey, {\n          type: 'resized',\n          width: newWidth\n        });\n      }\n      setColumnToAutoResize(null);\n    }\n\n    if (hasChanges) {\n      onColumnWidthsChange(newColumnWidths);\n    }\n  }\n\n  function handleColumnResize(column: CalculatedColumn<R, SR>, nextWidth: ResizedWidth) {\n    const { key: resizingKey } = column;\n\n    flushSync(() => {\n      if (columnsCanFlex) {\n        // remeasure all the columns that can flex and are not resized by the user\n        const columnsToRemeasure = new Set<string>();\n        for (const { key, width } of viewportColumns) {\n          if (\n            resizingKey !== key &&\n            typeof width === 'string' &&\n            columnWidths.get(key)?.type !== 'resized'\n          ) {\n            columnsToRemeasure.add(key);\n          }\n        }\n\n        setColumnsToMeasureOnResize(columnsToRemeasure);\n      }\n\n      setColumnToAutoResize({\n        key: resizingKey,\n        width: nextWidth\n      });\n\n      setColumnResizing(typeof nextWidth === 'number');\n    });\n\n    setColumnsToMeasureOnResize(null);\n\n    if (onColumnResize) {\n      const previousWidth = columnWidths.get(resizingKey)?.width;\n      const newWidth =\n        typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey);\n      if (newWidth !== undefined && newWidth !== previousWidth) {\n        onColumnResize(column, newWidth);\n      }\n    }\n  }\n\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  } as const;\n}\n\nfunction measureColumnWidth(gridRef: React.RefObject<HTMLDivElement | null>, key: string) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current?.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}\n","import { useLayoutEffect, useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nexport function useGridDimensions() {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n  const [horizontalScrollbarHeight, setHorizontalScrollbarHeight] = useState(0);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialHorizontalScrollbarHeight = offsetHeight - clientHeight;\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - initialHorizontalScrollbarHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n    setHorizontalScrollbarHeight(initialHorizontalScrollbarHeight);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      const { clientHeight, offsetHeight } = gridRef.current!;\n\n      // we use flushSync here to avoid flashing scrollbars\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n        setHorizontalScrollbarHeight(offsetHeight - clientHeight);\n      });\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize, horizontalScrollbarHeight] as const;\n}\n","import { useCallback, useLayoutEffect, useRef } from 'react';\n\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useLayoutEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n","import { useState } from 'react';\n\n// https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_general_within\nexport function useRovingTabIndex(isSelected: boolean) {\n  // https://www.w3.org/WAI/ARIA/apg/patterns/grid/#keyboardinteraction-settingfocusandnavigatinginsidecells\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    // Do not steal focus if event originates from a focusable child\n    if (event.target === event.currentTarget) {\n      const elementToFocus = event.currentTarget.querySelector<Element & HTMLOrSVGElement>(\n        '[tabindex=\"0\"]'\n      );\n\n      // Focus cell content when available instead of the cell itself\n      if (elementToFocus !== null) {\n        elementToFocus.focus({ preventScroll: true });\n        setIsChildFocused(true);\n      } else {\n        setIsChildFocused(false);\n      }\n    } else {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocusable = isSelected && !isChildFocused;\n\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        // eslint-disable-next-line react-compiler/react-compiler\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\n\nimport { floor, max, min } from '../utils';\n\ninterface ViewportRowsArgs<R> {\n  rows: readonly R[];\n  rowHeight: number | ((row: R) => number);\n  clientHeight: number;\n  scrollTop: number;\n  enableVirtualization: boolean;\n}\n\nexport function useViewportRows<R>({\n  rows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row) => {\n      const currentRowHeight = rowHeight(row);\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { memo, type MouseEvent } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, isCellEditableUtil } from './utils';\nimport type { CellMouseEventHandler, CellRendererProps } from './types';\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isDraggedOver,\n  row,\n  rowIdx,\n  className,\n  onMouseDown,\n  onCellMouseDown,\n  onClick,\n  onCellClick,\n  onDoubleClick,\n  onCellDoubleClick,\n  onContextMenu,\n  onCellContextMenu,\n  onRowChange,\n  selectCell,\n  style,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  const { cellClass } = column;\n  className = getCellClassname(\n    column,\n    {\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n  const isEditable = isCellEditableUtil(column, row);\n\n  function selectCellWrapper(enableEditor?: boolean) {\n    selectCell({ rowIdx, idx: column.idx }, { enableEditor });\n  }\n\n  function handleMouseEvent(\n    event: React.MouseEvent<HTMLDivElement>,\n    eventHandler?: CellMouseEventHandler<R, SR>\n  ) {\n    let eventHandled = false;\n    if (eventHandler) {\n      const cellEvent = createCellEvent(event);\n      eventHandler({ rowIdx, row, column, selectCell: selectCellWrapper }, cellEvent);\n      eventHandled = cellEvent.isGridDefaultPrevented();\n    }\n    return eventHandled;\n  }\n\n  function handleMouseDown(event: MouseEvent<HTMLDivElement>) {\n    onMouseDown?.(event);\n    if (!handleMouseEvent(event, onCellMouseDown)) {\n      // select cell if the event is not prevented\n      selectCellWrapper();\n    }\n  }\n\n  function handleClick(event: MouseEvent<HTMLDivElement>) {\n    onClick?.(event);\n    handleMouseEvent(event, onCellClick);\n  }\n\n  function handleDoubleClick(event: MouseEvent<HTMLDivElement>) {\n    onDoubleClick?.(event);\n    if (!handleMouseEvent(event, onCellDoubleClick)) {\n      // go into edit mode if the event is not prevented\n      selectCellWrapper(true);\n    }\n  }\n\n  function handleContextMenu(event: MouseEvent<HTMLDivElement>) {\n    onContextMenu?.(event);\n    handleMouseEvent(event, onCellContextMenu);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      aria-readonly={!isEditable || undefined}\n      tabIndex={tabIndex}\n      className={className}\n      style={{\n        ...getCellStyle(column, colSpan),\n        ...style\n      }}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {column.renderCell({\n        column,\n        row,\n        rowIdx,\n        isCellEditable: isEditable,\n        tabIndex: childTabIndex,\n        onRowChange: handleRowChange\n      })}\n    </div>\n  );\n}\n\nconst CellComponent = memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => React.JSX.Element;\n\nexport default CellComponent;\n\nexport function defaultRenderCell<R, SR>(key: React.Key, props: CellRendererProps<R, SR>) {\n  return <CellComponent key={key} {...props} />;\n}\n","import { useLayoutEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, onEditorNavigation } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellRendererProps,\n  EditCellKeyDownArgs,\n  Maybe,\n  Omit,\n  RenderEditCellProps\n} from './types';\n\ndeclare global {\n  const scheduler: Scheduler | undefined;\n}\n\ninterface Scheduler {\n  readonly postTask?: (\n    callback: () => void,\n    options?: {\n      priority?: 'user-blocking' | 'user-visible' | 'background';\n      signal?: AbortSignal;\n      delay?: number;\n    }\n  ) => Promise<unknown>;\n}\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `postTask`/`requestAnimationFrame` are the best way we know to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst canUsePostTask = typeof scheduler === 'object' && typeof scheduler.postTask === 'function';\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<RenderEditCellProps<R, SR>, 'onRowChange' | 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  rowIdx: number;\n  onRowChange: (row: R, commitChanges: boolean, shouldFocusCell: boolean) => void;\n  closeEditor: (shouldFocusCell: boolean) => void;\n  navigate: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onKeyDown: Maybe<(args: EditCellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}: EditCellProps<R, SR>) {\n  const captureEventRef = useRef<MouseEvent | undefined>(undefined);\n  const abortControllerRef = useRef<AbortController>(undefined);\n  const frameRequestRef = useRef<number>(undefined);\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick ?? true;\n\n  // We need to prevent the `useLayoutEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n\n  useLayoutEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown(event: MouseEvent) {\n      captureEventRef.current = event;\n\n      if (canUsePostTask) {\n        const abortController = new AbortController();\n        const { signal } = abortController;\n        abortControllerRef.current = abortController;\n        // Use postTask to ensure that the event is not called in the middle of a React render\n        // and that it is called before the next paint.\n        scheduler\n          .postTask(commitOnOutsideMouseDown, {\n            priority: 'user-blocking',\n            signal\n          })\n          // ignore abort errors\n          .catch(() => {});\n      } else {\n        frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n      }\n    }\n\n    function onWindowMouseDown(event: MouseEvent) {\n      if (captureEventRef.current === event) {\n        commitOnOutsideMouseDown();\n      }\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n    addEventListener('mousedown', onWindowMouseDown);\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      removeEventListener('mousedown', onWindowMouseDown);\n      cancelTask();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelTask() {\n    captureEventRef.current = undefined;\n    if (abortControllerRef.current !== undefined) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = undefined;\n    }\n    if (frameRequestRef.current !== undefined) {\n      cancelAnimationFrame(frameRequestRef.current);\n      frameRequestRef.current = undefined;\n    }\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown(\n        {\n          mode: 'EDIT',\n          row,\n          column,\n          rowIdx,\n          navigate() {\n            navigate(event);\n          },\n          onClose\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (event.key === 'Escape') {\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n\n  function onClose(commitChanges = false, shouldFocusCell = true) {\n    if (commitChanges) {\n      onRowChange(row, true, shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n\n  function onEditorRowChange(row: R, commitChangesAndFocus = false) {\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.displayCellContent && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={handleKeyDown}\n      onMouseDownCapture={cancelTask}\n    >\n      {column.renderEditCell != null && (\n        <>\n          {column.renderEditCell({\n            column,\n            row,\n            rowIdx,\n            onRowChange: onEditorRowChange,\n            onClose\n          })}\n          {column.editorOptions?.displayCellContent &&\n            column.renderCell({\n              column,\n              row,\n              rowIdx,\n              isCellEditable: true,\n              tabIndex: -1,\n              onRowChange: onEditorRowChange\n            })}\n        </>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getHeaderCellRowSpan, getHeaderCellStyle } from './utils';\nimport type { CalculatedColumnParent } from './types';\nimport type { GroupedColumnHeaderRowProps } from './GroupedColumnHeaderRow';\nimport { cellClassname } from './style/cell';\n\ntype SharedGroupedColumnHeaderRowProps<R, SR> = Pick<\n  GroupedColumnHeaderRowProps<R, SR>,\n  'rowIdx' | 'selectCell'\n>;\n\ninterface GroupedColumnHeaderCellProps<R, SR> extends SharedGroupedColumnHeaderRowProps<R, SR> {\n  column: CalculatedColumnParent<R, SR>;\n  isCellSelected: boolean;\n}\n\nexport default function GroupedColumnHeaderCell<R, SR>({\n  column,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: GroupedColumnHeaderCellProps<R, SR>) {\n  const { tabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { colSpan } = column;\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const index = column.idx + 1;\n\n  function onMouseDown() {\n    selectCell({ idx: column.idx, rowIdx });\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={index}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={clsx(cellClassname, column.headerCellClass)}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan),\n        gridColumnStart: index,\n        gridColumnEnd: index + colSpan\n      }}\n      onFocus={onFocus}\n      onMouseDown={onMouseDown}\n    >\n      {column.name}\n    </div>\n  );\n}\n","import { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport {\n  clampColumnWidth,\n  getCellClassname,\n  getCellStyle,\n  getHeaderCellRowSpan,\n  getHeaderCellStyle,\n  getLeftRightKey,\n  isCtrlKeyHeldDown,\n  stopPropagation\n} from './utils';\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\n\nconst cellSortableClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: pointer;\n  }\n`;\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\nexport const resizeHandleClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: col-resize;\n    position: absolute;\n    inset-block-start: 0;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 10px;\n  }\n`;\n\nconst cellDraggableClassname = 'rdg-cell-draggable';\n\nconst cellDragging = css`\n  @layer rdg.HeaderCell {\n    background-color: var(--rdg-header-draggable-background-color);\n  }\n`;\n\nconst cellDraggingClassname = `rdg-cell-dragging ${cellDragging}`;\n\nconst cellOver = css`\n  @layer rdg.HeaderCell {\n    background-color: var(--rdg-header-draggable-background-color);\n  }\n`;\n\nconst cellOverClassname = `rdg-cell-drag-over ${cellOver}`;\n\nconst dragImageClassname = css`\n  @layer rdg.HeaderCell {\n    border-radius: 4px;\n    width: fit-content;\n    outline: 2px solid hsl(207, 100%, 50%);\n    outline-offset: -2px;\n  }\n`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'onColumnResizeEnd'\n  | 'shouldFocusGrid'\n  | 'direction'\n  | 'onColumnsReorder'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  rowIdx: number;\n  isCellSelected: boolean;\n  draggedColumnKey: string | undefined;\n  setDraggedColumnKey: (draggedColumnKey: string | undefined) => void;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  rowIdx,\n  isCellSelected,\n  onColumnResize,\n  onColumnResizeEnd,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction,\n  draggedColumnKey,\n  setDraggedColumnKey\n}: HeaderCellProps<R, SR>) {\n  const [isOver, setIsOver] = useState(false);\n  const dragImageRef = useRef<HTMLDivElement>(null);\n  const isDragging = draggedColumnKey === column.key;\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(shouldFocusGrid || isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n  const { sortable, resizable, draggable } = column;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellSortableClassname]: sortable,\n    [cellResizableClassname]: resizable,\n    [cellDraggableClassname]: draggable,\n    [cellDraggingClassname]: isDragging,\n    [cellOverClassname]: isOver\n  });\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst === true && sortDirection === 'DESC') ||\n        (sortDescendingFirst !== true && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell({ idx: 0, rowIdx });\n    }\n  }\n\n  function onMouseDown() {\n    selectCell({ idx: column.idx, rowIdx });\n  }\n\n  function onClick(event: React.MouseEvent<HTMLSpanElement>) {\n    if (sortable) {\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    const { key } = event;\n    if (sortable && (key === ' ' || key === 'Enter')) {\n      // prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    } else if (\n      resizable &&\n      isCtrlKeyHeldDown(event) &&\n      (key === 'ArrowLeft' || key === 'ArrowRight')\n    ) {\n      // prevent navigation\n      // TODO: check if we can use `preventDefault` instead\n      event.stopPropagation();\n      const { width } = event.currentTarget.getBoundingClientRect();\n      const { leftKey } = getLeftRightKey(direction);\n      const offset = key === leftKey ? -10 : 10;\n      const newWidth = clampColumnWidth(width + offset, column);\n      if (newWidth !== width) {\n        onColumnResize(column, newWidth);\n      }\n    }\n  }\n\n  function onDragStart(event: React.DragEvent<HTMLDivElement>) {\n    // need flushSync to make sure the drag image is rendered before the drag starts\n    flushSync(() => {\n      setDraggedColumnKey(column.key);\n    });\n    event.dataTransfer.setDragImage(dragImageRef.current!, 0, 0);\n    event.dataTransfer.dropEffect = 'move';\n  }\n\n  function onDragEnd() {\n    setDraggedColumnKey(undefined);\n  }\n\n  function onDragOver(event: React.DragEvent<HTMLDivElement>) {\n    // prevent default to allow drop\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }\n\n  function onDrop(event: React.DragEvent<HTMLDivElement>) {\n    setIsOver(false);\n    // prevent the browser from redirecting in some cases\n    event.preventDefault();\n    onColumnsReorder?.(draggedColumnKey!, column.key);\n  }\n\n  function onDragEnter(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(true);\n    }\n  }\n\n  function onDragLeave(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(false);\n    }\n  }\n\n  let dragTargetProps: React.ComponentProps<'div'> | undefined;\n  let dropTargetProps: React.ComponentProps<'div'> | undefined;\n  if (draggable) {\n    dragTargetProps = {\n      draggable: true,\n      onDragStart,\n      onDragEnd\n    };\n\n    if (draggedColumnKey !== undefined && draggedColumnKey !== column.key) {\n      dropTargetProps = {\n        onDragOver,\n        onDragEnter,\n        onDragLeave,\n        onDrop\n      };\n    }\n  }\n\n  const style: React.CSSProperties = {\n    ...getHeaderCellStyle(column, rowIdx, rowSpan),\n    ...getCellStyle(column, colSpan)\n  };\n\n  const content = column.renderHeaderCell({\n    column,\n    sortDirection,\n    priority,\n    tabIndex: childTabIndex\n  });\n\n  return (\n    <>\n      {isDragging && (\n        <div\n          ref={dragImageRef}\n          style={style}\n          className={getCellClassname(column, column.headerCellClass, dragImageClassname)}\n        >\n          {content}\n        </div>\n      )}\n      <div\n        role=\"columnheader\"\n        aria-colindex={column.idx + 1}\n        aria-colspan={colSpan}\n        aria-rowspan={rowSpan}\n        aria-selected={isCellSelected}\n        aria-sort={ariaSort}\n        tabIndex={tabIndex}\n        className={className}\n        style={style}\n        onMouseDown={onMouseDown}\n        onFocus={handleFocus}\n        onClick={onClick}\n        onKeyDown={onKeyDown}\n        {...dragTargetProps}\n        {...dropTargetProps}\n      >\n        {content}\n\n        {resizable && (\n          <ResizeHandle\n            direction={direction}\n            column={column}\n            onColumnResize={onColumnResize}\n            onColumnResizeEnd={onColumnResizeEnd}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n\ntype ResizeHandleProps<R, SR> = Pick<\n  HeaderCellProps<R, SR>,\n  'direction' | 'column' | 'onColumnResize' | 'onColumnResizeEnd'\n>;\n\nfunction ResizeHandle<R, SR>({\n  direction,\n  column,\n  onColumnResize,\n  onColumnResizeEnd\n}: ResizeHandleProps<R, SR>) {\n  const resizingOffsetRef = useRef<number>(undefined);\n  const isRtl = direction === 'rtl';\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    // Fix column resizing on a draggable column in FF\n    event.preventDefault();\n\n    const { currentTarget, pointerId } = event;\n    currentTarget.setPointerCapture(pointerId);\n    const headerCell = currentTarget.parentElement!;\n    const { right, left } = headerCell.getBoundingClientRect();\n    resizingOffsetRef.current = isRtl ? event.clientX - left : right - event.clientX;\n  }\n\n  function onPointerMove(event: React.PointerEvent<HTMLDivElement>) {\n    const offset = resizingOffsetRef.current;\n    if (offset === undefined) return;\n    const { width, right, left } = event.currentTarget.parentElement!.getBoundingClientRect();\n    let newWidth = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n    newWidth = clampColumnWidth(newWidth, column);\n    if (width > 0 && newWidth !== width) {\n      onColumnResize(column, newWidth);\n    }\n  }\n\n  function onLostPointerCapture() {\n    onColumnResizeEnd();\n    resizingOffsetRef.current = undefined;\n  }\n\n  function onDoubleClick() {\n    onColumnResize(column, 'max-content');\n  }\n\n  return (\n    <div\n      className={resizeHandleClassname}\n      onClick={stopPropagation}\n      onPointerDown={onPointerDown}\n      onPointerMove={onPointerMove}\n      // we are not using pointerup because it does not fire in some cases\n      // pointer down -> alt+tab -> pointer up over another window -> pointerup event not fired\n      onLostPointerCapture={onLostPointerCapture}\n      onDoubleClick={onDoubleClick}\n    />\n  );\n}\n\n// only accept pertinent drag events:\n// - ignore drag events going from the container to an element inside the container\n// - ignore drag events going from an element inside the container to the container\nfunction isEventPertinent(event: React.DragEvent) {\n  const relatedTarget = event.relatedTarget as HTMLElement | null;\n\n  return !event.currentTarget.contains(relatedTarget);\n}\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = 'rdg-row-selected';\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      block-size: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n\nexport const topSummaryRowClassname = 'rdg-top-summary-row';\n\nexport const bottomSummaryRowClassname = 'rdg-bottom-summary-row';\n","import { memo, useState } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan } from './utils';\nimport type { CalculatedColumn, Direction, Maybe, Position, ResizedWidth } from './types';\nimport type { DataGridProps } from './DataGrid';\nimport HeaderCell from './HeaderCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowSelectedClassname } from './style/row';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange' | 'onColumnsReorder'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  rowIdx: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: ResizedWidth) => void;\n  onColumnResizeEnd: () => void;\n  selectCell: (position: Position) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n  headerRowClass: Maybe<string>;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 1 to show up above regular cells and the focus sink */\n      z-index: 2;\n      position: sticky;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nexport const headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  headerRowClass,\n  rowIdx,\n  columns,\n  onColumnResize,\n  onColumnResizeEnd,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const [draggedColumnKey, setDraggedColumnKey] = useState<string>();\n\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        rowIdx={rowIdx}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        onColumnResizeEnd={onColumnResizeEnd}\n        onColumnsReorder={onColumnsReorder}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n        draggedColumnKey={draggedColumnKey}\n        setDraggedColumnKey={setDraggedColumnKey}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={clsx(\n        headerRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1\n        },\n        headerRowClass\n      )}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => React.JSX.Element;\n","import { memo } from 'react';\n\nimport type { CalculatedColumn, CalculatedColumnParent, Position } from './types';\nimport GroupedColumnHeaderCell from './GroupedColumnHeaderCell';\nimport { headerRowClassname } from './HeaderRow';\n\nexport interface GroupedColumnHeaderRowProps<R, SR> {\n  rowIdx: number;\n  level: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectCell: (position: Position) => void;\n  selectedCellIdx: number | undefined;\n}\n\nfunction GroupedColumnHeaderRow<R, SR>({\n  rowIdx,\n  level,\n  columns,\n  selectedCellIdx,\n  selectCell\n}: GroupedColumnHeaderRowProps<R, SR>) {\n  const cells = [];\n  const renderedParents = new Set<CalculatedColumnParent<R, SR>>();\n\n  for (const column of columns) {\n    let { parent } = column;\n\n    if (parent === undefined) continue;\n\n    while (parent.level > level) {\n      if (parent.parent === undefined) break;\n      parent = parent.parent;\n    }\n\n    if (parent.level === level && !renderedParents.has(parent)) {\n      renderedParents.add(parent);\n      const { idx } = parent;\n      cells.push(\n        <GroupedColumnHeaderCell<R, SR>\n          key={idx}\n          column={parent}\n          rowIdx={rowIdx}\n          isCellSelected={selectedCellIdx === idx}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={headerRowClassname}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(GroupedColumnHeaderRow) as <R, SR>(\n  props: GroupedColumnHeaderRowProps<R, SR>\n) => React.JSX.Element;\n","import { memo, useMemo } from 'react';\nimport clsx from 'clsx';\n\nimport { RowSelectionContext, useLatestFunc, type RowSelectionContextValue } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { CalculatedColumn, RenderRowProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersContext';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nfunction Row<R, SR>({\n  className,\n  rowIdx,\n  gridRowStart,\n  selectedCellIdx,\n  isRowSelectionDisabled,\n  isRowSelected,\n  draggedOverCellIdx,\n  lastFrozenColumnIndex,\n  row,\n  viewportColumns,\n  selectedCellEditor,\n  onCellMouseDown,\n  onCellClick,\n  onCellDoubleClick,\n  onCellContextMenu,\n  rowClass,\n  onRowChange,\n  selectCell,\n  style,\n  ...props\n}: RenderRowProps<R, SR>) {\n  const renderCell = useDefaultRenderers<R, SR>()!.renderCell!;\n\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row, rowIdx),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        renderCell(column.key, {\n          column,\n          colSpan,\n          row,\n          rowIdx,\n          isDraggedOver: draggedOverCellIdx === idx,\n          isCellSelected,\n          onCellMouseDown,\n          onCellClick,\n          onCellDoubleClick,\n          onCellContextMenu,\n          onRowChange: handleRowChange,\n          selectCell\n        })\n      );\n    }\n  }\n\n  const selectionValue = useMemo(\n    (): RowSelectionContextValue => ({ isRowSelected, isRowSelectionDisabled }),\n    [isRowSelectionDisabled, isRowSelected]\n  );\n\n  return (\n    <RowSelectionContext value={selectionValue}>\n      <div\n        role=\"row\"\n        className={className}\n        style={{\n          ...getRowStyle(gridRowStart),\n          ...style\n        }}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionContext>\n  );\n}\n\nconst RowComponent = memo(Row) as <R, SR>(props: RenderRowProps<R, SR>) => React.JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRenderRow<R, SR>(key: React.Key, props: RenderRowProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n","import { useLayoutEffect, useRef } from 'react';\n\nimport { scrollIntoView } from './utils';\n\nexport interface PartialPosition {\n  readonly idx?: number | undefined;\n  readonly rowIdx?: number | undefined;\n}\n\nexport default function ScrollToCell({\n  scrollToPosition: { idx, rowIdx },\n  gridRef,\n  setScrollToCellPosition\n}: {\n  scrollToPosition: PartialPosition;\n  gridRef: React.RefObject<HTMLDivElement | null>;\n  setScrollToCellPosition: (cell: null) => void;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // scroll until the cell is completely visible\n    // this is needed if the grid has auto-sized columns\n    // setting the behavior to auto so it can be overridden\n    scrollIntoView(ref.current, 'auto');\n  });\n\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridRef.current!,\n      threshold: 1.0\n    });\n\n    observer.observe(ref.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridRef, setScrollToCellPosition]);\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        gridColumn: idx === undefined ? '1/-1' : idx + 1,\n        gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n      }}\n    />\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderSortIconProps, RenderSortPriorityProps, RenderSortStatusProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function renderSortStatus({ sortDirection, priority }: RenderSortStatusProps) {\n  return (\n    <>\n      {renderSortIcon({ sortDirection })}\n      {renderSortPriority({ priority })}\n    </>\n  );\n}\n\nexport function renderSortIcon({ sortDirection }: RenderSortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function renderSortPriority({ priority }: RenderSortPriorityProps) {\n  return priority;\n}\n","import { css } from '@linaria/core';\n\nimport { cell } from './cell';\nimport { bottomSummaryRowClassname, row, topSummaryRowClassname } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 90.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 17.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n`;\n\nconst root = css`\n  @layer rdg.Defaults {\n    *,\n    *::before,\n    *::after {\n      box-sizing: inherit;\n    }\n  }\n\n  @layer rdg.Root {\n    ${lightTheme}\n    --rdg-selection-width: 2px;\n    --rdg-selection-color: hsl(207, 75%, 66%);\n    --rdg-font-size: 14px;\n    --rdg-cell-frozen-box-shadow: 2px 0 5px -2px rgba(136, 136, 136, 0.3);\n    --rdg-border-width: 1px;\n    --rdg-summary-border-width: calc(var(--rdg-border-width) * 2);\n\n    &:dir(rtl) {\n      --rdg-cell-frozen-box-shadow: -2px 0 5px -2px rgba(136, 136, 136, 0.3);\n    }\n\n    display: grid;\n\n    color-scheme: var(--rdg-color-scheme, light dark);\n    accent-color: light-dark(hsl(207deg 100% 29%), hsl(207deg 100% 79%));\n\n    /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n    /* We set a stacking context so internal elements don't render on top of external elements. */\n    /* size containment is not used as it could break \"width: min-content\" for example, and the grid would infinitely resize on Chromium browsers */\n    contain: content;\n    content-visibility: auto;\n    block-size: 350px;\n    border: 1px solid var(--rdg-border-color);\n    box-sizing: border-box;\n    overflow: auto;\n    background-color: var(--rdg-background-color);\n    color: var(--rdg-color);\n    font-size: var(--rdg-font-size);\n\n    /* needed on Firefox to fix scrollbars */\n    &::before {\n      content: '';\n      grid-column: 1/-1;\n      grid-row: 1/-1;\n    }\n\n    &.rdg-dark {\n      --rdg-color-scheme: dark;\n      ${darkTheme}\n    }\n\n    &.rdg-light {\n      --rdg-color-scheme: light;\n    }\n\n    @media (prefers-color-scheme: dark) {\n      &:not(.rdg-light) {\n        ${darkTheme}\n      }\n    }\n\n    > :nth-last-child(1 of .${topSummaryRowClassname}) {\n      > .${cell} {\n        border-block-end: var(--rdg-summary-border-width) solid var(--rdg-summary-border-color);\n      }\n    }\n\n    > :nth-child(1 of .${bottomSummaryRowClassname}) {\n      > .${cell} {\n        border-block-start: var(--rdg-summary-border-width) solid var(--rdg-summary-border-color);\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 1 to show up above regular frozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const focusSinkHeaderAndSummaryClassname = css`\n  @layer rdg.FocusSink {\n    /* Should have a higher value than 3 to show up above header and summary rows */\n    z-index: 3;\n  }\n`;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CellRendererProps } from './types';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<\n  CellRendererProps<R, SR>,\n  'rowIdx' | 'column' | 'colSpan' | 'isCellSelected' | 'selectCell'\n>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onMouseDown() {\n    selectCell({ rowIdx, idx: column.idx });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onMouseDown={onMouseDown}\n      onFocus={onFocus}\n    >\n      {column.renderSummaryCell?.({ column, row, tabIndex: childTabIndex })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => React.JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { RenderRowProps } from './types';\nimport { cell, cellFrozen } from './style/cell';\nimport {\n  bottomSummaryRowClassname,\n  rowClassname,\n  rowSelectedClassname,\n  topSummaryRowClassname\n} from './style/row';\nimport SummaryCell from './SummaryCell';\n\ntype SharedRenderRowProps<R, SR> = Pick<\n  RenderRowProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart' | 'selectCell'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRenderRowProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  isTop: boolean;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 2;\n    }\n\n    > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [`${topSummaryRowClassname} ${topSummaryRow}`]: isTop,\n          [bottomSummaryRowClassname]: !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => React.JSX.Element;\n","import {\n  useCallback,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\nimport type { Key, KeyboardEvent } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  HeaderRowSelectionChangeContext,\n  HeaderRowSelectionContext,\n  RowSelectionChangeContext,\n  useCalculatedColumns,\n  useColumnWidths,\n  useGridDimensions,\n  useLatestFunc,\n  useViewportColumns,\n  useViewportRows,\n  type HeaderRowSelectionContextValue\n} from './hooks';\nimport {\n  abs,\n  assertIsValidKeyGetter,\n  canExitGrid,\n  createCellEvent,\n  getCellStyle,\n  getColSpan,\n  getLeftRightKey,\n  getNextSelectedCellPosition,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  isSelectedCellEditable,\n  renderMeasuringCells,\n  scrollIntoView,\n  sign\n} from './utils';\nimport type {\n  CalculatedColumn,\n  CellClipboardEvent,\n  CellCopyArgs,\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  CellMouseEventHandler,\n  CellNavigationMode,\n  CellPasteArgs,\n  CellSelectArgs,\n  Column,\n  ColumnOrColumnGroup,\n  ColumnWidths,\n  Direction,\n  FillEvent,\n  Maybe,\n  Position,\n  Renderers,\n  RowsChangeData,\n  SelectCellOptions,\n  SelectHeaderRowEvent,\n  SelectRowEvent,\n  SortColumn\n} from './types';\nimport { defaultRenderCell } from './Cell';\nimport { renderCheckbox as defaultRenderCheckbox } from './cellRenderers';\nimport {\n  DataGridDefaultRenderersContext,\n  useDefaultRenderers\n} from './DataGridDefaultRenderersContext';\nimport EditCell from './EditCell';\nimport GroupedColumnHeaderRow from './GroupedColumnHeaderRow';\nimport HeaderRow from './HeaderRow';\nimport { defaultRenderRow } from './Row';\nimport type { PartialPosition } from './ScrollToCell';\nimport ScrollToCell from './ScrollToCell';\nimport { default as defaultRenderSortStatus } from './sortStatus';\nimport { cellDragHandleClassname, cellDragHandleFrozenClassname } from './style/cell';\nimport {\n  focusSinkClassname,\n  focusSinkHeaderAndSummaryClassname,\n  rootClassname,\n  viewportDraggingClassname\n} from './style/core';\nimport { rowSelected, rowSelectedWithFrozenCell } from './style/row';\nimport SummaryRow from './SummaryRow';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\nexport type DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  | 'renderCell'\n  | 'renderHeaderCell'\n  | 'width'\n  | 'minWidth'\n  | 'maxWidth'\n  | 'resizable'\n  | 'sortable'\n  | 'draggable'\n>;\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToCell: (position: PartialPosition) => void;\n  selectCell: (position: Position, options?: SelectCellOptions) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.ComponentProps<'div'>,\n  | 'role'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-description'\n  | 'aria-describedby'\n  | 'aria-rowcount'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  ref?: Maybe<React.Ref<DataGridHandle>>;\n  /**\n   * Grid and data Props\n   */\n  /** An array of column definitions */\n  columns: readonly ColumnOrColumnGroup<NoInfer<R>, NoInfer<SR>>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /** Rows pinned at the top of the grid for summary purposes */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /** Rows pinned at the bottom of the grid for summary purposes */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** Function to return a unique key/identifier for each row */\n  rowKeyGetter?: Maybe<(row: NoInfer<R>) => K>;\n  /** Callback triggered when rows are changed */\n  onRowsChange?: Maybe<(rows: NoInfer<R>[], data: RowsChangeData<NoInfer<R>, NoInfer<SR>>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * Height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((row: NoInfer<R>) => number)>;\n  /**\n   * Height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * Height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n  /** A map of column widths */\n  columnWidths?: Maybe<ColumnWidths>;\n  /** Callback triggered when column widths change */\n  onColumnWidthsChange?: Maybe<(columnWidths: ColumnWidths) => void>;\n\n  /**\n   * Feature props\n   */\n  /** A set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function to determine if row selection is disabled for a specific row */\n  isRowSelectionDisabled?: Maybe<(row: NoInfer<R>) => boolean>;\n  /** Callback triggered when the selection changes */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<NoInfer<K>>) => void>;\n  /** An array of sorted columns */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  /** Callback triggered when sorting changes */\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  /** Default options applied to all columns */\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<NoInfer<R>, NoInfer<SR>>>;\n  onFill?: Maybe<(event: FillEvent<NoInfer<R>>) => NoInfer<R>>;\n\n  /**\n   * Event props\n   */\n  /** Callback triggered when a pointer becomes active in a cell */\n  onCellMouseDown?: CellMouseEventHandler<R, SR>;\n  /** Callback triggered when a cell is clicked */\n  onCellClick?: CellMouseEventHandler<R, SR>;\n  /** Callback triggered when a cell is double-clicked */\n  onCellDoubleClick?: CellMouseEventHandler<R, SR>;\n  /** Callback triggered when a cell is right-clicked */\n  onCellContextMenu?: CellMouseEventHandler<R, SR>;\n  /** Callback triggered when a key is pressed in a cell */\n  onCellKeyDown?: Maybe<\n    (args: CellKeyDownArgs<NoInfer<R>, NoInfer<SR>>, event: CellKeyboardEvent) => void\n  >;\n  /** Callback triggered when a cell's content is copied */\n  onCellCopy?: Maybe<\n    (args: CellCopyArgs<NoInfer<R>, NoInfer<SR>>, event: CellClipboardEvent) => void\n  >;\n  /** Callback triggered when content is pasted into a cell */\n  onCellPaste?: Maybe<\n    (args: CellPasteArgs<NoInfer<R>, NoInfer<SR>>, event: CellClipboardEvent) => NoInfer<R>\n  >;\n  /** Function called whenever cell selection is changed */\n  onSelectedCellChange?: Maybe<(args: CellSelectArgs<NoInfer<R>, NoInfer<SR>>) => void>;\n  /** Callback triggered when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Callback triggered when column is resized */\n  onColumnResize?: Maybe<(column: CalculatedColumn<R, SR>, width: number) => void>;\n  /** Callback triggered when columns are reordered */\n  onColumnsReorder?: Maybe<(sourceColumnKey: string, targetColumnKey: string) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  /** Custom renderers for cells, rows, and other components */\n  renderers?: Maybe<Renderers<NoInfer<R>, NoInfer<SR>>>;\n  /** Function to apply custom class names to rows */\n  rowClass?: Maybe<(row: NoInfer<R>, rowIdx: number) => Maybe<string>>;\n  /** Custom class name for the header row */\n  headerRowClass?: Maybe<string>;\n  /**\n   * Text direction of the grid ('ltr' or 'rtl')\n   * @default 'ltr'\n   * */\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n  'data-cy'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nexport function DataGrid<R, SR = unknown, K extends Key = Key>(props: DataGridProps<R, SR, K>) {\n  const {\n    ref,\n    // Grid and data Props\n    columns: rawColumns,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    columnWidths: columnWidthsRaw,\n    onColumnWidthsChange: onColumnWidthsChangeRaw,\n    // Feature props\n    selectedRows,\n    isRowSelectionDisabled,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    // Event props\n    onCellMouseDown,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onSelectedCellChange,\n    onScroll,\n    onColumnResize,\n    onColumnsReorder,\n    onFill,\n    onCellCopy,\n    onCellPaste,\n    // Toggles and modes\n    enableVirtualization: rawEnableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    headerRowClass,\n    direction: rawDirection,\n    // ARIA\n    role: rawRole,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-description': ariaDescription,\n    'aria-describedby': ariaDescribedBy,\n    'aria-rowcount': rawAriaRowCount,\n    'data-testid': testId,\n    'data-cy': dataCy\n  } = props;\n\n  /**\n   * defaults\n   */\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const role = rawRole ?? 'grid';\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const renderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const renderCell = renderers?.renderCell ?? defaultRenderers?.renderCell ?? defaultRenderCell;\n  const renderSortStatus =\n    renderers?.renderSortStatus ?? defaultRenderers?.renderSortStatus ?? defaultRenderSortStatus;\n  const renderCheckbox =\n    renderers?.renderCheckbox ?? defaultRenderers?.renderCheckbox ?? defaultRenderCheckbox;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidthsInternal, setColumnWidthsInternal] = useState(\n    (): ColumnWidths => columnWidthsRaw ?? new Map()\n  );\n  const [isColumnResizing, setColumnResizing] = useState(false);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setDraggedOverRowIdx] = useState<number | undefined>(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState<PartialPosition | null>(null);\n  const [shouldFocusCell, setShouldFocusCell] = useState(false);\n  const [previousRowIdx, setPreviousRowIdx] = useState(-1);\n\n  const isColumnWidthsControlled =\n    columnWidthsRaw != null && onColumnWidthsChangeRaw != null && !isColumnResizing;\n  const columnWidths = isColumnWidthsControlled ? columnWidthsRaw : columnWidthsInternal;\n  const onColumnWidthsChange = isColumnWidthsControlled\n    ? (columnWidths: ColumnWidths) => {\n        // we keep the internal state in sync with the prop but this prevents an extra render\n        setColumnWidthsInternal(columnWidths);\n        onColumnWidthsChangeRaw(columnWidths);\n      }\n    : setColumnWidthsInternal;\n\n  const getColumnWidth = useCallback(\n    (column: CalculatedColumn<R, SR>) => {\n      return columnWidths.get(column.key)?.width ?? column.width;\n    },\n    [columnWidths]\n  );\n\n  const [gridRef, gridWidth, gridHeight, horizontalScrollbarHeight] = useGridDimensions();\n  const {\n    columns,\n    colSpanColumns,\n    lastFrozenColumnIndex,\n    headerRowsCount,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    totalFrozenColumnWidth\n  } = useCalculatedColumns({\n    rawColumns,\n    defaultColumnOptions,\n    getColumnWidth,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    enableVirtualization\n  });\n\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const groupedColumnHeaderRowsCount = headerRowsCount - 1;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n  const mainHeaderRowIdx = minRowIdx + groupedColumnHeaderRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n\n  const [selectedPosition, setSelectedPosition] = useState(\n    (): SelectCellState | EditCellState<R> => ({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' })\n  );\n\n  /**\n   * refs\n   */\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n\n  /**\n   * computed values\n   */\n  const isTreeGrid = role === 'treegrid';\n  const headerRowsHeight = headerRowsCount * headerRowHeight;\n  const summaryRowsHeight = summaryRowsCount * summaryRowHeight;\n  const clientHeight = gridHeight - headerRowsHeight - summaryRowsHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const { leftKey, rightKey } = getLeftRightKey(direction);\n  const ariaRowCount = rawAriaRowCount ?? headerRowsCount + rows.length + summaryRowsCount;\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      renderCheckbox,\n      renderSortStatus,\n      renderCell\n    }),\n    [renderCheckbox, renderSortStatus, renderCell]\n  );\n\n  const headerSelectionValue = useMemo((): HeaderRowSelectionContextValue => {\n    // no rows to select = explicitely unchecked\n    let hasSelectedRow = false;\n    let hasUnselectedRow = false;\n\n    if (rowKeyGetter != null && selectedRows != null && selectedRows.size > 0) {\n      for (const row of rows) {\n        if (selectedRows.has(rowKeyGetter(row))) {\n          hasSelectedRow = true;\n        } else {\n          hasUnselectedRow = true;\n        }\n\n        if (hasSelectedRow && hasUnselectedRow) break;\n      }\n    }\n\n    return {\n      isRowSelected: hasSelectedRow && !hasUnselectedRow,\n      isIndeterminate: hasSelectedRow && hasUnselectedRow\n    };\n  }, [rows, selectedRows, rowKeyGetter]);\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rows,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows\n  });\n\n  const { gridTemplateColumns, handleColumnResize } = useColumnWidths(\n    columns,\n    viewportColumns,\n    templateColumns,\n    gridRef,\n    gridWidth,\n    columnWidths,\n    onColumnWidthsChange,\n    onColumnResize,\n    setColumnResizing\n  );\n\n  const minColIdx = isTreeGrid ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n  const scrollHeight =\n    headerRowHeight + totalRowHeight + summaryRowsHeight + horizontalScrollbarHeight;\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const handleColumnResizeEndLatest = useLatestFunc(handleColumnResizeEnd);\n  const onColumnsReorderLastest = useLatestFunc(onColumnsReorder);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellMouseDownLatest = useLatestFunc(onCellMouseDown);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectHeaderRowLatest = useLatestFunc(selectHeaderRow);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectHeaderCellLatest = useLatestFunc(selectHeaderCell);\n\n  /**\n   * callbacks\n   */\n  const focusCell = useCallback(\n    (shouldScroll = true) => {\n      const cell = getCellToScroll(gridRef.current!);\n      if (cell === null) return;\n\n      if (shouldScroll) {\n        scrollIntoView(cell);\n      }\n\n      cell.focus({ preventScroll: true });\n    },\n    [gridRef]\n  );\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (shouldFocusCell) {\n      if (focusSinkRef.current !== null && selectedPosition.idx === -1) {\n        focusSinkRef.current.focus({ preventScroll: true });\n        scrollIntoView(focusSinkRef.current);\n      } else {\n        focusCell();\n      }\n      setShouldFocusCell(false);\n    }\n  }, [shouldFocusCell, focusCell, selectedPosition.idx]);\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToCell({ idx, rowIdx }) {\n      const scrollToIdx =\n        idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx =\n        rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({ idx: scrollToIdx, rowIdx: scrollToRowIdx });\n      }\n    },\n    selectCell\n  }));\n\n  /**\n   * event handlers\n   */\n  function selectHeaderRow(args: SelectHeaderRowEvent) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n\n    const newSelectedRows = new Set(selectedRows);\n    for (const row of rows) {\n      if (isRowSelectionDisabled?.(row) === true) continue;\n      const rowKey = rowKeyGetter(row);\n      if (args.checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectRow(args: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const { row, checked, isShiftClick } = args;\n    if (isRowSelectionDisabled?.(row) === true) return;\n    const newSelectedRows = new Set(selectedRows);\n    const rowKey = rowKeyGetter(row);\n    const rowIdx = rows.indexOf(row);\n    setPreviousRowIdx(rowIdx);\n\n    if (checked) {\n      newSelectedRows.add(rowKey);\n    } else {\n      newSelectedRows.delete(rowKey);\n    }\n\n    if (\n      isShiftClick &&\n      previousRowIdx !== -1 &&\n      previousRowIdx !== rowIdx &&\n      previousRowIdx < rows.length\n    ) {\n      const step = sign(rowIdx - previousRowIdx);\n      for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n        const row = rows[i];\n        if (isRowSelectionDisabled?.(row) === true) continue;\n        if (checked) {\n          newSelectedRows.add(rowKeyGetter(row));\n        } else {\n          newSelectedRows.delete(rowKeyGetter(row));\n        }\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function handleKeyDown(event: KeyboardEvent<HTMLDivElement>) {\n    const { idx, rowIdx, mode } = selectedPosition;\n    if (mode === 'EDIT') return;\n\n    if (onCellKeyDown && isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown(\n        {\n          mode: 'SELECT',\n          row,\n          column: columns[idx],\n          rowIdx,\n          selectCell\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = isTreeGrid && event.target === focusSinkRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    switch (event.key) {\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    if (row === rows[rowIdx]) return;\n    const updatedRows = rows.with(rowIdx, row);\n    onRowsChange(updatedRows, {\n      indexes: [rowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCellCopy(event: CellClipboardEvent) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const { idx, rowIdx } = selectedPosition;\n    onCellCopy?.({ row: rows[rowIdx], column: columns[idx] }, event);\n  }\n\n  function handleCellPaste(event: CellClipboardEvent) {\n    if (!onCellPaste || !onRowsChange || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const updatedRow = onCellPaste({ row: rows[rowIdx], column }, event);\n    updateRow(column, rowIdx, updatedRow);\n  }\n\n  function handleCellInput(event: KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // prevent scrolling\n      event.preventDefault();\n      return;\n    }\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event, onCellPaste != null)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  function handleColumnResizeEnd() {\n    // This check is needed as double click on the resize handle triggers onPointerMove\n    if (isColumnResizing) {\n      onColumnWidthsChangeRaw?.(columnWidths);\n      setColumnResizing(false);\n    }\n  }\n\n  function handleDragHandlePointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    // keep the focus on the cell\n    event.preventDefault();\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n    setDragging(true);\n    event.currentTarget.setPointerCapture(event.pointerId);\n  }\n\n  function handleDragHandlePointerMove(event: React.PointerEvent<HTMLDivElement>) {\n    // find dragged over row using the pointer position\n    const gridEl = gridRef.current!;\n    const headerAndTopSummaryRowsHeight = headerRowsHeight + topSummaryRowsCount * summaryRowHeight;\n    const offset =\n      scrollTop -\n      headerAndTopSummaryRowsHeight +\n      event.clientY -\n      gridEl.getBoundingClientRect().top;\n    const overRowIdx = findRowIdx(offset);\n    setDraggedOverRowIdx(overRowIdx);\n    const ariaRowIndex = headerAndTopSummaryRowsCount + overRowIdx + 1;\n    const el = gridEl.querySelector(\n      `:scope > [aria-rowindex=\"${ariaRowIndex}\"] > [aria-colindex=\"${selectedPosition.idx + 1}\"]`\n    );\n    scrollIntoView(el);\n  }\n\n  function handleDragHandleLostPointerCapture() {\n    setDragging(false);\n    if (draggedOverRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const [startRowIndex, endRowIndex] =\n      rowIdx < draggedOverRowIdx\n        ? [rowIdx + 1, draggedOverRowIdx + 1]\n        : [draggedOverRowIdx, rowIdx];\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDragHandleClick() {\n    // keep the focus on the cell but do not scroll\n    focusCell(false);\n  }\n\n  function handleDragHandleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    if (onRowsChange == null) return;\n\n    const { rowIdx, idx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill!({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange(updatedRows, { indexes, column });\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinEditBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && idx >= 0 && idx <= maxColIdx;\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinEditBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position })\n    );\n  }\n\n  function selectCell(position: Position, options?: SelectCellOptions): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    const samePosition = isSamePosition(selectedPosition, position);\n\n    if (options?.enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx];\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (samePosition) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(getCellToScroll(gridRef.current!));\n    } else {\n      setShouldFocusCell(options?.shouldFocusCell === true);\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n\n    if (onSelectedCellChange && !samePosition) {\n      onSelectedCellChange({\n        rowIdx: position.rowIdx,\n        row: isRowIdxWithinViewportBounds(position.rowIdx) ? rows[position.rowIdx] : undefined,\n        column: columns[position.idx]\n      });\n    }\n  }\n\n  function selectHeaderCell({ idx, rowIdx }: Position): void {\n    selectCell({ rowIdx: minRowIdx + rowIdx - 1, idx });\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: minRowIdx };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: maxRowIdx };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let cellNavigationMode: CellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n\n    // prevent scrolling and do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      moveUp: key === 'ArrowUp',\n      moveNext: key === rightKey || (key === 'Tab' && !shiftKey),\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      mainHeaderRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds\n    });\n\n    selectCell(nextSelectedCellPosition, { shouldFocusCell: true });\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getDragHandle() {\n    if (\n      onFill == null ||\n      selectedPosition.mode === 'EDIT' ||\n      !isCellWithinViewportBounds(selectedPosition)\n    ) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    if (column.renderEditCell == null || column.editable === false) {\n      return;\n    }\n\n    const isLastRow = rowIdx === maxRowIdx;\n    const columnWidth = getColumnWidth(column);\n    const colSpan = column.colSpan?.({ type: 'ROW', row: rows[rowIdx] }) ?? 1;\n    const { insetInlineStart, ...style } = getCellStyle(column, colSpan);\n    const marginEnd = 'calc(var(--rdg-drag-handle-size) * -0.5 + 1px)';\n    const isLastColumn = column.idx + colSpan - 1 === maxColIdx;\n    const dragHandleStyle: React.CSSProperties = {\n      ...style,\n      gridRowStart: headerAndTopSummaryRowsCount + rowIdx + 1,\n      marginInlineEnd: isLastColumn ? undefined : marginEnd,\n      marginBlockEnd: isLastRow ? undefined : marginEnd,\n      insetInlineStart: insetInlineStart\n        ? `calc(${insetInlineStart} + ${columnWidth}px + var(--rdg-drag-handle-size) * -0.5 - 1px)`\n        : undefined\n    };\n\n    return (\n      <div\n        style={dragHandleStyle}\n        className={clsx(cellDragHandleClassname, column.frozen && cellDragHandleFrozenClassname)}\n        onPointerDown={handleDragHandlePointerDown}\n        onPointerMove={isDragging ? handleDragHandlePointerMove : undefined}\n        onLostPointerCapture={isDragging ? handleDragHandleLostPointerCapture : undefined}\n        onClick={handleDragHandleClick}\n        onDoubleClick={handleDragHandleDoubleClick}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    const closeOnExternalRowChange = column.editorOptions?.closeOnExternalRowChange ?? true;\n\n    const closeEditor = (shouldFocusCell: boolean) => {\n      setShouldFocusCell(shouldFocusCell);\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges: boolean, shouldFocusCell: boolean) => {\n      if (commitChanges) {\n        // Prevents two issues when editor is closed by clicking on a different cell\n        //\n        // Otherwise commitEditorChanges may be called before the cell state is changed to\n        // SELECT and this results in onRowChange getting called twice.\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor(shouldFocusCell);\n        });\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (\n      closeOnExternalRowChange &&\n      rows[selectedPosition.rowIdx] !== selectedPosition.originalRow\n    ) {\n      // Discard changes if rows are updated from outside\n      closeEditor(false);\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        onKeyDown={onCellKeyDown}\n        navigate={navigate}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    // idx can be -1 if grouping is enabled\n    const selectedColumn = selectedPosition.idx === -1 ? undefined : columns[selectedPosition.idx];\n    if (\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = selectedIdx === -1 ? undefined : columns[selectedIdx];\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      let key: K | number = rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n\n      rowElements.push(\n        renderRow(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex': headerAndTopSummaryRowsCount + rowIdx + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelectionDisabled: isRowSelectionDisabled?.(row) ?? false,\n          isRowSelected,\n          onCellMouseDown: onCellMouseDownLatest,\n          onCellClick: onCellClickLatest,\n          onCellDoubleClick: onCellDoubleClickLatest,\n          onCellContextMenu: onCellContextMenuLatest,\n          rowClass,\n          gridRowStart,\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectCellLatest,\n          selectedCellEditor: getCellEditor(rowIdx)\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  // Keep the state and prop in sync\n  if (isColumnWidthsControlled && columnWidthsInternal !== columnWidthsRaw) {\n    setColumnWidthsInternal(columnWidthsRaw);\n  }\n\n  let templateRows = `repeat(${headerRowsCount}, ${headerRowHeight}px)`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused =\n    selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n\n  return (\n    <div\n      role={role}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-description={ariaDescription}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={ariaRowCount}\n      // Scrollable containers without tabIndex are keyboard focusable in Chrome only if there is no focusable element inside\n      // whereas they are always focusable in Firefox. We need to set tabIndex to have a consistent behavior across browsers.\n      tabIndex={-1}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            isRowIdxWithinViewportBounds(selectedPosition.rowIdx) ||\n            scrollToPosition?.rowIdx !== undefined\n              ? `${headerRowsHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateColumns,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-scroll-height': `${scrollHeight}px`,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      onCopy={handleCellCopy}\n      onPaste={handleCellPaste}\n      data-testid={testId}\n      data-cy={dataCy}\n    >\n      <DataGridDefaultRenderersContext value={defaultGridComponents}>\n        <HeaderRowSelectionChangeContext value={selectHeaderRowLatest}>\n          <HeaderRowSelectionContext value={headerSelectionValue}>\n            {Array.from({ length: groupedColumnHeaderRowsCount }, (_, index) => (\n              <GroupedColumnHeaderRow\n                key={index}\n                rowIdx={index + 1}\n                level={-groupedColumnHeaderRowsCount + index}\n                columns={getRowViewportColumns(minRowIdx + index)}\n                selectedCellIdx={\n                  selectedPosition.rowIdx === minRowIdx + index ? selectedPosition.idx : undefined\n                }\n                selectCell={selectHeaderCellLatest}\n              />\n            ))}\n            <HeaderRow\n              headerRowClass={headerRowClass}\n              rowIdx={headerRowsCount}\n              columns={getRowViewportColumns(mainHeaderRowIdx)}\n              onColumnResize={handleColumnResizeLatest}\n              onColumnResizeEnd={handleColumnResizeEndLatest}\n              onColumnsReorder={onColumnsReorderLastest}\n              sortColumns={sortColumns}\n              onSortColumnsChange={onSortColumnsChangeLatest}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n              selectedCellIdx={\n                selectedPosition.rowIdx === mainHeaderRowIdx ? selectedPosition.idx : undefined\n              }\n              selectCell={selectHeaderCellLatest}\n              shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n              direction={direction}\n            />\n          </HeaderRowSelectionContext>\n        </HeaderRowSelectionChangeContext>\n        {rows.length === 0 && noRowsFallback ? (\n          noRowsFallback\n        ) : (\n          <>\n            {topSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + 1 + rowIdx;\n              const summaryRowIdx = mainHeaderRowIdx + 1 + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top = headerRowsHeight + summaryRowHeight * rowIdx;\n\n              return (\n                <SummaryRow\n                  key={rowIdx}\n                  aria-rowindex={gridRowStart}\n                  rowIdx={summaryRowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={undefined}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  isTop\n                  selectCell={selectCellLatest}\n                />\n              );\n            })}\n            <RowSelectionChangeContext value={selectRowLatest}>\n              {getViewportRows()}\n            </RowSelectionChangeContext>\n            {bottomSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n              const summaryRowIdx = rows.length + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top =\n                clientHeight > totalRowHeight\n                  ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                  : undefined;\n              const bottom =\n                top === undefined\n                  ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                  : undefined;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={ariaRowCount - bottomSummaryRowsCount + rowIdx + 1}\n                  key={rowIdx}\n                  rowIdx={summaryRowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={bottom}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  isTop={false}\n                  selectCell={selectCellLatest}\n                />\n              );\n            })}\n          </>\n        )}\n      </DataGridDefaultRenderersContext>\n\n      {getDragHandle()}\n\n      {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n      {renderMeasuringCells(viewportColumns)}\n\n      {/* extra div is needed for row navigation in a treegrid */}\n      {isTreeGrid && (\n        <div\n          ref={focusSinkRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [focusSinkHeaderAndSummaryClassname]: !isRowIdxWithinViewportBounds(\n              selectedPosition.rowIdx\n            ),\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n          }}\n        />\n      )}\n\n      {scrollToPosition !== null && (\n        <ScrollToCell\n          scrollToPosition={scrollToPosition}\n          setScrollToCellPosition={setScrollToPosition}\n          gridRef={gridRef}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction getCellToScroll(gridEl: HTMLDivElement) {\n  return gridEl.querySelector<HTMLDivElement>(':scope > [role=\"row\"] > [tabindex=\"0\"]');\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n"],"x_google_ignoreList":[0],"mappings":"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"}