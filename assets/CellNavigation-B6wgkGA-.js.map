{"version":3,"file":"CellNavigation-B6wgkGA-.js","names":["useId","useState","DataGrid","CellKeyboardEvent","CellKeyDownArgs","Column","useDirection","Route","Row","id","task","complete","priority","issueType","startDate","completeDate","CellNavigationMode","columns","key","name","width","getRandomDate","start","Date","end","getTime","Math","random","toLocaleDateString","createRows","rows","i","push","min","round","floor","CellNavigation","groupId","direction","cellNavigationMode","setCellNavigationMode","handleCellKeyDown","args","event","mode","column","rowIdx","selectCell","idx","shiftKey","preventDefault","preventGridDefault","loopOverNavigation","length","changeRowNavigation","loopOverColumnNavigation","newRowIdx","marginBlockEnd","component"],"sources":["../../website/routes/CellNavigation.tsx?tsr-split=component"],"sourcesContent":["import { useId, useState } from 'react';\n\nimport { DataGrid } from '../../src';\nimport type { CellKeyboardEvent, CellKeyDownArgs, Column } from '../../src';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createFileRoute({\n  component: CellNavigation\n});\n\ninterface Row {\n  id: number;\n  task: string;\n  complete: number;\n  priority: string;\n  issueType: string;\n  startDate: string;\n  completeDate: string;\n}\n\ntype CellNavigationMode = 'NONE' | 'CHANGE_ROW' | 'LOOP_OVER_ROW' | 'LOOP_OVER_COLUMN' | 'NO_TAB';\n\nconst columns: Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80\n  },\n  {\n    key: 'task',\n    name: 'Title'\n  },\n  {\n    key: 'priority',\n    name: 'Priority'\n  },\n  {\n    key: 'issueType',\n    name: 'Issue Type'\n  },\n  {\n    key: 'complete',\n    name: '% Complete'\n  },\n  {\n    key: 'startDate',\n    name: 'Start Date'\n  },\n  {\n    key: 'completeDate',\n    name: 'Expected Complete',\n    width: 200\n  }\n];\n\nfunction getRandomDate(start: Date, end: Date) {\n  return new Date(\n    start.getTime() + Math.random() * (end.getTime() - start.getTime())\n  ).toLocaleDateString();\n}\n\nfunction createRows(): Row[] {\n  const rows = [];\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.floor(Math.random() * 3 + 1)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.floor(Math.random() * 3 + 1)],\n      startDate: getRandomDate(new Date(2015, 3, 1), new Date()),\n      completeDate: getRandomDate(new Date(), new Date(2016, 0, 1))\n    });\n  }\n\n  return rows;\n}\n\nfunction CellNavigation() {\n  const groupId = useId();\n  const direction = useDirection();\n  const [rows] = useState(createRows);\n  const [cellNavigationMode, setCellNavigationMode] = useState<CellNavigationMode>('CHANGE_ROW');\n\n  function handleCellKeyDown(args: CellKeyDownArgs<Row>, event: CellKeyboardEvent) {\n    if (args.mode === 'EDIT') return;\n    const { column, rowIdx, selectCell } = args;\n    const { idx } = column;\n    const { key, shiftKey } = event;\n\n    const preventDefault = () => {\n      event.preventGridDefault();\n      event.preventDefault();\n    };\n\n    const loopOverNavigation = () => {\n      if ((key === 'ArrowRight' || (key === 'Tab' && !shiftKey)) && idx === columns.length - 1) {\n        selectCell({ rowIdx, idx: 0 });\n        preventDefault();\n      } else if ((key === 'ArrowLeft' || (key === 'Tab' && shiftKey)) && idx === 0) {\n        selectCell({ rowIdx, idx: columns.length - 1 });\n        preventDefault();\n      }\n    };\n\n    const changeRowNavigation = () => {\n      if (key === 'ArrowRight' && idx === columns.length - 1) {\n        if (rows.length === 0) return;\n        if (rowIdx === -1) {\n          selectCell({ rowIdx: 0, idx: 0 });\n        } else {\n          if (rowIdx === rows.length - 1) return;\n          selectCell({ rowIdx: rowIdx + 1, idx: 0 });\n        }\n        preventDefault();\n      } else if (key === 'ArrowLeft' && idx === 0) {\n        if (rowIdx === -1) return;\n        selectCell({ rowIdx: rowIdx - 1, idx: columns.length - 1 });\n        preventDefault();\n      }\n    };\n\n    const loopOverColumnNavigation = () => {\n      let newRowIdx: number;\n      if (rowIdx === -1) {\n        newRowIdx = shiftKey ? rows.length - 1 : 0;\n      } else {\n        newRowIdx = shiftKey ? rowIdx - 1 : rowIdx === rows.length - 1 ? -1 : rowIdx + 1;\n      }\n      selectCell({ rowIdx: newRowIdx, idx });\n      preventDefault();\n    };\n\n    if (cellNavigationMode === 'LOOP_OVER_ROW') {\n      loopOverNavigation();\n    } else if (cellNavigationMode === 'CHANGE_ROW') {\n      changeRowNavigation();\n    } else if (cellNavigationMode === 'LOOP_OVER_COLUMN' && key === 'Tab') {\n      loopOverColumnNavigation();\n    } else if (cellNavigationMode === 'NO_TAB' && key === 'Tab') {\n      // Need to allow default event to focus the next element\n      event.preventGridDefault();\n    }\n  }\n\n  return (\n    <>\n      <div role=\"radiogroup\" aria-labelledby={groupId} style={{ marginBlockEnd: 5 }}>\n        <span id={groupId}>Cell Navigation Modes:</span>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'NONE'}\n            onChange={() => setCellNavigationMode('NONE')}\n          />\n          None\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'CHANGE_ROW'}\n            onChange={() => setCellNavigationMode('CHANGE_ROW')}\n          />\n          Change Row\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'LOOP_OVER_ROW'}\n            onChange={() => setCellNavigationMode('LOOP_OVER_ROW')}\n          />\n          Loop Over Row\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'LOOP_OVER_COLUMN'}\n            onChange={() => setCellNavigationMode('LOOP_OVER_COLUMN')}\n          />\n          Loop Over Column\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'NO_TAB'}\n            onChange={() => setCellNavigationMode('NO_TAB')}\n          />\n          No Tab\n        </label>\n      </div>\n      <DataGrid\n        aria-label=\"Cell Navigation Example\"\n        columns={columns}\n        rows={rows}\n        direction={direction}\n        onCellKeyDown={handleCellKeyDown}\n      />\n    </>\n  );\n}\n"],"mappings":"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"}