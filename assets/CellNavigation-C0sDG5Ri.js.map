{"version":3,"file":"CellNavigation-C0sDG5Ri.js","names":["useId","useState","DataGrid","CellKeyboardEvent","CellKeyDownArgs","Column","useDirection","Route","Row","id","task","complete","priority","issueType","startDate","completeDate","CellNavigationMode","columns","key","name","width","getRandomDate","start","Date","end","getTime","Math","random","toLocaleDateString","createRows","rows","i","push","min","round","floor","SplitComponent","CellNavigation","groupId","direction","cellNavigationMode","setCellNavigationMode","handleCellKeyDown","args","event","mode","column","rowIdx","selectCell","idx","shiftKey","preventDefault","preventGridDefault","loopOverNavigation","length","changeRowNavigation","loopOverColumnNavigation","newRowIdx","marginBlockEnd","component"],"sources":["../../website/routes/CellNavigation.tsx?tsr-split=component"],"sourcesContent":["import { useId, useState } from 'react';\n\nimport { DataGrid } from '../../src';\nimport type { CellKeyboardEvent, CellKeyDownArgs, Column } from '../../src';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createFileRoute({\n  component: CellNavigation\n});\n\ninterface Row {\n  id: number;\n  task: string;\n  complete: number;\n  priority: string;\n  issueType: string;\n  startDate: string;\n  completeDate: string;\n}\n\ntype CellNavigationMode = 'NONE' | 'CHANGE_ROW' | 'LOOP_OVER_ROW' | 'LOOP_OVER_COLUMN' | 'NO_TAB';\n\nconst columns: Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80\n  },\n  {\n    key: 'task',\n    name: 'Title'\n  },\n  {\n    key: 'priority',\n    name: 'Priority'\n  },\n  {\n    key: 'issueType',\n    name: 'Issue Type'\n  },\n  {\n    key: 'complete',\n    name: '% Complete'\n  },\n  {\n    key: 'startDate',\n    name: 'Start Date'\n  },\n  {\n    key: 'completeDate',\n    name: 'Expected Complete',\n    width: 200\n  }\n];\n\nfunction getRandomDate(start: Date, end: Date) {\n  return new Date(\n    start.getTime() + Math.random() * (end.getTime() - start.getTime())\n  ).toLocaleDateString();\n}\n\nfunction createRows(): Row[] {\n  const rows = [];\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.floor(Math.random() * 3 + 1)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.floor(Math.random() * 3 + 1)],\n      startDate: getRandomDate(new Date(2015, 3, 1), new Date()),\n      completeDate: getRandomDate(new Date(), new Date(2016, 0, 1))\n    });\n  }\n\n  return rows;\n}\n\nfunction CellNavigation() {\n  const groupId = useId();\n  const direction = useDirection();\n  const [rows] = useState(createRows);\n  const [cellNavigationMode, setCellNavigationMode] = useState<CellNavigationMode>('CHANGE_ROW');\n\n  function handleCellKeyDown(args: CellKeyDownArgs<Row>, event: CellKeyboardEvent) {\n    if (args.mode === 'EDIT') return;\n    const { column, rowIdx, selectCell } = args;\n    const { idx } = column;\n    const { key, shiftKey } = event;\n\n    const preventDefault = () => {\n      event.preventGridDefault();\n      event.preventDefault();\n    };\n\n    const loopOverNavigation = () => {\n      if ((key === 'ArrowRight' || (key === 'Tab' && !shiftKey)) && idx === columns.length - 1) {\n        selectCell({ rowIdx, idx: 0 });\n        preventDefault();\n      } else if ((key === 'ArrowLeft' || (key === 'Tab' && shiftKey)) && idx === 0) {\n        selectCell({ rowIdx, idx: columns.length - 1 });\n        preventDefault();\n      }\n    };\n\n    const changeRowNavigation = () => {\n      if (key === 'ArrowRight' && idx === columns.length - 1) {\n        if (rows.length === 0) return;\n        if (rowIdx === -1) {\n          selectCell({ rowIdx: 0, idx: 0 });\n        } else {\n          if (rowIdx === rows.length - 1) return;\n          selectCell({ rowIdx: rowIdx + 1, idx: 0 });\n        }\n        preventDefault();\n      } else if (key === 'ArrowLeft' && idx === 0) {\n        if (rowIdx === -1) return;\n        selectCell({ rowIdx: rowIdx - 1, idx: columns.length - 1 });\n        preventDefault();\n      }\n    };\n\n    const loopOverColumnNavigation = () => {\n      let newRowIdx: number;\n      if (rowIdx === -1) {\n        newRowIdx = shiftKey ? rows.length - 1 : 0;\n      } else {\n        newRowIdx = shiftKey ? rowIdx - 1 : rowIdx === rows.length - 1 ? -1 : rowIdx + 1;\n      }\n      selectCell({ rowIdx: newRowIdx, idx });\n      preventDefault();\n    };\n\n    if (cellNavigationMode === 'LOOP_OVER_ROW') {\n      loopOverNavigation();\n    } else if (cellNavigationMode === 'CHANGE_ROW') {\n      changeRowNavigation();\n    } else if (cellNavigationMode === 'LOOP_OVER_COLUMN' && key === 'Tab') {\n      loopOverColumnNavigation();\n    } else if (cellNavigationMode === 'NO_TAB' && key === 'Tab') {\n      // Need to allow default event to focus the next element\n      event.preventGridDefault();\n    }\n  }\n\n  return (\n    <>\n      <div role=\"radiogroup\" aria-labelledby={groupId} style={{ marginBlockEnd: 5 }}>\n        <span id={groupId}>Cell Navigation Modes:</span>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'NONE'}\n            onChange={() => setCellNavigationMode('NONE')}\n          />\n          None\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'CHANGE_ROW'}\n            onChange={() => setCellNavigationMode('CHANGE_ROW')}\n          />\n          Change Row\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'LOOP_OVER_ROW'}\n            onChange={() => setCellNavigationMode('LOOP_OVER_ROW')}\n          />\n          Loop Over Row\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'LOOP_OVER_COLUMN'}\n            onChange={() => setCellNavigationMode('LOOP_OVER_COLUMN')}\n          />\n          Loop Over Column\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'NO_TAB'}\n            onChange={() => setCellNavigationMode('NO_TAB')}\n          />\n          No Tab\n        </label>\n      </div>\n      <DataGrid\n        aria-label=\"Cell Navigation Example\"\n        columns={columns}\n        rows={rows}\n        direction={direction}\n        onCellKeyDown={handleCellKeyDown}\n      />\n    </>\n  );\n}\n"],"mappings":"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"}