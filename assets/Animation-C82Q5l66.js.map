{"version":3,"file":"Animation-C82Q5l66.js","names":["useState","css","DataGrid","Column","useDirection","Route","rangeClassname","transitionClassname","Row","id","task","complete","priority","issueType","createRows","rows","i","push","Math","min","round","random","columns","key","name","width","resizable","SplitComponent","Animation","direction","rowHeight","setRowHeight","component"],"sources":["../../website/routes/Animation.tsx?tsr-split=component"],"sourcesContent":["import { useState } from 'react';\nimport { css } from '@linaria/core';\n\nimport { DataGrid } from '../../src';\nimport type { Column } from '../../src';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createFileRoute({\n  component: Animation\n});\n\nconst rangeClassname = css`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 8px;\n`;\n\nconst transitionClassname = css`\n  transition: grid-template-rows 0.5s ease;\n`;\n\ninterface Row {\n  readonly id: number;\n  readonly task: string;\n  readonly complete: number;\n  readonly priority: string;\n  readonly issueType: string;\n}\n\nfunction createRows(): Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.round(Math.random() * 3)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.round(Math.random() * 3)]\n    });\n  }\n\n  return rows;\n}\n\nconst columns: Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80\n  },\n  {\n    key: 'task',\n    name: 'Title',\n    resizable: true\n  },\n  {\n    key: 'priority',\n    name: 'Priority',\n    resizable: true\n  },\n  {\n    key: 'issueType',\n    name: 'Issue Type',\n    resizable: true\n  },\n  {\n    key: 'complete',\n    name: '% Complete',\n    resizable: true\n  }\n];\n\nconst rows = createRows();\n\nfunction Animation() {\n  const direction = useDirection();\n  const [rowHeight, setRowHeight] = useState(30);\n\n  return (\n    <>\n      <div className={rangeClassname}>\n        Row Height\n        <button type=\"button\" onClick={() => setRowHeight(30)}>\n          Small\n        </button>\n        <button type=\"button\" onClick={() => setRowHeight(60)}>\n          Medium\n        </button>\n        <button type=\"button\" onClick={() => setRowHeight(90)}>\n          Large\n        </button>\n      </div>\n      <DataGrid\n        aria-label=\"Animation Example\"\n        className={`${transitionClassname} fill-grid`}\n        columns={columns}\n        rows={rows}\n        direction={direction}\n        rowHeight={rowHeight}\n      />\n    </>\n  );\n}\n"],"mappings":"8HAWA,MAAMM,EAAAA,WAOAC,EAAAA,WAYN,SAASO,GAAoB,CAC3B,IAAMC,EAAc,CAAE,EAEtB,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,IACvBD,EAAKE,KAAK,CACRR,GAAIO,EACJN,KAAM,CAAA,KAAA,EAAQM,GAAG,CACjBL,SAAUO,KAAKC,IAAI,IAAKD,KAAKE,MAAMF,KAAKG,QAAQ,CAAG,IAAI,CAAC,CACxDT,SAAU,CAAC,WAAY,OAAQ,SAAU,KAAM,EAACM,KAAKE,MAAMF,KAAKG,QAAQ,CAAG,EAAE,EAC7ER,UAAW,CAAC,MAAO,cAAe,OAAQ,OAAQ,EAACK,KAAKE,MAAMF,KAAKG,QAAQ,CAAG,EAAE,CACjF,EAAC,CAGJ,OAAON,CACT,CAEA,MAAMO,EAAyB,CAC7B,CACEC,IAAK,KACLC,KAAM,KACNC,MAAO,EACR,EACD,CACEF,IAAK,OACLC,KAAM,QACNE,UAAW,EACZ,EACD,CACEH,IAAK,WACLC,KAAM,WACNE,UAAW,EACZ,EACD,CACEH,IAAK,YACLC,KAAM,aACNE,UAAW,EACZ,EACD,CACEH,IAAK,WACLC,KAAM,aACNE,UAAW,EACZ,CACF,EAEKX,EAAOD,GAAY,CAACa,EAAA,UAEL,CACnB,IAAME,EAAYzB,GAAc,CAC1B,CAAC0B,EAAWC,EAAa,EAAA,EAAA,EAAA,UAAY,GAAG,CAE9C,OAAA,EAAA,EAAA,MAAA,EAAA,SAAA,CAAA,SAAA,EAAA,EAAA,EAAA,MAEK,MAAA,CAAI,UAAWzB,YAAe,uBAE5B,SAAA,CAAO,KAAK,SAAS,QAAS,IAAMyB,EAAa,GAAG,UAAC,SAE9C,WACP,SAAA,CAAO,KAAK,SAAS,QAAS,IAAMA,EAAa,GAAG,UAAC,UAE9C,WACP,SAAA,CAAO,KAAK,SAAS,QAAS,IAAMA,EAAa,GAAG,UAAC,SAE9C,GACL,EAAA,EAAA,EAAA,KACJ,EAAA,CACC,aAAW,oBACX,UAAW,GAAGxB,EAAAA,UAAAA,CAA+B,CACpCe,UACHP,OACKc,YACAC,aAAU,CAAA,EAEtB,AAEN"}