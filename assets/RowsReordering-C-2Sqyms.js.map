{"version":3,"file":"RowsReordering-C-2Sqyms.js","names":["event: React.DragEvent<HTMLDivElement>","event: React.DragEvent","useCallback","useState","DataGrid","textEditor","CellRendererProps","Column","DraggableCellRenderer","useDirection","Route","Row","id","task","complete","priority","issueType","createRows","rows","i","push","Math","min","round","random","columns","key","name","width","renderEditCell","SplitComponent","RowsReordering","direction","setRows","renderCell","React","Key","props","onRowReorder","fromIndex","toIndex","reorderRows","row","newRows","toSpliced","splice","document","startViewTransition","component"],"sources":["../../website/components/DraggableCellRenderer.tsx","../../website/routes/RowsReordering.tsx?tsr-split=component"],"sourcesContent":["import { useState } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { Cell, type CellRendererProps } from '../../src';\n\nconst rowDraggingClassname = css`\n  opacity: 0.5;\n`;\n\nconst rowOverClassname = css`\n  .rdg-row:has(&) {\n    background-color: #ececec;\n  }\n`;\n\ninterface DraggableCellRenderProps<R, SR> extends CellRendererProps<R, SR> {\n  onRowReorder: (sourceIndex: number, targetIndex: number) => void;\n}\n\nexport function DraggableCellRenderer<R, SR>({\n  rowIdx,\n  className,\n  onRowReorder,\n  ...props\n}: DraggableCellRenderProps<R, SR>) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [isOver, setIsOver] = useState(false);\n\n  className = clsx(className, {\n    [rowDraggingClassname]: isDragging,\n    [rowOverClassname]: isOver\n  });\n\n  function onDragStart(event: React.DragEvent<HTMLDivElement>) {\n    setIsDragging(true);\n    // TODO: use a custom drag image to show a preview of the row being dragged\n    event.dataTransfer.setDragImage(event.currentTarget.parentElement!.firstElementChild!, 40, 17);\n    event.dataTransfer.setData('text/plain', String(rowIdx));\n    event.dataTransfer.dropEffect = 'move';\n  }\n\n  function onDragEnd() {\n    setIsDragging(false);\n  }\n\n  function onDragOver(event: React.DragEvent<HTMLDivElement>) {\n    // prevent default to allow drop\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }\n\n  function onDrop(event: React.DragEvent<HTMLDivElement>) {\n    setIsOver(false);\n    // prevent the browser from redirecting in some cases\n    event.preventDefault();\n    onRowReorder(Number(event.dataTransfer.getData('text/plain')), rowIdx);\n  }\n\n  function onDragEnter(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(true);\n    }\n  }\n\n  function onDragLeave(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(false);\n    }\n  }\n\n  return (\n    <Cell\n      draggable\n      onDragStart={onDragStart}\n      onDragEnd={onDragEnd}\n      onDragOver={onDragOver}\n      onDragEnter={onDragEnter}\n      onDragLeave={onDragLeave}\n      onDrop={onDrop}\n      rowIdx={rowIdx}\n      className={className}\n      {...props}\n    />\n  );\n}\n\n// only accept pertinent drag events:\n// - ignore drag events going from the container to an element inside the container\n// - ignore drag events going from an element inside the container to the container\nfunction isEventPertinent(event: React.DragEvent) {\n  const relatedTarget = event.relatedTarget as HTMLElement | null;\n\n  return !event.currentTarget.contains(relatedTarget);\n}\n","import { useCallback, useState } from 'react';\n\nimport { DataGrid, textEditor } from '../../src';\nimport type { CellRendererProps, Column } from '../../src';\nimport { DraggableCellRenderer } from '../components';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createFileRoute({\n  component: RowsReordering\n});\n\ninterface Row {\n  id: number;\n  task: string;\n  complete: number;\n  priority: string;\n  issueType: string;\n}\n\nfunction createRows(): readonly Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.round(Math.random() * 3)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.round(Math.random() * 3)]\n    });\n  }\n\n  return rows;\n}\n\nconst columns: readonly Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80\n  },\n  {\n    key: 'task',\n    name: 'Title',\n    renderEditCell: textEditor\n  },\n  {\n    key: 'priority',\n    name: 'Priority'\n  },\n  {\n    key: 'issueType',\n    name: 'Issue Type'\n  },\n  {\n    key: 'complete',\n    name: '% Complete'\n  }\n];\n\nfunction RowsReordering() {\n  const direction = useDirection();\n  const [rows, setRows] = useState(createRows);\n\n  const renderCell = useCallback((key: React.Key, props: CellRendererProps<Row, unknown>) => {\n    function onRowReorder(fromIndex: number, toIndex: number) {\n      function reorderRows() {\n        setRows((rows) => {\n          const row = rows[fromIndex];\n          const newRows = rows.toSpliced(fromIndex, 1);\n          newRows.splice(toIndex, 0, row);\n          return newRows;\n        });\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (document.startViewTransition) {\n        document.startViewTransition(reorderRows);\n      } else {\n        reorderRows();\n      }\n    }\n\n    return <DraggableCellRenderer key={key} {...props} onRowReorder={onRowReorder} />;\n  }, []);\n\n  return (\n    <DataGrid\n      aria-label=\"Rows Reordering Example\"\n      columns={columns}\n      rows={rows}\n      onRowsChange={setRows}\n      renderers={{ renderCell }}\n      direction={direction}\n    />\n  );\n}\n"],"mappings":"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"}