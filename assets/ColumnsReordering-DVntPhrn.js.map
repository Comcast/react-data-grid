{"version":3,"file":"ColumnsReordering-DVntPhrn.js","names":["useCallback","useMemo","useState","DataGrid","Column","ColumnWidths","SortColumn","startViewTransition","useDirection","Route","Row","id","task","complete","priority","issueType","createRows","rows","i","push","Math","min","round","random","columns","key","name","width","resizable","sortable","draggable","initialColumnsOrder","map","_","index","SplitComponent","ColumnsReordering","direction","columnsOrder","setColumnsOrder","sortColumns","setSortColumns","onSortColumnsChange","slice","columnWidths","setColumnWidths","Map","reorderedColumns","sortedRows","length","columnKey","sort","a","b","localeCompare","reverse","onColumnsReorder","sourceKey","targetKey","reorderColumns","sourceColumnOrderIndex","findIndex","targetColumnOrderIndex","sourceColumnOrder","newColumnsOrder","toSpliced","splice","resetOrderAndWidths","marginBottom","component"],"sources":["../../website/routes/ColumnsReordering.tsx?tsr-split=component"],"sourcesContent":["import { useCallback, useMemo, useState } from 'react';\n\nimport { DataGrid } from '../../src';\nimport type { Column, ColumnWidths, SortColumn } from '../../src';\nimport { startViewTransition } from '../utils';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createFileRoute({\n  component: ColumnsReordering\n});\n\ninterface Row {\n  readonly id: number;\n  readonly task: string;\n  readonly complete: number;\n  readonly priority: string;\n  readonly issueType: string;\n}\n\nfunction createRows(): Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.round(Math.random() * 3)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.round(Math.random() * 3)]\n    });\n  }\n\n  return rows;\n}\n\nconst columns: Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80\n  },\n  {\n    key: 'task',\n    name: 'Title',\n    resizable: true,\n    sortable: true,\n    draggable: true\n  },\n  {\n    key: 'priority',\n    name: 'Priority',\n    resizable: true,\n    sortable: true,\n    draggable: true\n  },\n  {\n    key: 'issueType',\n    name: 'Issue Type',\n    resizable: true,\n    sortable: true,\n    draggable: true\n  },\n  {\n    key: 'complete',\n    name: '% Complete',\n    resizable: true,\n    sortable: true,\n    draggable: true\n  }\n];\n\nconst initialColumnsOrder: readonly number[] = columns.map((_, index) => index);\n\nfunction ColumnsReordering() {\n  const direction = useDirection();\n  const [rows] = useState(createRows);\n  const [columnsOrder, setColumnsOrder] = useState(initialColumnsOrder);\n  const [sortColumns, setSortColumns] = useState<readonly SortColumn[]>([]);\n  const onSortColumnsChange = useCallback((sortColumns: SortColumn[]) => {\n    setSortColumns(sortColumns.slice(-1));\n  }, []);\n  const [columnWidths, setColumnWidths] = useState((): ColumnWidths => new Map());\n\n  const reorderedColumns = useMemo(() => {\n    return columnsOrder.map((index) => columns[index]);\n  }, [columnsOrder]);\n\n  const sortedRows = useMemo((): readonly Row[] => {\n    if (sortColumns.length === 0) return rows;\n    const { columnKey, direction } = sortColumns[0];\n\n    let sortedRows: Row[] = [...rows];\n\n    switch (columnKey) {\n      case 'task':\n      case 'priority':\n      case 'issueType':\n        sortedRows = sortedRows.sort((a, b) => a[columnKey].localeCompare(b[columnKey]));\n        break;\n      case 'complete':\n        sortedRows = sortedRows.sort((a, b) => a[columnKey] - b[columnKey]);\n        break;\n      default:\n    }\n    return direction === 'DESC' ? sortedRows.reverse() : sortedRows;\n  }, [rows, sortColumns]);\n\n  function onColumnsReorder(sourceKey: string, targetKey: string) {\n    function reorderColumns() {\n      setColumnsOrder((columnsOrder) => {\n        const sourceColumnOrderIndex = columnsOrder.findIndex(\n          (index) => columns[index].key === sourceKey\n        );\n        const targetColumnOrderIndex = columnsOrder.findIndex(\n          (index) => columns[index].key === targetKey\n        );\n        const sourceColumnOrder = columnsOrder[sourceColumnOrderIndex];\n        const newColumnsOrder = columnsOrder.toSpliced(sourceColumnOrderIndex, 1);\n        newColumnsOrder.splice(targetColumnOrderIndex, 0, sourceColumnOrder);\n        return newColumnsOrder;\n      });\n    }\n\n    startViewTransition(reorderColumns);\n  }\n\n  function resetOrderAndWidths() {\n    setColumnsOrder(initialColumnsOrder);\n    setColumnWidths(new Map());\n  }\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        onClick={resetOrderAndWidths}\n        style={{\n          width: 150,\n          marginBottom: 16\n        }}\n      >\n        Reset Columns\n      </button>\n      <DataGrid\n        aria-label=\"Columns Reordering Example\"\n        columns={reorderedColumns}\n        rows={sortedRows}\n        sortColumns={sortColumns}\n        onSortColumnsChange={onSortColumnsChange}\n        direction={direction}\n        defaultColumnOptions={{ width: '1fr' }}\n        onColumnsReorder={onColumnsReorder}\n        columnWidths={columnWidths}\n        onColumnWidthsChange={setColumnWidths}\n      />\n    </>\n  );\n}\n"],"mappings":"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"}