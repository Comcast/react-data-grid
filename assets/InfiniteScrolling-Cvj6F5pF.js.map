{"version":3,"file":"InfiniteScrolling-Cvj6F5pF.js","names":["useState","faker","css","DataGrid","Column","useDirection","Route","loadMoreRowsClassname","Row","id","email","title","firstName","lastName","rowKeyGetter","row","columns","key","name","createFakeRowObjectData","index","internet","person","prefix","createRows","numberOfRows","rows","i","isAtBottom","currentTarget","React","UIEvent","HTMLDivElement","scrollTop","scrollHeight","clientHeight","loadMoreRows","newRowsCount","length","Promise","resolve","newRows","setTimeout","InfiniteScrolling","direction","setRows","isLoading","setIsLoading","handleScroll","event","component"],"sources":["../../website/routes/InfiniteScrolling.wyw-in-js.css","../../website/routes/InfiniteScrolling.tsx?tsr-split=component"],"sourcesContent":[".lpuw65p {\n  inline-size: 180px;\n  padding-block: 8px;\n  padding-inline: 16px;\n  position: absolute;\n  inset-block-end: 8px;\n  inset-inline-end: 8px;\n  color: white;\n  line-height: 35px;\n  background: rgb(0 0 0 / 0.6);\n}\n\n","import { useState } from 'react';\nimport { faker } from '@faker-js/faker';\nimport { css } from '@linaria/core';\n\nimport { DataGrid } from '../../src';\nimport type { Column } from '../../src';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createFileRoute({\n  component: InfiniteScrolling\n});\n\nconst loadMoreRowsClassname = css`\n  inline-size: 180px;\n  padding-block: 8px;\n  padding-inline: 16px;\n  position: absolute;\n  inset-block-end: 8px;\n  inset-inline-end: 8px;\n  color: white;\n  line-height: 35px;\n  background: rgb(0 0 0 / 0.6);\n`;\n\ninterface Row {\n  id: string;\n  email: string;\n  title: string;\n  firstName: string;\n  lastName: string;\n}\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nconst columns: readonly Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID'\n  },\n  {\n    key: 'title',\n    name: 'Title'\n  },\n  {\n    key: 'firstName',\n    name: 'First Name'\n  },\n  {\n    key: 'lastName',\n    name: 'Last Name'\n  },\n  {\n    key: 'email',\n    name: 'Email'\n  }\n];\n\nfunction createFakeRowObjectData(index: number): Row {\n  return {\n    id: `id_${index}`,\n    email: faker.internet.email(),\n    title: faker.person.prefix(),\n    firstName: faker.person.firstName(),\n    lastName: faker.person.lastName()\n  };\n}\n\nfunction createRows(numberOfRows: number): Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 0; i < numberOfRows; i++) {\n    rows[i] = createFakeRowObjectData(i);\n  }\n\n  return rows;\n}\n\nfunction isAtBottom({ currentTarget }: React.UIEvent<HTMLDivElement>): boolean {\n  return currentTarget.scrollTop + 10 >= currentTarget.scrollHeight - currentTarget.clientHeight;\n}\n\nfunction loadMoreRows(newRowsCount: number, length: number): Promise<Row[]> {\n  return new Promise((resolve) => {\n    const newRows: Row[] = [];\n\n    for (let i = 0; i < newRowsCount; i++) {\n      newRows[i] = createFakeRowObjectData(i + length);\n    }\n\n    setTimeout(() => resolve(newRows), 1000);\n  });\n}\n\nfunction InfiniteScrolling() {\n  const direction = useDirection();\n  const [rows, setRows] = useState(() => createRows(50));\n  const [isLoading, setIsLoading] = useState(false);\n\n  async function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    if (isLoading || !isAtBottom(event)) return;\n\n    setIsLoading(true);\n\n    const newRows = await loadMoreRows(50, rows.length);\n\n    setRows([...rows, ...newRows]);\n    setIsLoading(false);\n  }\n\n  return (\n    <>\n      <DataGrid\n        aria-label=\"Infinite Scrolling Example\"\n        columns={columns}\n        rows={rows}\n        rowKeyGetter={rowKeyGetter}\n        onRowsChange={setRows}\n        rowHeight={30}\n        onScroll={handleScroll}\n        className=\"fill-grid\"\n        direction={direction}\n      />\n      {isLoading && <div className={loadMoreRowsClassname}>Loading more rows...</div>}\n    </>\n  );\n}\n"],"mappings":"qICYMO,EAAAA,UAoBN,SAASO,EAAaC,EAAU,CAC9B,OAAOA,EAAIN,GAGb,IAAMO,EAAkC,CACtC,CACEC,IAAK,KACLC,KAAM,KACP,CACD,CACED,IAAK,QACLC,KAAM,QACP,CACD,CACED,IAAK,YACLC,KAAM,aACP,CACD,CACED,IAAK,WACLC,KAAM,YACP,CACD,CACED,IAAK,QACLC,KAAM,QACP,CACF,CAED,SAASC,EAAwBC,EAAoB,CACnD,MAAO,CACLX,GAAI,MAAMW,IACVV,MAAOT,EAAMoB,SAASX,OAAO,CAC7BC,MAAOV,EAAMqB,OAAOC,QAAQ,CAC5BX,UAAWX,EAAMqB,OAAOV,WAAW,CACnCC,SAAUZ,EAAMqB,OAAOT,UAAAA,CACxB,CAGH,SAASW,EAAWC,EAA6B,CAC/C,IAAMC,EAAc,EAAE,CAEtB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAcE,IAChCD,EAAKC,GAAKR,EAAwBQ,EAAE,CAGtC,OAAOD,EAGT,SAASE,EAAW,CAAEC,iBAAyD,CAC7E,OAAOA,EAAcI,UAAY,IAAMJ,EAAcK,aAAeL,EAAcM,aAGpF,SAASC,EAAaC,EAAsBC,EAAgC,CAC1E,OAAO,IAAIC,QAASC,GAAY,CAC9B,IAAMC,EAAiB,EAAE,CAEzB,IAAK,IAAId,EAAI,EAAGA,EAAIU,EAAcV,IAChCc,EAAQd,GAAKR,EAAwBQ,EAAIW,EAAO,CAGlDI,eAAiBF,EAAQC,EAAQ,CAAE,IAAK,EACxC,CAGJ,SAASE,GAAoB,CAC3B,IAAMC,EAAYvC,GAAc,CAC1B,CAACqB,EAAMmB,IAAAA,EAAAA,EAAAA,cAA0BrB,EAAW,GAAG,CAAC,CAChD,CAACsB,EAAWC,IAAAA,EAAAA,EAAAA,UAAyB,GAAM,CAEjD,eAAeC,EAAaC,EAAsC,CAChE,GAAIH,GAAa,CAAClB,EAAWqB,EAAM,CAAE,OAErCF,EAAa,GAAK,CAElB,IAAMN,EAAU,MAAML,EAAa,GAAIV,EAAKY,OAAO,CAEnDO,EAAQ,CAAC,GAAGnB,EAAM,GAAGe,EAAQ,CAAC,CAC9BM,EAAa,GAAM,CAGrB,OACE,EAAA,EAAA,MAAA,EAAA,SAAA,CAAA,SAAA,EACE,EAAA,EAAA,KAAC,EAAA,CACC,aAAW,6BACF/B,UACHU,OACQZ,eACd,aAAc+B,EACd,UAAW,GACX,SAAUG,EACV,UAAU,YACCJ,aAAU,CAEtBE,IAAa,EAAA,EAAA,KAAC,MAAA,CAAI,UAAWvC,WAAuB,wBAA0B,CAAA,CAAA,CAC9E"}