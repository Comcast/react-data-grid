{"version":3,"file":"DataGrid-OYRRS2qP.js","sources":["../../node_modules/clsx/dist/clsx.mjs","../../src/utils/colSpanUtils.ts","../../src/utils/domUtils.ts","../../src/utils/eventUtils.ts","../../src/utils/keyboardUtils.ts","../../src/utils/renderMeasuringCells.tsx","../../src/utils/selectedCellUtils.ts","../../src/style/cell.ts","../../src/utils/styleUtils.ts","../../src/utils/index.ts","../../src/cellRenderers/renderCheckbox.tsx","../../src/cellRenderers/renderValue.tsx","../../src/DataGridDefaultRenderersContext.ts","../../src/cellRenderers/SelectCellFormatter.tsx","../../src/hooks/useRowSelection.ts","../../src/Columns.tsx","../../src/renderHeaderCell.tsx","../../src/hooks/useCalculatedColumns.ts","../../src/hooks/useColumnWidths.ts","../../src/hooks/useGridDimensions.ts","../../src/hooks/useLatestFunc.ts","../../src/hooks/useRovingTabIndex.ts","../../src/hooks/useViewportColumns.ts","../../src/hooks/useViewportRows.ts","../../src/Cell.tsx","../../src/EditCell.tsx","../../src/GroupedColumnHeaderCell.tsx","../../src/HeaderCell.tsx","../../src/style/row.ts","../../src/HeaderRow.tsx","../../src/GroupedColumnHeaderRow.tsx","../../src/Row.tsx","../../src/ScrollToCell.tsx","../../src/sortStatus.tsx","../../src/style/core.ts","../../src/SummaryCell.tsx","../../src/SummaryRow.tsx","../../src/DataGrid.tsx"],"sourcesContent":["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}export function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<Element>, behavior: ScrollBehavior = 'instant') {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest', behavior });\n}\n","import type { CellEvent } from '../types';\n\nexport function createCellEvent<E extends React.SyntheticEvent<HTMLDivElement>>(\n  event: E\n): CellEvent<E> {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n\n  return cellEvent;\n}\n","import type { Direction, Maybe } from '../types';\n\n// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\n// event.key may differ by keyboard input language, so we use event.keyCode instead\n// event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\nconst vKey = 86;\n\nexport function isDefaultCellInput(\n  event: React.KeyboardEvent<HTMLDivElement>,\n  isUserHandlingPaste: boolean\n): boolean {\n  // eslint-disable-next-line @typescript-eslint/no-deprecated\n  if (isCtrlKeyHeldDown(event) && (event.keyCode !== vKey || isUserHandlingPaste)) return false;\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return (\n      target.closest('.rdg-editor-container')?.querySelectorAll('input, textarea, select')\n        .length === 1\n    );\n  }\n  return false;\n}\n\nexport function getLeftRightKey(direction: Maybe<Direction>) {\n  const isRtl = direction === 'rtl';\n\n  return {\n    leftKey: isRtl ? 'ArrowRight' : 'ArrowLeft',\n    rightKey: isRtl ? 'ArrowLeft' : 'ArrowRight'\n  } as const;\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>(viewportColumns: readonly CalculatedColumn<R, SR>[]) {\n  return viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n    <div\n      key={key}\n      className={measuringCellClassname}\n      style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n      data-measuring-cell-key={key}\n    />\n  ));\n}\n","import type {\n  CalculatedColumn,\n  CalculatedColumnParent,\n  CellNavigationMode,\n  Maybe,\n  Position\n} from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return isCellEditableUtil(column, row);\n}\n\n// https://github.com/vercel/next.js/issues/56480\nexport function isCellEditableUtil<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.renderEditCell != null &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  moveUp: boolean;\n  moveNext: boolean;\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  mainHeaderRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n}\n\nfunction getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  mainHeaderRowIdx,\n  lastFrozenColumnIndex,\n  column\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'lastFrozenColumnIndex' | 'mainHeaderRowIdx'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  if (rowIdx === mainHeaderRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (\n    topSummaryRows &&\n    rowIdx > mainHeaderRowIdx &&\n    rowIdx <= topSummaryRowsCount + mainHeaderRowIdx\n  ) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  moveUp,\n  moveNext,\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  mainHeaderRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx, rowIdx: currentRowIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n  const columnsCount = columns.length;\n\n  const setColSpan = (moveNext: boolean) => {\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        mainHeaderRowIdx,\n        lastFrozenColumnIndex,\n        column\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveNext ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  const getParentRowIdx = (parent: CalculatedColumnParent<R, SR>) => {\n    return parent.level + mainHeaderRowIdx;\n  };\n\n  const setHeaderGroupColAndRowSpan = () => {\n    if (moveNext) {\n      // find the parent at the same row level\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx === parentRowIdx) {\n          nextIdx = parent.idx + parent.colSpan;\n          break;\n        }\n        parent = parent.parent;\n      }\n    } else if (moveUp) {\n      // find the first reachable parent\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      let found = false;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx >= parentRowIdx) {\n          nextIdx = parent.idx;\n          nextRowIdx = parentRowIdx;\n          found = true;\n          break;\n        }\n        parent = parent.parent;\n      }\n\n      // keep the current position if there is no parent matching the new row position\n      if (!found) {\n        nextIdx = currentIdx;\n        nextRowIdx = currentRowIdx;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(moveNext);\n\n    if (nextRowIdx < mainHeaderRowIdx) {\n      setHeaderGroupColAndRowSpan();\n    }\n  }\n\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  if (nextRowIdx < mainHeaderRowIdx && nextIdx > -1 && nextIdx < columnsCount) {\n    // Find the last reachable parent for the new rowIdx\n    // This check is needed when navigating to a column\n    // that does not have a parent matching the new rowIdx\n    const nextColumn = columns[nextIdx];\n    let parent = nextColumn.parent;\n    const nextParentRowIdx = nextRowIdx;\n    nextRowIdx = mainHeaderRowIdx;\n    while (parent !== undefined) {\n      const parentRowIdx = getParentRowIdx(parent);\n      if (parentRowIdx >= nextParentRowIdx) {\n        nextRowIdx = parentRowIdx;\n        nextIdx = parent.idx;\n      }\n      parent = parent.parent;\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // Exit the grid if we're at the first or last cell of the grid\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /* max-content does not work with size containment\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\n     * Chromium bug: at odd zoom levels or subpixel positioning,\n     * layout/paint/style containment can make cell borders disappear\n     *   https://issues.chromium.org/issues/40840864\n     */\n    position: relative; /* needed for absolute positioning to work */\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: var(--rdg-border-width) solid var(--rdg-border-color);\n    border-block-end: var(--rdg-border-width) solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    align-content: center;\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: var(--rdg-selection-width) solid var(--rdg-selection-color);\n      outline-offset: calc(var(--rdg-selection-width) * -1);\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n\n    /* Add box-shadow on the last frozen cell */\n    &:nth-last-child(1 of &) {\n      box-shadow: var(--rdg-cell-frozen-box-shadow);\n    }\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    --rdg-drag-handle-size: 8px;\n    z-index: 0;\n    cursor: move;\n    inline-size: var(--rdg-drag-handle-size);\n    block-size: var(--rdg-drag-handle-size);\n    background-color: var(--rdg-selection-color);\n    place-self: end;\n\n    &:hover {\n      --rdg-drag-handle-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nexport const cellDragHandleFrozenClassname = css`\n  @layer rdg.DragHandle {\n    z-index: 1;\n    position: sticky;\n  }\n`;\n\nexport const cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn, CalculatedColumnOrColumnGroup } from '../types';\nimport { cellClassname, cellFrozenClassname } from '../style/cell';\n\nexport function getRowStyle(rowIdx: number): CSSProperties {\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getHeaderCellStyle<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number,\n  rowSpan: number\n): React.CSSProperties {\n  const gridRowEnd = rowIdx + 1;\n  const paddingBlockStart = `calc(${rowSpan - 1} * var(--rdg-header-row-height))`;\n\n  if (column.parent === undefined) {\n    return {\n      insetBlockStart: 0,\n      gridRowStart: 1,\n      gridRowEnd,\n      paddingBlockStart\n    };\n  }\n\n  return {\n    insetBlockStart: `calc(${rowIdx - rowSpan} * var(--rdg-header-row-height))`,\n    gridRowStart: gridRowEnd - rowSpan,\n    gridRowEnd,\n    paddingBlockStart\n  };\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan = 1\n): React.CSSProperties {\n  const index = column.idx + 1;\n  return {\n    gridColumnStart: index,\n    gridColumnEnd: index + colSpan,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen\n    },\n    ...extraClasses\n  );\n}\n","import type { CalculatedColumn, CalculatedColumnOrColumnGroup, Maybe } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './eventUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: Maybe<(row: NoInfer<R>) => K>\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n\nexport function getHeaderCellRowSpan<R, SR>(\n  column: CalculatedColumnOrColumnGroup<R, SR>,\n  rowIdx: number\n) {\n  return column.parent === undefined ? rowIdx : column.level - column.parent.level;\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderCheckboxProps } from '../types';\n\nconst checkbox = css`\n  @layer rdg.CheckboxInput {\n    display: block;\n    margin: auto;\n    inline-size: 20px;\n    block-size: 20px;\n\n    &:focus-visible {\n      outline: 2px solid var(--rdg-checkbox-focus-color);\n      outline-offset: -3px;\n    }\n\n    &:enabled {\n      cursor: pointer;\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox-input ${checkbox}`;\n\nexport function renderCheckbox({ onChange, indeterminate, ...props }: RenderCheckboxProps) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <input\n      ref={(el) => {\n        if (el) {\n          el.indeterminate = indeterminate === true;\n        }\n      }}\n      type=\"checkbox\"\n      className={checkboxClassname}\n      onChange={handleChange}\n      {...props}\n    />\n  );\n}\n","import type { RenderCellProps } from '../types';\n\nexport function renderValue<R, SR>(props: RenderCellProps<R, SR>) {\n  try {\n    return props.row[props.column.key as keyof R] as React.ReactNode;\n  } catch {\n    return null;\n  }\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Maybe, Renderers } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const DataGridDefaultRenderersContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport function useDefaultRenderers<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultRenderersContext);\n}\n","import type { RenderCheckboxProps } from '../types';\nimport { useDefaultRenderers } from '../DataGridDefaultRenderersContext';\n\ntype SharedInputProps = Pick<\n  RenderCheckboxProps,\n  'disabled' | 'tabIndex' | 'aria-label' | 'aria-labelledby' | 'indeterminate' | 'onChange'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  value: boolean;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  indeterminate,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const renderCheckbox = useDefaultRenderers()!.renderCheckbox!;\n\n  return renderCheckbox({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    tabIndex,\n    indeterminate,\n    disabled,\n    checked: value,\n    onChange\n  });\n}\n","import { createContext, useContext } from 'react';\n\nimport type { SelectHeaderRowEvent, SelectRowEvent } from '../types';\n\nexport interface RowSelectionContextValue {\n  readonly isRowSelected: boolean;\n  readonly isRowSelectionDisabled: boolean;\n}\n\nexport const RowSelectionContext = createContext<RowSelectionContextValue | undefined>(undefined);\n\nexport const RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport function useRowSelection() {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within renderCell');\n  }\n\n  return {\n    isRowSelectionDisabled: rowSelectionContext.isRowSelectionDisabled,\n    isRowSelected: rowSelectionContext.isRowSelected,\n    onRowSelectionChange: rowSelectionChangeContext\n  };\n}\n\nexport interface HeaderRowSelectionContextValue {\n  readonly isRowSelected: boolean;\n  readonly isIndeterminate: boolean;\n}\n\nexport const HeaderRowSelectionContext = createContext<HeaderRowSelectionContextValue | undefined>(\n  undefined\n);\n\nexport const HeaderRowSelectionChangeContext = createContext<\n  ((selectRowEvent: SelectHeaderRowEvent) => void) | undefined\n>(undefined);\n\nexport function useHeaderRowSelection() {\n  const headerRowSelectionContext = useContext(HeaderRowSelectionContext);\n  const headerRowSelectionChangeContext = useContext(HeaderRowSelectionChangeContext);\n\n  if (headerRowSelectionContext === undefined || headerRowSelectionChangeContext === undefined) {\n    throw new Error('useHeaderRowSelection must be used within renderHeaderCell');\n  }\n\n  return {\n    isIndeterminate: headerRowSelectionContext.isIndeterminate,\n    isRowSelected: headerRowSelectionContext.isRowSelected,\n    onRowSelectionChange: headerRowSelectionChangeContext\n  };\n}\n","import { useHeaderRowSelection, useRowSelection } from './hooks/useRowSelection';\nimport type { Column, RenderCellProps, RenderGroupCellProps, RenderHeaderCellProps } from './types';\nimport { SelectCellFormatter } from './cellRenderers';\n\nexport const SELECT_COLUMN_KEY = 'rdg-select-column';\n\nfunction HeaderRenderer(props: RenderHeaderCellProps<unknown>) {\n  const { isIndeterminate, isRowSelected, onRowSelectionChange } = useHeaderRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select All\"\n      tabIndex={props.tabIndex}\n      indeterminate={isIndeterminate}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ checked: isIndeterminate ? false : checked });\n      }}\n    />\n  );\n}\n\nfunction SelectFormatter(props: RenderCellProps<unknown>) {\n  const { isRowSelectionDisabled, isRowSelected, onRowSelectionChange } = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      tabIndex={props.tabIndex}\n      disabled={isRowSelectionDisabled}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: RenderGroupCellProps<unknown>) {\n  const { isRowSelected, onRowSelectionChange } = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      tabIndex={props.tabIndex}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  renderHeaderCell(props) {\n    return <HeaderRenderer {...props} />;\n  },\n  renderCell(props) {\n    return <SelectFormatter {...props} />;\n  },\n  renderGroupCell(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n","import { css } from '@linaria/core';\n\nimport type { RenderHeaderCellProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersContext';\n\nconst headerSortCellClassname = css`\n  @layer rdg.SortableHeaderCell {\n    display: flex;\n  }\n`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function renderHeaderCell<R, SR>({\n  column,\n  sortDirection,\n  priority\n}: RenderHeaderCellProps<R, SR>) {\n  if (!column.sortable) return column.name;\n\n  return (\n    <SortableHeaderCell sortDirection={sortDirection} priority={priority}>\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  RenderHeaderCellProps<R, SR>,\n  'sortDirection' | 'priority'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  sortDirection,\n  priority,\n  children\n}: SortableHeaderCellProps<R, SR>) {\n  const renderSortStatus = useDefaultRenderers<R, SR>()!.renderSortStatus!;\n\n  return (\n    <span className={headerSortCellClassname}>\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{renderSortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n","import { useMemo } from 'react';\n\nimport { clampColumnWidth, max, min } from '../utils';\nimport type { CalculatedColumn, CalculatedColumnParent, ColumnOrColumnGroup, Omit } from '../types';\nimport { renderValue } from '../cellRenderers';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport type { DataGridProps } from '../DataGrid';\nimport renderHeaderCell from '../renderHeaderCell';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer V> ? Mutable<V>[] : T[P];\n};\n\ninterface WithParent<R, SR> {\n  readonly parent: MutableCalculatedColumnParent<R, SR> | undefined;\n}\n\ntype MutableCalculatedColumnParent<R, SR> = Omit<Mutable<CalculatedColumnParent<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\ntype MutableCalculatedColumn<R, SR> = Omit<Mutable<CalculatedColumn<R, SR>>, 'parent'> &\n  WithParent<R, SR>;\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\n\ninterface CalculatedColumnsArgs<R, SR> {\n  rawColumns: readonly ColumnOrColumnGroup<R, SR>[];\n  defaultColumnOptions: DataGridProps<R, SR>['defaultColumnOptions'];\n  viewportWidth: number;\n  scrollLeft: number;\n  getColumnWidth: (column: CalculatedColumn<R, SR>) => string | number;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  defaultColumnOptions,\n  getColumnWidth,\n  viewportWidth,\n  scrollLeft,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultRenderCell = defaultColumnOptions?.renderCell ?? renderValue;\n  const defaultRenderHeaderCell = defaultColumnOptions?.renderHeaderCell ?? renderHeaderCell;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n  const defaultDraggable = defaultColumnOptions?.draggable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, headerRowsCount } = useMemo((): {\n    readonly columns: readonly CalculatedColumn<R, SR>[];\n    readonly colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    readonly lastFrozenColumnIndex: number;\n    readonly headerRowsCount: number;\n  } => {\n    let lastFrozenColumnIndex = -1;\n    let headerRowsCount = 1;\n    const columns: MutableCalculatedColumn<R, SR>[] = [];\n\n    collectColumns(rawColumns, 1);\n\n    function collectColumns(\n      rawColumns: readonly ColumnOrColumnGroup<R, SR>[],\n      level: number,\n      parent?: MutableCalculatedColumnParent<R, SR>\n    ) {\n      for (const rawColumn of rawColumns) {\n        if ('children' in rawColumn) {\n          const calculatedColumnParent: MutableCalculatedColumnParent<R, SR> = {\n            name: rawColumn.name,\n            parent,\n            idx: -1,\n            colSpan: 0,\n            level: 0,\n            headerCellClass: rawColumn.headerCellClass\n          };\n\n          collectColumns(rawColumn.children, level + 1, calculatedColumnParent);\n          continue;\n        }\n\n        const frozen = rawColumn.frozen ?? false;\n\n        const column: MutableCalculatedColumn<R, SR> = {\n          ...rawColumn,\n          parent,\n          idx: 0,\n          level: 0,\n          frozen,\n          width: rawColumn.width ?? defaultWidth,\n          minWidth: rawColumn.minWidth ?? defaultMinWidth,\n          maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n          sortable: rawColumn.sortable ?? defaultSortable,\n          resizable: rawColumn.resizable ?? defaultResizable,\n          draggable: rawColumn.draggable ?? defaultDraggable,\n          renderCell: rawColumn.renderCell ?? defaultRenderCell,\n          renderHeaderCell: rawColumn.renderHeaderCell ?? defaultRenderHeaderCell\n        };\n\n        columns.push(column);\n\n        if (frozen) {\n          lastFrozenColumnIndex++;\n        }\n\n        if (level > headerRowsCount) {\n          headerRowsCount = level;\n        }\n      }\n    }\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort frozen columns second:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // TODO: sort columns to keep them grouped if they have a parent\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n      updateColumnParent(column, idx, 0);\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      headerRowsCount\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultRenderCell,\n    defaultRenderHeaderCell,\n    defaultResizable,\n    defaultSortable,\n    defaultDraggable\n  ]);\n\n  const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n\n    for (const column of columns) {\n      let width = getColumnWidth(column);\n\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {};\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [getColumnWidth, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    headerRowsCount,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth\n  };\n}\n\nfunction updateColumnParent<R, SR>(\n  column: MutableCalculatedColumn<R, SR> | MutableCalculatedColumnParent<R, SR>,\n  index: number,\n  level: number\n) {\n  if (level < column.level) {\n    column.level = level;\n  }\n\n  if (column.parent !== undefined) {\n    const { parent } = column;\n    if (parent.idx === -1) {\n      parent.idx = index;\n    }\n    parent.colSpan += 1;\n    updateColumnParent(parent, index, level - 1);\n  }\n}\n","import { useLayoutEffect, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nimport type { CalculatedColumn, ColumnWidths, ResizedWidth } from '../types';\nimport type { DataGridProps } from '../DataGrid';\n\nexport function useColumnWidths<R, SR>(\n  columns: readonly CalculatedColumn<R, SR>[],\n  viewportColumns: readonly CalculatedColumn<R, SR>[],\n  templateColumns: readonly string[],\n  gridRef: React.RefObject<HTMLDivElement | null>,\n  gridWidth: number,\n  columnWidths: ColumnWidths,\n  onColumnWidthsChange: (columnWidths: ColumnWidths) => void,\n  onColumnResize: DataGridProps<R, SR>['onColumnResize'],\n  setColumnResizing: (isColumnResizing: boolean) => void\n) {\n  const [columnToAutoResize, setColumnToAutoResize] = useState<{\n    readonly key: string;\n    readonly width: ResizedWidth;\n  } | null>(null);\n  const [columnsToMeasureOnResize, setColumnsToMeasureOnResize] =\n    useState<ReadonlySet<string> | null>(null);\n  const [prevGridWidth, setPreviousGridWidth] = useState(gridWidth);\n  const columnsCanFlex: boolean = columns.length === viewportColumns.length;\n  const ignorePreviouslyMeasuredColumnsOnGridWidthChange =\n    // Allow columns to flex again when...\n    columnsCanFlex &&\n    // there is enough space for columns to flex and the grid was resized\n    gridWidth !== prevGridWidth;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure: string[] = [];\n\n  for (const { key, idx, width } of viewportColumns) {\n    const columnWidth = columnWidths.get(key);\n    if (key === columnToAutoResize?.key) {\n      newTemplateColumns[idx] =\n        columnToAutoResize.width === 'max-content'\n          ? columnToAutoResize.width\n          : `${columnToAutoResize.width}px`;\n      columnsToMeasure.push(key);\n    } else if (\n      typeof width === 'string' &&\n      // If the column is resized by the user, we don't want to measure it again\n      columnWidth?.type !== 'resized' &&\n      (ignorePreviouslyMeasuredColumnsOnGridWidthChange ||\n        columnsToMeasureOnResize?.has(key) === true ||\n        columnWidth === undefined)\n    ) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n\n  useLayoutEffect(updateMeasuredAndResizedWidths);\n\n  function updateMeasuredAndResizedWidths() {\n    setPreviousGridWidth(gridWidth);\n    if (columnsToMeasure.length === 0) return;\n\n    const newColumnWidths = new Map(columnWidths);\n    let hasChanges = false;\n\n    for (const key of columnsToMeasure) {\n      const measuredWidth = measureColumnWidth(gridRef, key);\n      hasChanges ||= measuredWidth !== columnWidths.get(key)?.width;\n      if (measuredWidth === undefined) {\n        newColumnWidths.delete(key);\n      } else {\n        newColumnWidths.set(key, { type: 'measured', width: measuredWidth });\n      }\n    }\n\n    if (columnToAutoResize !== null) {\n      const resizingKey = columnToAutoResize.key;\n      const oldWidth = columnWidths.get(resizingKey)?.width;\n      const newWidth = measureColumnWidth(gridRef, resizingKey);\n      if (newWidth !== undefined && oldWidth !== newWidth) {\n        hasChanges = true;\n        newColumnWidths.set(resizingKey, {\n          type: 'resized',\n          width: newWidth\n        });\n      }\n      setColumnToAutoResize(null);\n    }\n\n    if (hasChanges) {\n      onColumnWidthsChange(newColumnWidths);\n    }\n  }\n\n  function handleColumnResize(column: CalculatedColumn<R, SR>, nextWidth: ResizedWidth) {\n    const { key: resizingKey } = column;\n\n    flushSync(() => {\n      if (columnsCanFlex) {\n        // remeasure all the columns that can flex and are not resized by the user\n        const columnsToRemeasure = new Set<string>();\n        for (const { key, width } of viewportColumns) {\n          if (\n            resizingKey !== key &&\n            typeof width === 'string' &&\n            columnWidths.get(key)?.type !== 'resized'\n          ) {\n            columnsToRemeasure.add(key);\n          }\n        }\n\n        setColumnsToMeasureOnResize(columnsToRemeasure);\n      }\n\n      setColumnToAutoResize({\n        key: resizingKey,\n        width: nextWidth\n      });\n\n      setColumnResizing(typeof nextWidth === 'number');\n    });\n\n    setColumnsToMeasureOnResize(null);\n\n    if (onColumnResize) {\n      const previousWidth = columnWidths.get(resizingKey)?.width;\n      const newWidth =\n        typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey);\n      if (newWidth !== undefined && newWidth !== previousWidth) {\n        onColumnResize(column, newWidth);\n      }\n    }\n  }\n\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  } as const;\n}\n\nfunction measureColumnWidth(gridRef: React.RefObject<HTMLDivElement | null>, key: string) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current?.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}\n","import { useLayoutEffect, useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\n\nexport function useGridDimensions() {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n  const [horizontalScrollbarHeight, setHorizontalScrollbarHeight] = useState(0);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialHorizontalScrollbarHeight = offsetHeight - clientHeight;\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - initialHorizontalScrollbarHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n    setHorizontalScrollbarHeight(initialHorizontalScrollbarHeight);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      const { clientHeight, offsetHeight } = gridRef.current!;\n\n      // we use flushSync here to avoid flashing scrollbars\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n        setHorizontalScrollbarHeight(offsetHeight - clientHeight);\n      });\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize, horizontalScrollbarHeight] as const;\n}\n","import { useCallback, useLayoutEffect, useRef } from 'react';\n\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useLayoutEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n","import { useState } from 'react';\n\n// https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_general_within\nexport function useRovingTabIndex(isSelected: boolean) {\n  // https://www.w3.org/WAI/ARIA/apg/patterns/grid/#keyboardinteraction-settingfocusandnavigatinginsidecells\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    // Do not steal focus if event originates from a focusable child\n    if (event.target === event.currentTarget) {\n      const elementToFocus = event.currentTarget.querySelector<Element & HTMLOrSVGElement>(\n        '[tabindex=\"0\"]'\n      );\n\n      // Focus cell content when available instead of the cell itself\n      if (elementToFocus !== null) {\n        elementToFocus.focus({ preventScroll: true });\n        setIsChildFocused(true);\n      } else {\n        setIsChildFocused(false);\n      }\n    } else {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocusable = isSelected && !isChildFocused;\n\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly R[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        // eslint-disable-next-line react-compiler/react-compiler\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\n\nimport { floor, max, min } from '../utils';\n\ninterface ViewportRowsArgs<R> {\n  rows: readonly R[];\n  rowHeight: number | ((row: R) => number);\n  clientHeight: number;\n  scrollTop: number;\n  enableVirtualization: boolean;\n}\n\nexport function useViewportRows<R>({\n  rows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row) => {\n      const currentRowHeight = rowHeight(row);\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { memo, type MouseEvent } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, isCellEditableUtil } from './utils';\nimport type { CellMouseEventHandler, CellRendererProps } from './types';\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isDraggedOver,\n  row,\n  rowIdx,\n  className,\n  onMouseDown,\n  onCellMouseDown,\n  onClick,\n  onCellClick,\n  onDoubleClick,\n  onCellDoubleClick,\n  onContextMenu,\n  onCellContextMenu,\n  onRowChange,\n  selectCell,\n  style,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n\n  const { cellClass } = column;\n  className = getCellClassname(\n    column,\n    {\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n  const isEditable = isCellEditableUtil(column, row);\n\n  function selectCellWrapper(enableEditor?: boolean) {\n    selectCell({ rowIdx, idx: column.idx }, { enableEditor });\n  }\n\n  function handleMouseEvent(\n    event: React.MouseEvent<HTMLDivElement>,\n    eventHandler?: CellMouseEventHandler<R, SR>\n  ) {\n    let eventHandled = false;\n    if (eventHandler) {\n      const cellEvent = createCellEvent(event);\n      eventHandler({ rowIdx, row, column, selectCell: selectCellWrapper }, cellEvent);\n      eventHandled = cellEvent.isGridDefaultPrevented();\n    }\n    return eventHandled;\n  }\n\n  function handleMouseDown(event: MouseEvent<HTMLDivElement>) {\n    onMouseDown?.(event);\n    if (!handleMouseEvent(event, onCellMouseDown)) {\n      // select cell if the event is not prevented\n      selectCellWrapper();\n    }\n  }\n\n  function handleClick(event: MouseEvent<HTMLDivElement>) {\n    onClick?.(event);\n    handleMouseEvent(event, onCellClick);\n  }\n\n  function handleDoubleClick(event: MouseEvent<HTMLDivElement>) {\n    onDoubleClick?.(event);\n    if (!handleMouseEvent(event, onCellDoubleClick)) {\n      // go into edit mode if the event is not prevented\n      selectCellWrapper(true);\n    }\n  }\n\n  function handleContextMenu(event: MouseEvent<HTMLDivElement>) {\n    onContextMenu?.(event);\n    handleMouseEvent(event, onCellContextMenu);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      aria-readonly={!isEditable || undefined}\n      tabIndex={tabIndex}\n      className={className}\n      style={{\n        ...getCellStyle(column, colSpan),\n        ...style\n      }}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {column.renderCell({\n        column,\n        row,\n        rowIdx,\n        isCellEditable: isEditable,\n        tabIndex: childTabIndex,\n        onRowChange: handleRowChange\n      })}\n    </div>\n  );\n}\n\nconst CellComponent = memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => React.JSX.Element;\n\nexport default CellComponent;\n\nexport function defaultRenderCell<R, SR>(key: React.Key, props: CellRendererProps<R, SR>) {\n  return <CellComponent key={key} {...props} />;\n}\n","import { useLayoutEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { createCellEvent, getCellClassname, getCellStyle, onEditorNavigation } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellRendererProps,\n  EditCellKeyDownArgs,\n  Maybe,\n  Omit,\n  RenderEditCellProps\n} from './types';\n\ndeclare global {\n  const scheduler: Scheduler | undefined;\n}\n\ninterface Scheduler {\n  readonly postTask?: (\n    callback: () => void,\n    options?: {\n      priority?: 'user-blocking' | 'user-visible' | 'background';\n      signal?: AbortSignal;\n      delay?: number;\n    }\n  ) => Promise<unknown>;\n}\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `postTask`/`requestAnimationFrame` are the best way we know to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst canUsePostTask = typeof scheduler === 'object' && typeof scheduler.postTask === 'function';\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<RenderEditCellProps<R, SR>, 'onRowChange' | 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  rowIdx: number;\n  onRowChange: (row: R, commitChanges: boolean, shouldFocusCell: boolean) => void;\n  closeEditor: (shouldFocusCell: boolean) => void;\n  navigate: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onKeyDown: Maybe<(args: EditCellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}: EditCellProps<R, SR>) {\n  const captureEventRef = useRef<MouseEvent | undefined>(undefined);\n  const abortControllerRef = useRef<AbortController>(undefined);\n  const frameRequestRef = useRef<number>(undefined);\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick ?? true;\n\n  // We need to prevent the `useLayoutEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n\n  useLayoutEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown(event: MouseEvent) {\n      captureEventRef.current = event;\n\n      if (canUsePostTask) {\n        const abortController = new AbortController();\n        const { signal } = abortController;\n        abortControllerRef.current = abortController;\n        // Use postTask to ensure that the event is not called in the middle of a React render\n        // and that it is called before the next paint.\n        scheduler\n          .postTask(commitOnOutsideMouseDown, {\n            priority: 'user-blocking',\n            signal\n          })\n          // ignore abort errors\n          .catch(() => {});\n      } else {\n        frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n      }\n    }\n\n    function onWindowMouseDown(event: MouseEvent) {\n      if (captureEventRef.current === event) {\n        commitOnOutsideMouseDown();\n      }\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n    addEventListener('mousedown', onWindowMouseDown);\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      removeEventListener('mousedown', onWindowMouseDown);\n      cancelTask();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelTask() {\n    captureEventRef.current = undefined;\n    if (abortControllerRef.current !== undefined) {\n      abortControllerRef.current.abort();\n      abortControllerRef.current = undefined;\n    }\n    if (frameRequestRef.current !== undefined) {\n      cancelAnimationFrame(frameRequestRef.current);\n      frameRequestRef.current = undefined;\n    }\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown(\n        {\n          mode: 'EDIT',\n          row,\n          column,\n          rowIdx,\n          navigate() {\n            navigate(event);\n          },\n          onClose\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (event.key === 'Escape') {\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n\n  function onClose(commitChanges = false, shouldFocusCell = true) {\n    if (commitChanges) {\n      onRowChange(row, true, shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n\n  function onEditorRowChange(row: R, commitChangesAndFocus = false) {\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.displayCellContent && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={handleKeyDown}\n      onMouseDownCapture={cancelTask}\n    >\n      {column.renderEditCell != null && (\n        <>\n          {column.renderEditCell({\n            column,\n            row,\n            rowIdx,\n            onRowChange: onEditorRowChange,\n            onClose\n          })}\n          {column.editorOptions?.displayCellContent &&\n            column.renderCell({\n              column,\n              row,\n              rowIdx,\n              isCellEditable: true,\n              tabIndex: -1,\n              onRowChange: onEditorRowChange\n            })}\n        </>\n      )}\n    </div>\n  );\n}\n","import clsx from 'clsx';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getHeaderCellRowSpan, getHeaderCellStyle } from './utils';\nimport type { CalculatedColumnParent } from './types';\nimport type { GroupedColumnHeaderRowProps } from './GroupedColumnHeaderRow';\nimport { cellClassname } from './style/cell';\n\ntype SharedGroupedColumnHeaderRowProps<R, SR> = Pick<\n  GroupedColumnHeaderRowProps<R, SR>,\n  'rowIdx' | 'selectCell'\n>;\n\ninterface GroupedColumnHeaderCellProps<R, SR> extends SharedGroupedColumnHeaderRowProps<R, SR> {\n  column: CalculatedColumnParent<R, SR>;\n  isCellSelected: boolean;\n}\n\nexport default function GroupedColumnHeaderCell<R, SR>({\n  column,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: GroupedColumnHeaderCellProps<R, SR>) {\n  const { tabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { colSpan } = column;\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const index = column.idx + 1;\n\n  function onMouseDown() {\n    selectCell({ idx: column.idx, rowIdx });\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={index}\n      aria-colspan={colSpan}\n      aria-rowspan={rowSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={clsx(cellClassname, column.headerCellClass)}\n      style={{\n        ...getHeaderCellStyle(column, rowIdx, rowSpan),\n        gridColumnStart: index,\n        gridColumnEnd: index + colSpan\n      }}\n      onFocus={onFocus}\n      onMouseDown={onMouseDown}\n    >\n      {column.name}\n    </div>\n  );\n}\n","import { useRef, useState } from 'react';\nimport { flushSync } from 'react-dom';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport {\n  clampColumnWidth,\n  getCellClassname,\n  getCellStyle,\n  getHeaderCellRowSpan,\n  getHeaderCellStyle,\n  getLeftRightKey,\n  isCtrlKeyHeldDown,\n  stopPropagation\n} from './utils';\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\n\nconst cellSortableClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: pointer;\n  }\n`;\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\nexport const resizeHandleClassname = css`\n  @layer rdg.HeaderCell {\n    cursor: col-resize;\n    position: absolute;\n    inset-block-start: 0;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 10px;\n  }\n`;\n\nconst cellDraggableClassname = 'rdg-cell-draggable';\n\nconst cellDragging = css`\n  @layer rdg.HeaderCell {\n    background-color: var(--rdg-header-draggable-background-color);\n  }\n`;\n\nconst cellDraggingClassname = `rdg-cell-dragging ${cellDragging}`;\n\nconst cellOver = css`\n  @layer rdg.HeaderCell {\n    background-color: var(--rdg-header-draggable-background-color);\n  }\n`;\n\nconst cellOverClassname = `rdg-cell-drag-over ${cellOver}`;\n\nconst dragImageClassname = css`\n  @layer rdg.HeaderCell {\n    border-radius: 4px;\n    width: fit-content;\n    outline: 2px solid hsl(207, 100%, 50%);\n    outline-offset: -2px;\n  }\n`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'onColumnResizeEnd'\n  | 'shouldFocusGrid'\n  | 'direction'\n  | 'onColumnsReorder'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  rowIdx: number;\n  isCellSelected: boolean;\n  draggedColumnKey: string | undefined;\n  setDraggedColumnKey: (draggedColumnKey: string | undefined) => void;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  rowIdx,\n  isCellSelected,\n  onColumnResize,\n  onColumnResizeEnd,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction,\n  draggedColumnKey,\n  setDraggedColumnKey\n}: HeaderCellProps<R, SR>) {\n  const [isOver, setIsOver] = useState(false);\n  const dragImageRef = useRef<HTMLDivElement>(null);\n  const isDragging = draggedColumnKey === column.key;\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(shouldFocusGrid || isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n  const { sortable, resizable, draggable } = column;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellSortableClassname]: sortable,\n    [cellResizableClassname]: resizable,\n    [cellDraggableClassname]: draggable,\n    [cellDraggingClassname]: isDragging,\n    [cellOverClassname]: isOver\n  });\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst === true && sortDirection === 'DESC') ||\n        (sortDescendingFirst !== true && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell({ idx: 0, rowIdx });\n    }\n  }\n\n  function onMouseDown() {\n    selectCell({ idx: column.idx, rowIdx });\n  }\n\n  function onClick(event: React.MouseEvent<HTMLSpanElement>) {\n    if (sortable) {\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    const { key } = event;\n    if (sortable && (key === ' ' || key === 'Enter')) {\n      // prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    } else if (\n      resizable &&\n      isCtrlKeyHeldDown(event) &&\n      (key === 'ArrowLeft' || key === 'ArrowRight')\n    ) {\n      // prevent navigation\n      // TODO: check if we can use `preventDefault` instead\n      event.stopPropagation();\n      const { width } = event.currentTarget.getBoundingClientRect();\n      const { leftKey } = getLeftRightKey(direction);\n      const offset = key === leftKey ? -10 : 10;\n      const newWidth = clampColumnWidth(width + offset, column);\n      if (newWidth !== width) {\n        onColumnResize(column, newWidth);\n      }\n    }\n  }\n\n  function onDragStart(event: React.DragEvent<HTMLDivElement>) {\n    // need flushSync to make sure the drag image is rendered before the drag starts\n    flushSync(() => {\n      setDraggedColumnKey(column.key);\n    });\n    event.dataTransfer.setDragImage(dragImageRef.current!, 0, 0);\n    event.dataTransfer.dropEffect = 'move';\n  }\n\n  function onDragEnd() {\n    setDraggedColumnKey(undefined);\n  }\n\n  function onDragOver(event: React.DragEvent<HTMLDivElement>) {\n    // prevent default to allow drop\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }\n\n  function onDrop(event: React.DragEvent<HTMLDivElement>) {\n    setIsOver(false);\n    // prevent the browser from redirecting in some cases\n    event.preventDefault();\n    onColumnsReorder?.(draggedColumnKey!, column.key);\n  }\n\n  function onDragEnter(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(true);\n    }\n  }\n\n  function onDragLeave(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(false);\n    }\n  }\n\n  let dragTargetProps: React.ComponentProps<'div'> | undefined;\n  let dropTargetProps: React.ComponentProps<'div'> | undefined;\n  if (draggable) {\n    dragTargetProps = {\n      draggable: true,\n      onDragStart,\n      onDragEnd\n    };\n\n    if (draggedColumnKey !== undefined && draggedColumnKey !== column.key) {\n      dropTargetProps = {\n        onDragOver,\n        onDragEnter,\n        onDragLeave,\n        onDrop\n      };\n    }\n  }\n\n  const style: React.CSSProperties = {\n    ...getHeaderCellStyle(column, rowIdx, rowSpan),\n    ...getCellStyle(column, colSpan)\n  };\n\n  const content = column.renderHeaderCell({\n    column,\n    sortDirection,\n    priority,\n    tabIndex: childTabIndex\n  });\n\n  return (\n    <>\n      {isDragging && (\n        <div\n          ref={dragImageRef}\n          style={style}\n          className={getCellClassname(column, column.headerCellClass, dragImageClassname)}\n        >\n          {content}\n        </div>\n      )}\n      <div\n        role=\"columnheader\"\n        aria-colindex={column.idx + 1}\n        aria-colspan={colSpan}\n        aria-rowspan={rowSpan}\n        aria-selected={isCellSelected}\n        aria-sort={ariaSort}\n        tabIndex={tabIndex}\n        className={className}\n        style={style}\n        onMouseDown={onMouseDown}\n        onFocus={handleFocus}\n        onClick={onClick}\n        onKeyDown={onKeyDown}\n        {...dragTargetProps}\n        {...dropTargetProps}\n      >\n        {content}\n\n        {resizable && (\n          <ResizeHandle\n            direction={direction}\n            column={column}\n            onColumnResize={onColumnResize}\n            onColumnResizeEnd={onColumnResizeEnd}\n          />\n        )}\n      </div>\n    </>\n  );\n}\n\ntype ResizeHandleProps<R, SR> = Pick<\n  HeaderCellProps<R, SR>,\n  'direction' | 'column' | 'onColumnResize' | 'onColumnResizeEnd'\n>;\n\nfunction ResizeHandle<R, SR>({\n  direction,\n  column,\n  onColumnResize,\n  onColumnResizeEnd\n}: ResizeHandleProps<R, SR>) {\n  const resizingOffsetRef = useRef<number>(undefined);\n  const isRtl = direction === 'rtl';\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    // Fix column resizing on a draggable column in FF\n    event.preventDefault();\n\n    const { currentTarget, pointerId } = event;\n    currentTarget.setPointerCapture(pointerId);\n    const headerCell = currentTarget.parentElement!;\n    const { right, left } = headerCell.getBoundingClientRect();\n    resizingOffsetRef.current = isRtl ? event.clientX - left : right - event.clientX;\n  }\n\n  function onPointerMove(event: React.PointerEvent<HTMLDivElement>) {\n    const offset = resizingOffsetRef.current;\n    if (offset === undefined) return;\n    const { width, right, left } = event.currentTarget.parentElement!.getBoundingClientRect();\n    let newWidth = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n    newWidth = clampColumnWidth(newWidth, column);\n    if (width > 0 && newWidth !== width) {\n      onColumnResize(column, newWidth);\n    }\n  }\n\n  function onLostPointerCapture() {\n    onColumnResizeEnd();\n    resizingOffsetRef.current = undefined;\n  }\n\n  function onDoubleClick() {\n    onColumnResize(column, 'max-content');\n  }\n\n  return (\n    <div\n      className={resizeHandleClassname}\n      onClick={stopPropagation}\n      onPointerDown={onPointerDown}\n      onPointerMove={onPointerMove}\n      // we are not using pointerup because it does not fire in some cases\n      // pointer down -> alt+tab -> pointer up over another window -> pointerup event not fired\n      onLostPointerCapture={onLostPointerCapture}\n      onDoubleClick={onDoubleClick}\n    />\n  );\n}\n\n// only accept pertinent drag events:\n// - ignore drag events going from the container to an element inside the container\n// - ignore drag events going from an element inside the container to the container\nfunction isEventPertinent(event: React.DragEvent) {\n  const relatedTarget = event.relatedTarget as HTMLElement | null;\n\n  return !event.currentTarget.contains(relatedTarget);\n}\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = 'rdg-row-selected';\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      block-size: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n\nexport const topSummaryRowClassname = 'rdg-top-summary-row';\n\nexport const bottomSummaryRowClassname = 'rdg-bottom-summary-row';\n","import { memo, useState } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan } from './utils';\nimport type { CalculatedColumn, Direction, Maybe, Position, ResizedWidth } from './types';\nimport type { DataGridProps } from './DataGrid';\nimport HeaderCell from './HeaderCell';\nimport { cell, cellFrozen } from './style/cell';\nimport { rowSelectedClassname } from './style/row';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange' | 'onColumnsReorder'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  rowIdx: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: ResizedWidth) => void;\n  onColumnResizeEnd: () => void;\n  selectCell: (position: Position) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n  headerRowClass: Maybe<string>;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 1 to show up above regular cells and the focus sink */\n      z-index: 2;\n      position: sticky;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nexport const headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  headerRowClass,\n  rowIdx,\n  columns,\n  onColumnResize,\n  onColumnResizeEnd,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const [draggedColumnKey, setDraggedColumnKey] = useState<string>();\n\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        rowIdx={rowIdx}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        onColumnResizeEnd={onColumnResizeEnd}\n        onColumnsReorder={onColumnsReorder}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n        draggedColumnKey={draggedColumnKey}\n        setDraggedColumnKey={setDraggedColumnKey}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={clsx(\n        headerRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1\n        },\n        headerRowClass\n      )}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => React.JSX.Element;\n","import { memo } from 'react';\n\nimport type { CalculatedColumn, CalculatedColumnParent, Position } from './types';\nimport GroupedColumnHeaderCell from './GroupedColumnHeaderCell';\nimport { headerRowClassname } from './HeaderRow';\n\nexport interface GroupedColumnHeaderRowProps<R, SR> {\n  rowIdx: number;\n  level: number;\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectCell: (position: Position) => void;\n  selectedCellIdx: number | undefined;\n}\n\nfunction GroupedColumnHeaderRow<R, SR>({\n  rowIdx,\n  level,\n  columns,\n  selectedCellIdx,\n  selectCell\n}: GroupedColumnHeaderRowProps<R, SR>) {\n  const cells = [];\n  const renderedParents = new Set<CalculatedColumnParent<R, SR>>();\n\n  for (const column of columns) {\n    let { parent } = column;\n\n    if (parent === undefined) continue;\n\n    while (parent.level > level) {\n      if (parent.parent === undefined) break;\n      parent = parent.parent;\n    }\n\n    if (parent.level === level && !renderedParents.has(parent)) {\n      renderedParents.add(parent);\n      const { idx } = parent;\n      cells.push(\n        <GroupedColumnHeaderCell<R, SR>\n          key={idx}\n          column={parent}\n          rowIdx={rowIdx}\n          isCellSelected={selectedCellIdx === idx}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={rowIdx} // aria-rowindex is 1 based\n      className={headerRowClassname}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(GroupedColumnHeaderRow) as <R, SR>(\n  props: GroupedColumnHeaderRowProps<R, SR>\n) => React.JSX.Element;\n","import { memo, useMemo } from 'react';\nimport clsx from 'clsx';\n\nimport { RowSelectionContext, useLatestFunc, type RowSelectionContextValue } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { CalculatedColumn, RenderRowProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersContext';\nimport { rowClassname, rowSelectedClassname } from './style/row';\n\nfunction Row<R, SR>({\n  className,\n  rowIdx,\n  gridRowStart,\n  selectedCellIdx,\n  isRowSelectionDisabled,\n  isRowSelected,\n  draggedOverCellIdx,\n  lastFrozenColumnIndex,\n  row,\n  viewportColumns,\n  selectedCellEditor,\n  onCellMouseDown,\n  onCellClick,\n  onCellDoubleClick,\n  onCellContextMenu,\n  rowClass,\n  onRowChange,\n  selectCell,\n  style,\n  ...props\n}: RenderRowProps<R, SR>) {\n  const renderCell = useDefaultRenderers<R, SR>()!.renderCell!;\n\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row, rowIdx),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        renderCell(column.key, {\n          column,\n          colSpan,\n          row,\n          rowIdx,\n          isDraggedOver: draggedOverCellIdx === idx,\n          isCellSelected,\n          onCellMouseDown,\n          onCellClick,\n          onCellDoubleClick,\n          onCellContextMenu,\n          onRowChange: handleRowChange,\n          selectCell\n        })\n      );\n    }\n  }\n\n  const selectionValue = useMemo(\n    (): RowSelectionContextValue => ({ isRowSelected, isRowSelectionDisabled }),\n    [isRowSelectionDisabled, isRowSelected]\n  );\n\n  return (\n    <RowSelectionContext value={selectionValue}>\n      <div\n        role=\"row\"\n        className={className}\n        style={{\n          ...getRowStyle(gridRowStart),\n          ...style\n        }}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionContext>\n  );\n}\n\nconst RowComponent = memo(Row) as <R, SR>(props: RenderRowProps<R, SR>) => React.JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRenderRow<R, SR>(key: React.Key, props: RenderRowProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n","import { useLayoutEffect, useRef } from 'react';\n\nimport { scrollIntoView } from './utils';\n\nexport interface PartialPosition {\n  readonly idx?: number | undefined;\n  readonly rowIdx?: number | undefined;\n}\n\nexport default function ScrollToCell({\n  scrollToPosition: { idx, rowIdx },\n  gridRef,\n  setScrollToCellPosition\n}: {\n  scrollToPosition: PartialPosition;\n  gridRef: React.RefObject<HTMLDivElement | null>;\n  setScrollToCellPosition: (cell: null) => void;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // scroll until the cell is completely visible\n    // this is needed if the grid has auto-sized columns\n    // setting the behavior to auto so it can be overridden\n    scrollIntoView(ref.current, 'auto');\n  });\n\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridRef.current!,\n      threshold: 1.0\n    });\n\n    observer.observe(ref.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridRef, setScrollToCellPosition]);\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        gridColumn: idx === undefined ? '1/-1' : idx + 1,\n        gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n      }}\n    />\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { RenderSortIconProps, RenderSortPriorityProps, RenderSortStatusProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function renderSortStatus({ sortDirection, priority }: RenderSortStatusProps) {\n  return (\n    <>\n      {renderSortIcon({ sortDirection })}\n      {renderSortPriority({ priority })}\n    </>\n  );\n}\n\nexport function renderSortIcon({ sortDirection }: RenderSortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function renderSortPriority({ priority }: RenderSortPriorityProps) {\n  return priority;\n}\n","import { css } from '@linaria/core';\n\nimport { cell } from './cell';\nimport { bottomSummaryRowClassname, row, topSummaryRowClassname } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 90.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-header-draggable-background-color: hsl(0deg 0% 17.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n`;\n\nconst root = css`\n  @layer rdg.Defaults {\n    *,\n    *::before,\n    *::after {\n      box-sizing: inherit;\n    }\n  }\n\n  @layer rdg.Root {\n    ${lightTheme}\n    --rdg-selection-width: 2px;\n    --rdg-selection-color: hsl(207, 75%, 66%);\n    --rdg-font-size: 14px;\n    --rdg-cell-frozen-box-shadow: 2px 0 5px -2px rgba(136, 136, 136, 0.3);\n    --rdg-border-width: 1px;\n    --rdg-summary-border-width: calc(var(--rdg-border-width) * 2);\n\n    &:dir(rtl) {\n      --rdg-cell-frozen-box-shadow: -2px 0 5px -2px rgba(136, 136, 136, 0.3);\n    }\n\n    display: grid;\n\n    color-scheme: var(--rdg-color-scheme, light dark);\n    accent-color: light-dark(hsl(207deg 100% 29%), hsl(207deg 100% 79%));\n\n    /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n    /* We set a stacking context so internal elements don't render on top of external elements. */\n    /* size containment is not used as it could break \"width: min-content\" for example, and the grid would infinitely resize on Chromium browsers */\n    contain: content;\n    content-visibility: auto;\n    block-size: 350px;\n    border: 1px solid var(--rdg-border-color);\n    box-sizing: border-box;\n    overflow: auto;\n    background-color: var(--rdg-background-color);\n    color: var(--rdg-color);\n    font-size: var(--rdg-font-size);\n\n    /* needed on Firefox to fix scrollbars */\n    &::before {\n      content: '';\n      grid-column: 1/-1;\n      grid-row: 1/-1;\n    }\n\n    &.rdg-dark {\n      --rdg-color-scheme: dark;\n      ${darkTheme}\n    }\n\n    &.rdg-light {\n      --rdg-color-scheme: light;\n    }\n\n    @media (prefers-color-scheme: dark) {\n      &:not(.rdg-light) {\n        ${darkTheme}\n      }\n    }\n\n    > :nth-last-child(1 of .${topSummaryRowClassname}) {\n      > .${cell} {\n        border-block-end: var(--rdg-summary-border-width) solid var(--rdg-summary-border-color);\n      }\n    }\n\n    > :nth-child(1 of .${bottomSummaryRowClassname}) {\n      > .${cell} {\n        border-block-start: var(--rdg-summary-border-width) solid var(--rdg-summary-border-color);\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 1 to show up above regular frozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const focusSinkHeaderAndSummaryClassname = css`\n  @layer rdg.FocusSink {\n    /* Should have a higher value than 3 to show up above header and summary rows */\n    z-index: 3;\n  }\n`;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useRovingTabIndex } from './hooks';\nimport { getCellClassname, getCellStyle } from './utils';\nimport type { CellRendererProps } from './types';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<\n  CellRendererProps<R, SR>,\n  'rowIdx' | 'column' | 'colSpan' | 'isCellSelected' | 'selectCell'\n>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onMouseDown() {\n    selectCell({ rowIdx, idx: column.idx });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onMouseDown={onMouseDown}\n      onFocus={onFocus}\n    >\n      {column.renderSummaryCell?.({ column, row, tabIndex: childTabIndex })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => React.JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { getColSpan, getRowStyle } from './utils';\nimport type { RenderRowProps } from './types';\nimport { cell, cellFrozen } from './style/cell';\nimport {\n  bottomSummaryRowClassname,\n  rowClassname,\n  rowSelectedClassname,\n  topSummaryRowClassname\n} from './style/row';\nimport SummaryCell from './SummaryCell';\n\ntype SharedRenderRowProps<R, SR> = Pick<\n  RenderRowProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart' | 'selectCell'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRenderRowProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  isTop: boolean;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 2;\n    }\n\n    > .${cellFrozen} {\n      z-index: 3;\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [`${topSummaryRowClassname} ${topSummaryRow}`]: isTop,\n          [bottomSummaryRowClassname]: !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => React.JSX.Element;\n","import {\n  useCallback,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\nimport type { Key, KeyboardEvent } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  HeaderRowSelectionChangeContext,\n  HeaderRowSelectionContext,\n  RowSelectionChangeContext,\n  useCalculatedColumns,\n  useColumnWidths,\n  useGridDimensions,\n  useLatestFunc,\n  useViewportColumns,\n  useViewportRows,\n  type HeaderRowSelectionContextValue\n} from './hooks';\nimport {\n  abs,\n  assertIsValidKeyGetter,\n  canExitGrid,\n  createCellEvent,\n  getCellStyle,\n  getColSpan,\n  getLeftRightKey,\n  getNextSelectedCellPosition,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  isSelectedCellEditable,\n  renderMeasuringCells,\n  scrollIntoView,\n  sign\n} from './utils';\nimport type {\n  CalculatedColumn,\n  CellClipboardEvent,\n  CellCopyArgs,\n  CellKeyboardEvent,\n  CellKeyDownArgs,\n  CellMouseEventHandler,\n  CellNavigationMode,\n  CellPasteArgs,\n  CellSelectArgs,\n  Column,\n  ColumnOrColumnGroup,\n  ColumnWidths,\n  Direction,\n  FillEvent,\n  Maybe,\n  Position,\n  Renderers,\n  RowsChangeData,\n  SelectCellOptions,\n  SelectHeaderRowEvent,\n  SelectRowEvent,\n  SortColumn\n} from './types';\nimport { defaultRenderCell } from './Cell';\nimport { renderCheckbox as defaultRenderCheckbox } from './cellRenderers';\nimport {\n  DataGridDefaultRenderersContext,\n  useDefaultRenderers\n} from './DataGridDefaultRenderersContext';\nimport EditCell from './EditCell';\nimport GroupedColumnHeaderRow from './GroupedColumnHeaderRow';\nimport HeaderRow from './HeaderRow';\nimport { defaultRenderRow } from './Row';\nimport type { PartialPosition } from './ScrollToCell';\nimport ScrollToCell from './ScrollToCell';\nimport { default as defaultRenderSortStatus } from './sortStatus';\nimport { cellDragHandleClassname, cellDragHandleFrozenClassname } from './style/cell';\nimport {\n  focusSinkClassname,\n  focusSinkHeaderAndSummaryClassname,\n  rootClassname,\n  viewportDraggingClassname\n} from './style/core';\nimport { rowSelected, rowSelectedWithFrozenCell } from './style/row';\nimport SummaryRow from './SummaryRow';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\nexport type DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  | 'renderCell'\n  | 'renderHeaderCell'\n  | 'width'\n  | 'minWidth'\n  | 'maxWidth'\n  | 'resizable'\n  | 'sortable'\n  | 'draggable'\n>;\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToCell: (position: PartialPosition) => void;\n  selectCell: (position: Position, options?: SelectCellOptions) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.ComponentProps<'div'>,\n  | 'role'\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-description'\n  | 'aria-describedby'\n  | 'aria-rowcount'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  ref?: Maybe<React.Ref<DataGridHandle>>;\n  /**\n   * Grid and data Props\n   */\n  /** An array of column definitions */\n  columns: readonly ColumnOrColumnGroup<NoInfer<R>, NoInfer<SR>>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /** Rows pinned at the top of the grid for summary purposes */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /** Rows pinned at the bottom of the grid for summary purposes */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** Function to return a unique key/identifier for each row */\n  rowKeyGetter?: Maybe<(row: NoInfer<R>) => K>;\n  /** Callback triggered when rows are changed */\n  onRowsChange?: Maybe<(rows: NoInfer<R>[], data: RowsChangeData<NoInfer<R>, NoInfer<SR>>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * Height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((row: NoInfer<R>) => number)>;\n  /**\n   * Height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * Height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n  /** A map of column widths */\n  columnWidths?: Maybe<ColumnWidths>;\n  /** Callback triggered when column widths change */\n  onColumnWidthsChange?: Maybe<(columnWidths: ColumnWidths) => void>;\n\n  /**\n   * Feature props\n   */\n  /** A set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function to determine if row selection is disabled for a specific row */\n  isRowSelectionDisabled?: Maybe<(row: NoInfer<R>) => boolean>;\n  /** Callback triggered when the selection changes */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<NoInfer<K>>) => void>;\n  /** An array of sorted columns */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  /** Callback triggered when sorting changes */\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  /** Default options applied to all columns */\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<NoInfer<R>, NoInfer<SR>>>;\n  onFill?: Maybe<(event: FillEvent<NoInfer<R>>) => NoInfer<R>>;\n\n  /**\n   * Event props\n   */\n  /** Callback triggered when a pointer becomes active in a cell */\n  onCellMouseDown?: CellMouseEventHandler<R, SR>;\n  /** Callback triggered when a cell is clicked */\n  onCellClick?: CellMouseEventHandler<R, SR>;\n  /** Callback triggered when a cell is double-clicked */\n  onCellDoubleClick?: CellMouseEventHandler<R, SR>;\n  /** Callback triggered when a cell is right-clicked */\n  onCellContextMenu?: CellMouseEventHandler<R, SR>;\n  /** Callback triggered when a key is pressed in a cell */\n  onCellKeyDown?: Maybe<\n    (args: CellKeyDownArgs<NoInfer<R>, NoInfer<SR>>, event: CellKeyboardEvent) => void\n  >;\n  /** Callback triggered when a cell's content is copied */\n  onCellCopy?: Maybe<\n    (args: CellCopyArgs<NoInfer<R>, NoInfer<SR>>, event: CellClipboardEvent) => void\n  >;\n  /** Callback triggered when content is pasted into a cell */\n  onCellPaste?: Maybe<\n    (args: CellPasteArgs<NoInfer<R>, NoInfer<SR>>, event: CellClipboardEvent) => NoInfer<R>\n  >;\n  /** Function called whenever cell selection is changed */\n  onSelectedCellChange?: Maybe<(args: CellSelectArgs<NoInfer<R>, NoInfer<SR>>) => void>;\n  /** Callback triggered when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Callback triggered when column is resized */\n  onColumnResize?: Maybe<(column: CalculatedColumn<R, SR>, width: number) => void>;\n  /** Callback triggered when columns are reordered */\n  onColumnsReorder?: Maybe<(sourceColumnKey: string, targetColumnKey: string) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  /** Custom renderers for cells, rows, and other components */\n  renderers?: Maybe<Renderers<NoInfer<R>, NoInfer<SR>>>;\n  /** Function to apply custom class names to rows */\n  rowClass?: Maybe<(row: NoInfer<R>, rowIdx: number) => Maybe<string>>;\n  /** Custom class name for the header row */\n  headerRowClass?: Maybe<string>;\n  /**\n   * Text direction of the grid ('ltr' or 'rtl')\n   * @default 'ltr'\n   * */\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n  'data-cy'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nexport function DataGrid<R, SR = unknown, K extends Key = Key>(props: DataGridProps<R, SR, K>) {\n  const {\n    ref,\n    // Grid and data Props\n    columns: rawColumns,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    columnWidths: columnWidthsRaw,\n    onColumnWidthsChange: onColumnWidthsChangeRaw,\n    // Feature props\n    selectedRows,\n    isRowSelectionDisabled,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    // Event props\n    onCellMouseDown,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onSelectedCellChange,\n    onScroll,\n    onColumnResize,\n    onColumnsReorder,\n    onFill,\n    onCellCopy,\n    onCellPaste,\n    // Toggles and modes\n    enableVirtualization: rawEnableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    headerRowClass,\n    direction: rawDirection,\n    // ARIA\n    role: rawRole,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-description': ariaDescription,\n    'aria-describedby': ariaDescribedBy,\n    'aria-rowcount': rawAriaRowCount,\n    'data-testid': testId,\n    'data-cy': dataCy\n  } = props;\n\n  /**\n   * defaults\n   */\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const role = rawRole ?? 'grid';\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const renderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const renderCell = renderers?.renderCell ?? defaultRenderers?.renderCell ?? defaultRenderCell;\n  const renderSortStatus =\n    renderers?.renderSortStatus ?? defaultRenderers?.renderSortStatus ?? defaultRenderSortStatus;\n  const renderCheckbox =\n    renderers?.renderCheckbox ?? defaultRenderers?.renderCheckbox ?? defaultRenderCheckbox;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidthsInternal, setColumnWidthsInternal] = useState(\n    (): ColumnWidths => columnWidthsRaw ?? new Map()\n  );\n  const [isColumnResizing, setColumnResizing] = useState(false);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setDraggedOverRowIdx] = useState<number | undefined>(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState<PartialPosition | null>(null);\n  const [shouldFocusCell, setShouldFocusCell] = useState(false);\n  const [previousRowIdx, setPreviousRowIdx] = useState(-1);\n\n  const isColumnWidthsControlled =\n    columnWidthsRaw != null && onColumnWidthsChangeRaw != null && !isColumnResizing;\n  const columnWidths = isColumnWidthsControlled ? columnWidthsRaw : columnWidthsInternal;\n  const onColumnWidthsChange = isColumnWidthsControlled\n    ? (columnWidths: ColumnWidths) => {\n        // we keep the internal state in sync with the prop but this prevents an extra render\n        setColumnWidthsInternal(columnWidths);\n        onColumnWidthsChangeRaw(columnWidths);\n      }\n    : setColumnWidthsInternal;\n\n  const getColumnWidth = useCallback(\n    (column: CalculatedColumn<R, SR>) => {\n      return columnWidths.get(column.key)?.width ?? column.width;\n    },\n    [columnWidths]\n  );\n\n  const [gridRef, gridWidth, gridHeight, horizontalScrollbarHeight] = useGridDimensions();\n  const {\n    columns,\n    colSpanColumns,\n    lastFrozenColumnIndex,\n    headerRowsCount,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    totalFrozenColumnWidth\n  } = useCalculatedColumns({\n    rawColumns,\n    defaultColumnOptions,\n    getColumnWidth,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    enableVirtualization\n  });\n\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const groupedColumnHeaderRowsCount = headerRowsCount - 1;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n  const mainHeaderRowIdx = minRowIdx + groupedColumnHeaderRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n\n  const [selectedPosition, setSelectedPosition] = useState(\n    (): SelectCellState | EditCellState<R> => ({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' })\n  );\n\n  /**\n   * refs\n   */\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n\n  /**\n   * computed values\n   */\n  const isTreeGrid = role === 'treegrid';\n  const headerRowsHeight = headerRowsCount * headerRowHeight;\n  const summaryRowsHeight = summaryRowsCount * summaryRowHeight;\n  const clientHeight = gridHeight - headerRowsHeight - summaryRowsHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const { leftKey, rightKey } = getLeftRightKey(direction);\n  const ariaRowCount = rawAriaRowCount ?? headerRowsCount + rows.length + summaryRowsCount;\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      renderCheckbox,\n      renderSortStatus,\n      renderCell\n    }),\n    [renderCheckbox, renderSortStatus, renderCell]\n  );\n\n  const headerSelectionValue = useMemo((): HeaderRowSelectionContextValue => {\n    // no rows to select = explicitely unchecked\n    let hasSelectedRow = false;\n    let hasUnselectedRow = false;\n\n    if (rowKeyGetter != null && selectedRows != null && selectedRows.size > 0) {\n      for (const row of rows) {\n        if (selectedRows.has(rowKeyGetter(row))) {\n          hasSelectedRow = true;\n        } else {\n          hasUnselectedRow = true;\n        }\n\n        if (hasSelectedRow && hasUnselectedRow) break;\n      }\n    }\n\n    return {\n      isRowSelected: hasSelectedRow && !hasUnselectedRow,\n      isIndeterminate: hasSelectedRow && hasUnselectedRow\n    };\n  }, [rows, selectedRows, rowKeyGetter]);\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rows,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows\n  });\n\n  const { gridTemplateColumns, handleColumnResize } = useColumnWidths(\n    columns,\n    viewportColumns,\n    templateColumns,\n    gridRef,\n    gridWidth,\n    columnWidths,\n    onColumnWidthsChange,\n    onColumnResize,\n    setColumnResizing\n  );\n\n  const minColIdx = isTreeGrid ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n  const scrollHeight =\n    headerRowHeight + totalRowHeight + summaryRowsHeight + horizontalScrollbarHeight;\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const handleColumnResizeEndLatest = useLatestFunc(handleColumnResizeEnd);\n  const onColumnsReorderLastest = useLatestFunc(onColumnsReorder);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellMouseDownLatest = useLatestFunc(onCellMouseDown);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectHeaderRowLatest = useLatestFunc(selectHeaderRow);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectHeaderCellLatest = useLatestFunc(selectHeaderCell);\n\n  /**\n   * callbacks\n   */\n  const focusCell = useCallback(\n    (shouldScroll = true) => {\n      const cell = getCellToScroll(gridRef.current!);\n      if (cell === null) return;\n\n      if (shouldScroll) {\n        scrollIntoView(cell);\n      }\n\n      cell.focus({ preventScroll: true });\n    },\n    [gridRef]\n  );\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (shouldFocusCell) {\n      if (focusSinkRef.current !== null && selectedPosition.idx === -1) {\n        focusSinkRef.current.focus({ preventScroll: true });\n        scrollIntoView(focusSinkRef.current);\n      } else {\n        focusCell();\n      }\n      setShouldFocusCell(false);\n    }\n  }, [shouldFocusCell, focusCell, selectedPosition.idx]);\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToCell({ idx, rowIdx }) {\n      const scrollToIdx =\n        idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx =\n        rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({ idx: scrollToIdx, rowIdx: scrollToRowIdx });\n      }\n    },\n    selectCell\n  }));\n\n  /**\n   * event handlers\n   */\n  function selectHeaderRow(args: SelectHeaderRowEvent) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n\n    const newSelectedRows = new Set(selectedRows);\n    for (const row of rows) {\n      if (isRowSelectionDisabled?.(row) === true) continue;\n      const rowKey = rowKeyGetter(row);\n      if (args.checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectRow(args: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const { row, checked, isShiftClick } = args;\n    if (isRowSelectionDisabled?.(row) === true) return;\n    const newSelectedRows = new Set(selectedRows);\n    const rowKey = rowKeyGetter(row);\n    const rowIdx = rows.indexOf(row);\n    setPreviousRowIdx(rowIdx);\n\n    if (checked) {\n      newSelectedRows.add(rowKey);\n    } else {\n      newSelectedRows.delete(rowKey);\n    }\n\n    if (\n      isShiftClick &&\n      previousRowIdx !== -1 &&\n      previousRowIdx !== rowIdx &&\n      previousRowIdx < rows.length\n    ) {\n      const step = sign(rowIdx - previousRowIdx);\n      for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n        const row = rows[i];\n        if (isRowSelectionDisabled?.(row) === true) continue;\n        if (checked) {\n          newSelectedRows.add(rowKeyGetter(row));\n        } else {\n          newSelectedRows.delete(rowKeyGetter(row));\n        }\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function handleKeyDown(event: KeyboardEvent<HTMLDivElement>) {\n    const { idx, rowIdx, mode } = selectedPosition;\n    if (mode === 'EDIT') return;\n\n    if (onCellKeyDown && isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown(\n        {\n          mode: 'SELECT',\n          row,\n          column: columns[idx],\n          rowIdx,\n          selectCell\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = isTreeGrid && event.target === focusSinkRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    switch (event.key) {\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    if (row === rows[rowIdx]) return;\n    const updatedRows = rows.with(rowIdx, row);\n    onRowsChange(updatedRows, {\n      indexes: [rowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCellCopy(event: CellClipboardEvent) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const { idx, rowIdx } = selectedPosition;\n    onCellCopy?.({ row: rows[rowIdx], column: columns[idx] }, event);\n  }\n\n  function handleCellPaste(event: CellClipboardEvent) {\n    if (!onCellPaste || !onRowsChange || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const updatedRow = onCellPaste({ row: rows[rowIdx], column }, event);\n    updateRow(column, rowIdx, updatedRow);\n  }\n\n  function handleCellInput(event: KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // prevent scrolling\n      event.preventDefault();\n      return;\n    }\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event, onCellPaste != null)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  function handleColumnResizeEnd() {\n    // This check is needed as double click on the resize handle triggers onPointerMove\n    if (isColumnResizing) {\n      onColumnWidthsChangeRaw?.(columnWidths);\n      setColumnResizing(false);\n    }\n  }\n\n  function handleDragHandlePointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    // keep the focus on the cell\n    event.preventDefault();\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n    setDragging(true);\n    event.currentTarget.setPointerCapture(event.pointerId);\n  }\n\n  function handleDragHandlePointerMove(event: React.PointerEvent<HTMLDivElement>) {\n    // find dragged over row using the pointer position\n    const gridEl = gridRef.current!;\n    const headerAndTopSummaryRowsHeight = headerRowsHeight + topSummaryRowsCount * summaryRowHeight;\n    const offset =\n      scrollTop -\n      headerAndTopSummaryRowsHeight +\n      event.clientY -\n      gridEl.getBoundingClientRect().top;\n    const overRowIdx = findRowIdx(offset);\n    setDraggedOverRowIdx(overRowIdx);\n    const ariaRowIndex = headerAndTopSummaryRowsCount + overRowIdx + 1;\n    const el = gridEl.querySelector(\n      `:scope > [aria-rowindex=\"${ariaRowIndex}\"] > [aria-colindex=\"${selectedPosition.idx + 1}\"]`\n    );\n    scrollIntoView(el);\n  }\n\n  function handleDragHandleLostPointerCapture() {\n    setDragging(false);\n    if (draggedOverRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const [startRowIndex, endRowIndex] =\n      rowIdx < draggedOverRowIdx\n        ? [rowIdx + 1, draggedOverRowIdx + 1]\n        : [draggedOverRowIdx, rowIdx];\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDragHandleClick() {\n    // keep the focus on the cell but do not scroll\n    focusCell(false);\n  }\n\n  function handleDragHandleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    if (onRowsChange == null) return;\n\n    const { rowIdx, idx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill!({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange(updatedRows, { indexes, column });\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinEditBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && idx >= 0 && idx <= maxColIdx;\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinEditBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position })\n    );\n  }\n\n  function selectCell(position: Position, options?: SelectCellOptions): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    const samePosition = isSamePosition(selectedPosition, position);\n\n    if (options?.enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx];\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (samePosition) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(getCellToScroll(gridRef.current!));\n    } else {\n      setShouldFocusCell(options?.shouldFocusCell === true);\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n\n    if (onSelectedCellChange && !samePosition) {\n      onSelectedCellChange({\n        rowIdx: position.rowIdx,\n        row: isRowIdxWithinViewportBounds(position.rowIdx) ? rows[position.rowIdx] : undefined,\n        column: columns[position.idx]\n      });\n    }\n  }\n\n  function selectHeaderCell({ idx, rowIdx }: Position): void {\n    selectCell({ rowIdx: minRowIdx + rowIdx - 1, idx });\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: minRowIdx };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: maxRowIdx };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let cellNavigationMode: CellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n\n    // prevent scrolling and do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      moveUp: key === 'ArrowUp',\n      moveNext: key === rightKey || (key === 'Tab' && !shiftKey),\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      mainHeaderRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds\n    });\n\n    selectCell(nextSelectedCellPosition, { shouldFocusCell: true });\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getDragHandle() {\n    if (\n      onFill == null ||\n      selectedPosition.mode === 'EDIT' ||\n      !isCellWithinViewportBounds(selectedPosition)\n    ) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    if (column.renderEditCell == null || column.editable === false) {\n      return;\n    }\n\n    const isLastRow = rowIdx === maxRowIdx;\n    const columnWidth = getColumnWidth(column);\n    const colSpan = column.colSpan?.({ type: 'ROW', row: rows[rowIdx] }) ?? 1;\n    const { insetInlineStart, ...style } = getCellStyle(column, colSpan);\n    const marginEnd = 'calc(var(--rdg-drag-handle-size) * -0.5 + 1px)';\n    const isLastColumn = column.idx + colSpan - 1 === maxColIdx;\n    const dragHandleStyle: React.CSSProperties = {\n      ...style,\n      gridRowStart: headerAndTopSummaryRowsCount + rowIdx + 1,\n      marginInlineEnd: isLastColumn ? undefined : marginEnd,\n      marginBlockEnd: isLastRow ? undefined : marginEnd,\n      insetInlineStart: insetInlineStart\n        ? `calc(${insetInlineStart} + ${columnWidth}px + var(--rdg-drag-handle-size) * -0.5 - 1px)`\n        : undefined\n    };\n\n    return (\n      <div\n        style={dragHandleStyle}\n        className={clsx(cellDragHandleClassname, column.frozen && cellDragHandleFrozenClassname)}\n        onPointerDown={handleDragHandlePointerDown}\n        onPointerMove={isDragging ? handleDragHandlePointerMove : undefined}\n        onLostPointerCapture={isDragging ? handleDragHandleLostPointerCapture : undefined}\n        onClick={handleDragHandleClick}\n        onDoubleClick={handleDragHandleDoubleClick}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    const closeOnExternalRowChange = column.editorOptions?.closeOnExternalRowChange ?? true;\n\n    const closeEditor = (shouldFocusCell: boolean) => {\n      setShouldFocusCell(shouldFocusCell);\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges: boolean, shouldFocusCell: boolean) => {\n      if (commitChanges) {\n        // Prevents two issues when editor is closed by clicking on a different cell\n        //\n        // Otherwise commitEditorChanges may be called before the cell state is changed to\n        // SELECT and this results in onRowChange getting called twice.\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor(shouldFocusCell);\n        });\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (\n      closeOnExternalRowChange &&\n      rows[selectedPosition.rowIdx] !== selectedPosition.originalRow\n    ) {\n      // Discard changes if rows are updated from outside\n      closeEditor(false);\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        onKeyDown={onCellKeyDown}\n        navigate={navigate}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    // idx can be -1 if grouping is enabled\n    const selectedColumn = selectedPosition.idx === -1 ? undefined : columns[selectedPosition.idx];\n    if (\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = selectedIdx === -1 ? undefined : columns[selectedIdx];\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      let key: K | number = rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n\n      rowElements.push(\n        renderRow(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex': headerAndTopSummaryRowsCount + rowIdx + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelectionDisabled: isRowSelectionDisabled?.(row) ?? false,\n          isRowSelected,\n          onCellMouseDown: onCellMouseDownLatest,\n          onCellClick: onCellClickLatest,\n          onCellDoubleClick: onCellDoubleClickLatest,\n          onCellContextMenu: onCellContextMenuLatest,\n          rowClass,\n          gridRowStart,\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectCellLatest,\n          selectedCellEditor: getCellEditor(rowIdx)\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  // Keep the state and prop in sync\n  if (isColumnWidthsControlled && columnWidthsInternal !== columnWidthsRaw) {\n    setColumnWidthsInternal(columnWidthsRaw);\n  }\n\n  let templateRows = `repeat(${headerRowsCount}, ${headerRowHeight}px)`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused =\n    selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n\n  return (\n    <div\n      role={role}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-description={ariaDescription}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={ariaRowCount}\n      // Scrollable containers without tabIndex are keyboard focusable in Chrome only if there is no focusable element inside\n      // whereas they are always focusable in Firefox. We need to set tabIndex to have a consistent behavior across browsers.\n      tabIndex={-1}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            isRowIdxWithinViewportBounds(selectedPosition.rowIdx) ||\n            scrollToPosition?.rowIdx !== undefined\n              ? `${headerRowsHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateColumns,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-scroll-height': `${scrollHeight}px`,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      onCopy={handleCellCopy}\n      onPaste={handleCellPaste}\n      data-testid={testId}\n      data-cy={dataCy}\n    >\n      <DataGridDefaultRenderersContext value={defaultGridComponents}>\n        <HeaderRowSelectionChangeContext value={selectHeaderRowLatest}>\n          <HeaderRowSelectionContext value={headerSelectionValue}>\n            {Array.from({ length: groupedColumnHeaderRowsCount }, (_, index) => (\n              <GroupedColumnHeaderRow\n                key={index}\n                rowIdx={index + 1}\n                level={-groupedColumnHeaderRowsCount + index}\n                columns={getRowViewportColumns(minRowIdx + index)}\n                selectedCellIdx={\n                  selectedPosition.rowIdx === minRowIdx + index ? selectedPosition.idx : undefined\n                }\n                selectCell={selectHeaderCellLatest}\n              />\n            ))}\n            <HeaderRow\n              headerRowClass={headerRowClass}\n              rowIdx={headerRowsCount}\n              columns={getRowViewportColumns(mainHeaderRowIdx)}\n              onColumnResize={handleColumnResizeLatest}\n              onColumnResizeEnd={handleColumnResizeEndLatest}\n              onColumnsReorder={onColumnsReorderLastest}\n              sortColumns={sortColumns}\n              onSortColumnsChange={onSortColumnsChangeLatest}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n              selectedCellIdx={\n                selectedPosition.rowIdx === mainHeaderRowIdx ? selectedPosition.idx : undefined\n              }\n              selectCell={selectHeaderCellLatest}\n              shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n              direction={direction}\n            />\n          </HeaderRowSelectionContext>\n        </HeaderRowSelectionChangeContext>\n        {rows.length === 0 && noRowsFallback ? (\n          noRowsFallback\n        ) : (\n          <>\n            {topSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + 1 + rowIdx;\n              const summaryRowIdx = mainHeaderRowIdx + 1 + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top = headerRowsHeight + summaryRowHeight * rowIdx;\n\n              return (\n                <SummaryRow\n                  key={rowIdx}\n                  aria-rowindex={gridRowStart}\n                  rowIdx={summaryRowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={undefined}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  isTop\n                  selectCell={selectCellLatest}\n                />\n              );\n            })}\n            <RowSelectionChangeContext value={selectRowLatest}>\n              {getViewportRows()}\n            </RowSelectionChangeContext>\n            {bottomSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n              const summaryRowIdx = rows.length + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top =\n                clientHeight > totalRowHeight\n                  ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                  : undefined;\n              const bottom =\n                top === undefined\n                  ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                  : undefined;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={ariaRowCount - bottomSummaryRowsCount + rowIdx + 1}\n                  key={rowIdx}\n                  rowIdx={summaryRowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={bottom}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  isTop={false}\n                  selectCell={selectCellLatest}\n                />\n              );\n            })}\n          </>\n        )}\n      </DataGridDefaultRenderersContext>\n\n      {getDragHandle()}\n\n      {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n      {renderMeasuringCells(viewportColumns)}\n\n      {/* extra div is needed for row navigation in a treegrid */}\n      {isTreeGrid && (\n        <div\n          ref={focusSinkRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [focusSinkHeaderAndSummaryClassname]: !isRowIdxWithinViewportBounds(\n              selectedPosition.rowIdx\n            ),\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n          }}\n        />\n      )}\n\n      {scrollToPosition !== null && (\n        <ScrollToCell\n          scrollToPosition={scrollToPosition}\n          setScrollToCellPosition={setScrollToPosition}\n          gridRef={gridRef}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction getCellToScroll(gridEl: HTMLDivElement) {\n  return gridEl.querySelector<HTMLDivElement>(':scope > [role=\"row\"] > [tabindex=\"0\"]');\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n"],"names":["r","f","o","clsx","getColSpan","column","lastFrozenColumnIndex","args","colSpan","stopPropagation","event","scrollIntoView","element","behavior","createCellEvent","defaultPrevented","cellEvent","nonInputKeys","isCtrlKeyHeldDown","vKey","isDefaultCellInput","isUserHandlingPaste","onEditorNavigation","key","target","getLeftRightKey","direction","isRtl","measuringCellClassname","renderMeasuringCells","viewportColumns","map","idx","minWidth","maxWidth","jsx","className","style","gridColumnStart","isSelectedCellEditable","selectedPosition","columns","rows","row","isCellEditableUtil","getSelectedCellColSpan","topSummaryRows","bottomSummaryRows","rowIdx","mainHeaderRowIdx","topSummaryRowsCount","getNextSelectedCellPosition","moveUp","moveNext","cellNavigationMode","colSpanColumns","minRowIdx","maxRowIdx","currentIdx","currentRowIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","columnsCount","setColSpan","colIdx","getParentRowIdx","parent","setHeaderGroupColAndRowSpan","parentRowIdx","found","nextParentRowIdx","canExitGrid","maxColIdx","shiftKey","cell","cellClassname","cellFrozen","cellFrozenClassname","cellDragHandle","cellDragHandleFrozenClassname","cellDragHandleClassname","getRowStyle","getHeaderCellStyle","rowSpan","gridRowEnd","paddingBlockStart","getCellStyle","index","getCellClassname","extraClasses","min","max","floor","sign","abs","assertIsValidKeyGetter","keyGetter","clampColumnWidth","width","getHeaderCellRowSpan","checkbox","checkboxClassname","renderCheckbox","onChange","indeterminate","props","handleChange","e","checked","nativeEvent","ref","el","type","renderValue","DataGridDefaultRenderersContext","createContext","useDefaultRenderers","useContext","SelectCellFormatter","value","tabIndex","disabled","ariaLabel","ariaLabelledBy","RowSelectionContext","RowSelectionChangeContext","useRowSelection","rowSelectionContext","rowSelectionChangeContext","HeaderRowSelectionContext","HeaderRowSelectionChangeContext","useHeaderRowSelection","headerRowSelectionContext","headerRowSelectionChangeContext","SELECT_COLUMN_KEY","HeaderRenderer","isIndeterminate","isRowSelected","onRowSelectionChange","SelectFormatter","isRowSelectionDisabled","isShiftClick","SelectGroupFormatter","SelectColumn","headerSortCellClassname","headerSortName","headerSortNameClassname","renderHeaderCell","sortDirection","priority","sortable","SortableHeaderCell","children","name","renderSortStatus","jsxs","DEFAULT_COLUMN_WIDTH","DEFAULT_COLUMN_MIN_WIDTH","useCalculatedColumns","rawColumns","defaultColumnOptions","getColumnWidth","viewportWidth","scrollLeft","enableVirtualization","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultRenderCell","defaultRenderHeaderCell","defaultSortable","defaultResizable","defaultDraggable","headerRowsCount","useMemo","collectColumns","level","rawColumn","calculatedColumnParent","frozen","aKey","frozenA","bKey","frozenB","updateColumnParent","templateColumns","layoutCssVars","totalFrozenColumnWidth","columnMetrics","left","columnMetric","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useColumnWidths","gridRef","gridWidth","columnWidths","onColumnWidthsChange","onColumnResize","setColumnResizing","columnToAutoResize","setColumnToAutoResize","useState","columnsToMeasureOnResize","setColumnsToMeasureOnResize","prevGridWidth","setPreviousGridWidth","columnsCanFlex","ignorePreviouslyMeasuredColumnsOnGridWidthChange","newTemplateColumns","columnsToMeasure","columnWidth","gridTemplateColumns","useLayoutEffect","updateMeasuredAndResizedWidths","newColumnWidths","hasChanges","measuredWidth","measureColumnWidth","resizingKey","oldWidth","newWidth","handleColumnResize","nextWidth","flushSync","columnsToRemeasure","previousWidth","selector","useGridDimensions","useRef","inlineSize","setInlineSize","blockSize","setBlockSize","horizontalScrollbarHeight","setHorizontalScrollbarHeight","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","height","initialHorizontalScrollbarHeight","initialWidth","initialHeight","resizeObserver","entries","size","useLatestFunc","fn","callbackFn","useCallback","useRovingTabIndex","isSelected","isChildFocused","setIsChildFocused","onFocus","elementToFocus","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","useViewportRows","rowHeight","scrollTop","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","validateRowIdx","start","end","middle","currentOffset","rowVisibleStartIdx","rowVisibleEndIdx","cellDraggedOver","cellDraggedOverClassname","Cell","isCellSelected","isDraggedOver","onMouseDown","onCellMouseDown","onClick","onCellClick","onDoubleClick","onCellDoubleClick","onContextMenu","onCellContextMenu","onRowChange","selectCell","childTabIndex","cellClass","isEditable","selectCellWrapper","enableEditor","handleMouseEvent","eventHandler","eventHandled","isGridDefaultPrevented","handleMouseDown","handleClick","handleDoubleClick","handleContextMenu","handleRowChange","newRow","role","renderCell","isCellEditable","CellComponent","memo","canUsePostTask","scheduler","postTask","cellEditing","EditCell","closeEditor","onKeyDown","navigate","captureEventRef","abortControllerRef","frameRequestRef","commitOnOutsideClick","editorOptions","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","current","abortController","AbortController","signal","catch","requestAnimationFrame","onWindowMouseDown","addEventListener","capture","removeEventListener","cancelTask","abort","cancelAnimationFrame","handleKeyDown","mode","commitChanges","shouldFocusCell","onEditorRowChange","commitChangesAndFocus","displayCellContent","onMouseDownCapture","renderEditCell","Fragment","GroupedColumnHeaderCell","cellSortableClassname","cellResizable","cellResizableClassname","resizeHandleClassname","cellDraggableClassname","cellDragging","cellDraggingClassname","cellOver","cellOverClassname","dragImageClassname","HeaderCell","onColumnResizeEnd","onColumnsReorder","sortColumns","onSortColumnsChange","shouldFocusGrid","draggedColumnKey","setDraggedColumnKey","isOver","setIsOver","dragImageRef","isDragging","sortIndex","findIndex","sort","columnKey","sortColumn","length","ariaSort","resizable","draggable","headerCellClass","onSort","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","handleFocus","ctrlKey","metaKey","preventDefault","currentTarget","getBoundingClientRect","leftKey","onDragStart","dataTransfer","setDragImage","dropEffect","onDragEnd","onDragOver","onDrop","onDragEnter","isEventPertinent","onDragLeave","dragTargetProps","dropTargetProps","content","ResizeHandle","resizingOffsetRef","onPointerDown","pointerType","buttons","pointerId","setPointerCapture","headerCell","parentElement","right","clientX","onPointerMove","onLostPointerCapture","relatedTarget","contains","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","topSummaryRowClassname","bottomSummaryRowClassname","headerRow","headerRowClassname","HeaderRow","headerRowClass","selectedCellIdx","cells","push","HeaderRow$1","GroupedColumnHeaderRow","renderedParents","GroupedColumnHeaderRow$1","Row","gridRowStart","draggedOverCellIdx","selectedCellEditor","rowClass","selectionValue","RowComponent","defaultRenderRow","ScrollToCell","setScrollToCellPosition","removeScrollToCell","observer","arrow","arrowClassname","renderSortIcon","renderSortPriority","viewBox","d","root","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","focusSinkHeaderAndSummaryClassname","summaryCellClassname","SummaryCell","summaryCellClass","renderSummaryCell","SummaryCell$1","summaryRow","topSummaryRow","summaryRowClassname","SummaryRow","top","bottom","isTop","ariaRowIndex","SummaryRow$1","DataGrid","rowKeyGetter","onRowsChange","rawRowHeight","rawHeaderRowHeight","rawSummaryRowHeight","columnWidthsRaw","onColumnWidthsChangeRaw","selectedRows","onSelectedRowsChange","onCellKeyDown","onSelectedCellChange","onScroll","onFill","onCellCopy","onCellPaste","rawEnableVirtualization","renderers","rawDirection","rawRole","ariaDescription","ariaDescribedBy","rawAriaRowCount","testId","dataCy","defaultRenderers","headerRowHeight","summaryRowHeight","renderRow","defaultRenderSortStatus","defaultRenderCheckbox","noRowsFallback","setScrollTop","setScrollLeft","columnWidthsInternal","setColumnWidthsInternal","isColumnResizing","setDragging","draggedOverRowIdx","setDraggedOverRowIdx","scrollToPosition","setScrollToPosition","setShouldFocusCell","previousRowIdx","setPreviousRowIdx","isColumnWidthsControlled","gridHeight","bottomSummaryRowsCount","summaryRowsCount","headerAndTopSummaryRowsCount","groupedColumnHeaderRowsCount","setSelectedPosition","focusSinkRef","isTreeGrid","headerRowsHeight","summaryRowsHeight","isSelectable","rightKey","ariaRowCount","defaultGridComponents","headerSelectionValue","hasSelectedRow","hasUnselectedRow","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","scrollHeight","handleColumnResizeLatest","handleColumnResizeEndLatest","handleColumnResizeEnd","onColumnsReorderLastest","onSortColumnsChangeLatest","onCellMouseDownLatest","onCellClickLatest","onCellDoubleClickLatest","onCellContextMenuLatest","selectHeaderRowLatest","selectHeaderRow","selectRowLatest","selectRow","handleFormatterRowChangeLatest","updateRow","selectCellLatest","selectHeaderCellLatest","selectHeaderCell","focusCell","shouldScroll","getCellToScroll","useImperativeHandle","scrollToIdx","scrollToRowIdx","isRowIdxWithinViewportBounds","newSelectedRows","rowKey","step","isCellEvent","isRowEvent","handleCellInput","handleScroll","updatedRows","commitEditorChanges","handleCellCopy","handleCellPaste","updatedRow","handleDragHandlePointerDown","handleDragHandlePointerMove","gridEl","headerAndTopSummaryRowsHeight","overRowIdx","handleDragHandleLostPointerCapture","startRowIndex","endRowIndex","updateRows","handleDragHandleClick","handleDragHandleDoubleClick","startRowIdx","endRowIdx","sourceRow","indexes","isColIdxWithinSelectionBounds","isCellWithinEditBounds","options","samePosition","isSamePosition","getNextPosition","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","getDragHandle","isLastRow","insetInlineStart","marginEnd","isLastColumn","dragHandleStyle","getCellEditor","closeOnExternalRowChange","getRowViewportColumns","selectedColumn","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","templateRows","isGroupRowFocused","_","summaryRowIdx","isSummaryRowSelected","p1","p2"],"mappings":"uDAAA,SAASA,GAAE,EAAE,CAAC,IAAI,EAAEC,EAAE,EAAE,GAAG,GAAa,OAAO,GAAjB,UAA8B,OAAO,GAAjB,SAAmB,GAAG,UAAoB,OAAO,GAAjB,SAAmB,GAAG,MAAM,QAAQ,CAAC,EAAE,CAAC,IAAIC,EAAE,EAAE,OAAO,IAAI,EAAE,EAAE,EAAEA,EAAE,IAAI,EAAE,CAAC,IAAID,EAAED,GAAE,EAAE,CAAC,CAAC,KAAK,IAAI,GAAG,KAAK,GAAGC,EAAE,KAAM,KAAIA,KAAK,EAAE,EAAEA,CAAC,IAAI,IAAI,GAAG,KAAK,GAAGA,GAAG,OAAO,CAAC,CAAQ,SAASE,IAAM,CAAC,QAAQ,EAAE,EAAEF,EAAE,EAAE,EAAE,GAAGC,EAAE,UAAU,OAAOD,EAAEC,EAAED,KAAK,EAAE,UAAUA,CAAC,KAAK,EAAED,GAAE,CAAC,KAAK,IAAI,GAAG,KAAK,GAAG,GAAG,OAAO,CAAC,CCExW,SAASI,GACdC,EACAC,EACAC,EACoB,CACpB,MAAMC,EAAU,OAAOH,EAAO,SAAY,WAAaA,EAAO,QAAQE,CAAI,EAAI,EAC9E,GACE,OAAO,UAAUC,CAAO,GACxBA,EAAW,IAEV,CAACH,EAAO,QAAUA,EAAO,IAAMG,EAAW,GAAKF,GAEhD,OAAOE,CAGX,CCfO,SAASC,GAAgBC,EAA6B,CAC3DA,EAAM,gBAAA,CACR,CAEO,SAASC,GAAeC,EAAyBC,EAA2B,UAAW,CAC5FD,GAAS,eAAe,CAAE,OAAQ,UAAW,MAAO,UAAW,SAAAC,EAAU,CAC3E,CCNO,SAASC,GACdJ,EACc,CACd,IAAIK,EAAmB,GACvB,MAAMC,EAAY,CAChB,GAAGN,EACH,oBAAqB,CACnBK,EAAmB,EAAA,EAErB,wBAAyB,CACvB,OAAOA,CAAA,CACT,EAGF,cAAO,eAAeC,EAAW,OAAO,eAAeN,CAAK,CAAC,EAEtDM,CACT,CChBA,MAAMC,OAAmB,IAAI,CAE3B,eAEA,MACA,WACA,WACA,UACA,KACA,SACA,OACA,UACA,aACA,QAEA,MAEA,YACA,YACA,aACA,UACA,MACA,OACA,WACA,SAEA,SAEA,cACA,SACA,QACA,OAEA,cAEA,KAEA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,KACF,CAAC,EAEM,SAASC,GAAkB,EAAiC,CACjE,OAAQ,EAAE,SAAW,EAAE,UAAY,EAAE,MAAQ,SAC/C,CAIA,MAAMC,GAAO,GAEN,SAASC,GACdV,EACAW,EACS,CAET,OAAIH,GAAkBR,CAAK,IAAMA,EAAM,UAAYS,IAAQE,GAA6B,GACjF,CAACJ,GAAa,IAAIP,EAAM,GAAG,CACpC,CAQO,SAASY,GAAmB,CAAE,IAAAC,EAAK,OAAAC,GAAwD,CAChG,OACED,IAAQ,QACPC,aAAkB,kBACjBA,aAAkB,qBAClBA,aAAkB,mBAGlBA,EAAO,QAAQ,uBAAuB,GAAG,iBAAiB,yBAAyB,EAChF,SAAW,EAGX,EACT,CAEO,SAASC,GAAgBC,EAA6B,CAC3D,MAAMC,EAAQD,IAAc,MAE5B,MAAO,CACL,QAASC,EAAQ,aAAe,YAChC,SAAUA,EAAQ,YAAc,YAAA,CAEpC,CC7FA,MAAMC,GAAA,UAQC,SAASC,GAA4BC,EAAqD,CAC/F,OAAOA,EAAgBC,IAAI,CAAC,CAAER,IAAAA,EAAKS,IAAAA,EAAKC,SAAAA,EAAUC,SAAAA,CAAS,IACzDC,EAAAA,IAAC,MAAA,CAECC,UAAWR,GACXS,MAAO,CAAEC,gBAAiBN,EAAM,EAAGC,SAAAA,EAAUC,SAAAA,GAC7C,0BAAyBX,GAHpBA,CAIP,CACD,CACH,CCNO,SAASgB,GAA8B,CAC5C,iBAAAC,EACA,QAAAC,EACA,KAAAC,CACF,EAA+C,CAC7C,MAAMrC,EAASoC,EAAQD,EAAiB,GAAG,EACrCG,EAAMD,EAAKF,EAAiB,MAAM,EACxC,OAAOI,GAAmBvC,EAAQsC,CAAG,CACvC,CAGO,SAASC,GAA0BvC,EAAiCsC,EAAiB,CAC1F,OACEtC,EAAO,gBAAkB,OACxB,OAAOA,EAAO,UAAa,WAAaA,EAAO,SAASsC,CAAG,EAAItC,EAAO,YAAc,EAEzF,CAoBA,SAASwC,GAA8B,CACrC,KAAAH,EACA,eAAAI,EACA,kBAAAC,EACA,OAAAC,EACA,iBAAAC,EACA,sBAAA3C,EACA,OAAAD,CACF,EAMG,CACD,MAAM6C,EAAsBJ,GAAgB,QAAU,EACtD,GAAIE,IAAWC,EACb,OAAO7C,GAAWC,EAAQC,EAAuB,CAAE,KAAM,SAAU,EAGrE,GACEwC,GACAE,EAASC,GACTD,GAAUE,EAAsBD,EAEhC,OAAO7C,GAAWC,EAAQC,EAAuB,CAC/C,KAAM,UACN,IAAKwC,EAAeE,EAASE,CAAmB,CAAA,CACjD,EAGH,GAAIF,GAAU,GAAKA,EAASN,EAAK,OAAQ,CACvC,MAAMC,EAAMD,EAAKM,CAAM,EACvB,OAAO5C,GAAWC,EAAQC,EAAuB,CAAE,KAAM,MAAO,IAAAqC,EAAK,CAAA,CAGvE,GAAII,EACF,OAAO3C,GAAWC,EAAQC,EAAuB,CAC/C,KAAM,UACN,IAAKyC,EAAkBC,EAASN,EAAK,MAAM,CAAA,CAC5C,CAIL,CAEO,SAASS,GAAmC,CACjD,OAAAC,EACA,SAAAC,EACA,mBAAAC,EACA,QAAAb,EACA,eAAAc,EACA,KAAAb,EACA,eAAAI,EACA,kBAAAC,EACA,UAAAS,EACA,iBAAAP,EACA,UAAAQ,EACA,gBAAiB,CAAE,IAAKC,EAAY,OAAQC,CAAA,EAC5C,aAAAC,EACA,sBAAAtD,EACA,mBAAAuD,CACF,EAAqD,CACnD,GAAI,CAAE,IAAKC,EAAS,OAAQC,GAAeH,EAC3C,MAAMI,EAAevB,EAAQ,OAEvBwB,EAAcZ,GAAsB,CAGxC,UAAWhD,KAAUkD,EAAgB,CACnC,MAAMW,EAAS7D,EAAO,IACtB,GAAI6D,EAASJ,EAAS,MACtB,MAAMtD,EAAUqC,GAAuB,CACrC,KAAAH,EACA,eAAAI,EACA,kBAAAC,EACA,OAAQgB,EACR,iBAAAd,EACA,sBAAA3C,EACA,OAAAD,CAAA,CACD,EAED,GAAIG,GAAWsD,EAAUI,GAAUJ,EAAUtD,EAAU0D,EAAQ,CAC7DJ,EAAUI,GAAUb,EAAW7C,EAAU,GACzC,KAAA,CACF,CACF,EAGI2D,EAAmBC,GAChBA,EAAO,MAAQnB,EAGlBoB,EAA8B,IAAM,CACxC,GAAIhB,EAAU,CAGZ,IAAIe,EADe3B,EAAQqB,CAAO,EACV,OACxB,KAAOM,IAAW,QAAW,CAC3B,MAAME,EAAeH,EAAgBC,CAAM,EAC3C,GAAIL,IAAeO,EAAc,CAC/BR,EAAUM,EAAO,IAAMA,EAAO,QAC9B,KAAA,CAEFA,EAASA,EAAO,MAAA,CAClB,SACShB,EAAQ,CAGjB,IAAIgB,EADe3B,EAAQqB,CAAO,EACV,OACpBS,EAAQ,GACZ,KAAOH,IAAW,QAAW,CAC3B,MAAME,EAAeH,EAAgBC,CAAM,EAC3C,GAAIL,GAAcO,EAAc,CAC9BR,EAAUM,EAAO,IACjBL,EAAaO,EACbC,EAAQ,GACR,KAAA,CAEFH,EAASA,EAAO,MAAA,CAIbG,IACHT,EAAUJ,EACVK,EAAaJ,EACf,CACF,EA+BF,GA5BIE,EAAmBD,CAAY,IACjCK,EAAWZ,CAAQ,EAEfU,EAAad,GACfoB,EAAA,GAIAf,IAAuB,eACCQ,IAAYE,EAIlBD,IAAeN,IAE/BK,EAAU,EACVC,GAAc,GANUD,IAAY,KASnBC,IAAeP,IAEhCO,GAAc,EACdD,EAAUE,EAAe,GAE3BC,EAAW,EAAK,IAIhBF,EAAad,GAAoBa,EAAU,IAAMA,EAAUE,EAAc,CAK3E,IAAII,EADe3B,EAAQqB,CAAO,EACV,OACxB,MAAMU,EAAmBT,EAEzB,IADAA,EAAad,EACNmB,IAAW,QAAW,CAC3B,MAAME,EAAeH,EAAgBC,CAAM,EACvCE,GAAgBE,IAClBT,EAAaO,EACbR,EAAUM,EAAO,KAEnBA,EAASA,EAAO,MAAA,CAClB,CAGF,MAAO,CAAE,IAAKN,EAAS,OAAQC,CAAA,CACjC,CAUO,SAASU,GAAY,CAC1B,UAAAC,EACA,UAAAlB,EACA,UAAAC,EACA,iBAAkB,CAAE,OAAAT,EAAQ,IAAAhB,CAAA,EAC5B,SAAA2C,CACF,EAA6B,CAO3B,OAAOA,EAJkB3C,IAAQ,GAEdgB,IAAWQ,EAHNxB,IAAQ0C,GAEd1B,IAAWS,CAI/B,CC1PO,MAAMmB,GAAA,UA6BAC,GAAgB,YAAYD,EAAI,GAEhCE,GAAA,UAaAC,GAAsB,mBAAmBD,EAAU,GAE1DE,GAAA,UAkBOC,GAAA,WAOAC,GAA0B,wBAAwBF,EAAc,GCnEtE,SAASG,GAAYnC,EAA+B,CACzD,MAAO,CAAE,uBAAwBA,CAAA,CACnC,CAEO,SAASoC,GACd/E,EACA2C,EACAqC,EACqB,CACrB,MAAMC,EAAatC,EAAS,EACtBuC,EAAoB,QAAQF,EAAU,CAAC,mCAE7C,OAAIhF,EAAO,SAAW,OACb,CACL,gBAAiB,EACjB,aAAc,EACd,WAAAiF,EACA,kBAAAC,CAAA,EAIG,CACL,gBAAiB,QAAQvC,EAASqC,CAAO,mCACzC,aAAcC,EAAaD,EAC3B,WAAAC,EACA,kBAAAC,CAAA,CAEJ,CAEO,SAASC,GACdnF,EACAG,EAAU,EACW,CACrB,MAAMiF,EAAQpF,EAAO,IAAM,EAC3B,MAAO,CACL,gBAAiBoF,EACjB,cAAeA,EAAQjF,EACvB,iBAAkBH,EAAO,OAAS,yBAAyBA,EAAO,GAAG,IAAM,MAAA,CAE/E,CAEO,SAASqF,GACdrF,KACGsF,EACK,CACR,OAAOxF,GACL0E,GACA,CACE,CAACE,EAAmB,EAAG1E,EAAO,MAAA,EAEhC,GAAGsF,CAAA,CAEP,CChDO,KAAM,CAAE,IAAAC,GAAK,IAAAC,GAAK,MAAAC,GAAO,KAAAC,GAAM,IAAAC,IAAQ,KAEvC,SAASC,GACdC,EACoC,CACpC,GAAI,OAAOA,GAAc,WACvB,MAAM,IAAI,MAAM,uDAAuD,CAE3E,CAEO,SAASC,GACdC,EACA,CAAE,SAAAnE,EAAU,SAAAC,GACJ,CAIR,OAHAkE,EAAQP,GAAIO,EAAOnE,CAAQ,EAGvB,OAAOC,GAAa,UAAYA,GAAYD,EACvC2D,GAAIQ,EAAOlE,CAAQ,EAGrBkE,CACT,CAEO,SAASC,GACdhG,EACA2C,EACA,CACA,OAAO3C,EAAO,SAAW,OAAY2C,EAAS3C,EAAO,MAAQA,EAAO,OAAO,KAC7E,CCnCA,MAAMiG,GAAA,WAkBAC,GAAoB,sBAAsBD,EAAQ,GAEjD,SAASE,GAAe,CAAEC,SAAAA,EAAUC,cAAAA,EAAe,GAAGC,CAAM,EAAwB,CACzF,SAASC,EAAaC,EAAwC,CAC5DJ,EAASI,EAAErF,OAAOsF,QAAUD,EAAEE,YAA2BpC,QAAQ,CACnE,CAEA,OACExC,EAAAA,IAAC,QAAA,CACC6E,IAAMC,GAAO,CACPA,IACFA,EAAGP,cAAgBA,IAAkB,KAGzCQ,KAAK,WACL9E,UAAWmE,GACXE,SAAUG,EACT,GAAGD,CAAA,CACN,CAEJ,CCxCO,SAASQ,GAAmBR,EAA+B,CAChE,GAAI,CACF,OAAOA,EAAM,IAAIA,EAAM,OAAO,GAAc,CAAA,MACtC,CACN,OAAO,IAAA,CAEX,CCHO,MAAMS,GAAkCC,EAAAA,cAA0C,MAAS,EAE3F,SAASC,IAAsD,CACpE,OAAOC,EAAAA,WAAWH,EAA+B,CACnD,CCGO,SAASI,GAAoB,CAClC,MAAAC,EACA,SAAAC,EACA,cAAAhB,EACA,SAAAiB,EACA,SAAAlB,EACA,aAAcmB,EACd,kBAAmBC,CACrB,EAA6B,CAC3B,MAAMrB,EAAiBc,KAAuB,eAE9C,OAAOd,EAAe,CACpB,aAAcoB,EACd,kBAAmBC,EACnB,SAAAH,EACA,cAAAhB,EACA,SAAAiB,EACA,QAASF,EACT,SAAAhB,CAAA,CACD,CACH,CCvBO,MAAMqB,GAAsBT,EAAAA,cAAoD,MAAS,EAEnFU,GAA4BV,EAAAA,cAGvC,MAAS,EAEJ,SAASW,IAAkB,CAChC,MAAMC,EAAsBV,EAAAA,WAAWO,EAAmB,EACpDI,EAA4BX,EAAAA,WAAWQ,EAAyB,EAEtE,GAAIE,IAAwB,QAAaC,IAA8B,OACrE,MAAM,IAAI,MAAM,gDAAgD,EAGlE,MAAO,CACL,uBAAwBD,EAAoB,uBAC5C,cAAeA,EAAoB,cACnC,qBAAsBC,CAAA,CAE1B,CAOO,MAAMC,GAA4Bd,EAAAA,cACvC,MACF,EAEae,GAAkCf,EAAAA,cAE7C,MAAS,EAEJ,SAASgB,IAAwB,CACtC,MAAMC,EAA4Bf,EAAAA,WAAWY,EAAyB,EAChEI,EAAkChB,EAAAA,WAAWa,EAA+B,EAElF,GAAIE,IAA8B,QAAaC,IAAoC,OACjF,MAAM,IAAI,MAAM,4DAA4D,EAG9E,MAAO,CACL,gBAAiBD,EAA0B,gBAC3C,cAAeA,EAA0B,cACzC,qBAAsBC,CAAA,CAE1B,CCrDO,MAAMC,GAAoB,oBAEjC,SAASC,GAAe9B,EAAuC,CAC7D,KAAM,CAAE,gBAAA+B,EAAiB,cAAAC,EAAe,qBAAAC,CAAA,EAAyBP,GAAA,EAEjE,OACElG,EAAAA,IAACqF,GAAA,CACC,aAAW,aACX,SAAUb,EAAM,SAChB,cAAe+B,EACf,MAAOC,EACP,SAAW7B,GAAY,CACrB8B,EAAqB,CAAE,QAASF,EAAkB,GAAQ5B,EAAS,CAAA,CACrE,CAAA,CAGN,CAEA,SAAS+B,GAAgBlC,EAAiC,CACxD,KAAM,CAAE,uBAAAmC,EAAwB,cAAAH,EAAe,qBAAAC,CAAA,EAAyBZ,GAAA,EAExE,OACE7F,EAAAA,IAACqF,GAAA,CACC,aAAW,SACX,SAAUb,EAAM,SAChB,SAAUmC,EACV,MAAOH,EACP,SAAU,CAAC7B,EAASiC,IAAiB,CACnCH,EAAqB,CAAE,IAAKjC,EAAM,IAAK,QAAAG,EAAS,aAAAiC,EAAc,CAAA,CAChE,CAAA,CAGN,CAEA,SAASC,GAAqBrC,EAAsC,CAClE,KAAM,CAAE,cAAAgC,EAAe,qBAAAC,CAAA,EAAyBZ,GAAA,EAEhD,OACE7F,EAAAA,IAACqF,GAAA,CACC,aAAW,eACX,SAAUb,EAAM,SAChB,MAAOgC,EACP,SAAW7B,GAAY,CACrB8B,EAAqB,CAAE,IAAKjC,EAAM,IAAK,QAAAG,EAAS,aAAc,GAAO,CAAA,CACvE,CAAA,CAGN,CAGO,MAAMmC,GAAiC,CAC5C,IAAKT,GACL,KAAM,GACN,MAAO,GACP,SAAU,GACV,SAAU,GACV,UAAW,GACX,SAAU,GACV,OAAQ,GACR,iBAAiB7B,EAAO,CACtB,OAAOxE,MAACsG,GAAA,CAAgB,GAAG9B,CAAA,CAAO,CAAA,EAEpC,WAAWA,EAAO,CAChB,OAAOxE,MAAC0G,GAAA,CAAiB,GAAGlC,CAAA,CAAO,CAAA,EAErC,gBAAgBA,EAAO,CACrB,OAAOxE,MAAC6G,GAAA,CAAsB,GAAGrC,CAAA,CAAO,CAAA,CAE5C,ECnEMuC,GAAA,UAMAC,GAAA,UAQAC,GAA0B,wBAAwBD,EAAc,GAEtE,SAAwBE,GAAwB,CAC9ChJ,OAAAA,EACAiJ,cAAAA,EACAC,SAAAA,CACF,EAAiC,CAC/B,OAAKlJ,EAAOmJ,SAGVrH,EAAAA,IAACsH,GAAA,CAAmBH,cAAAA,EAA8BC,SAAAA,EAC/CG,WAAOC,IAAA,CACV,EAL2BtJ,EAAOsJ,IAOtC,CAWA,SAASF,GAA0B,CACjCH,cAAAA,EACAC,SAAAA,EACAG,SAAAA,CACF,EAAmC,CACjC,MAAME,EAAmBtC,KAA8BsC,iBAEvD,OACEC,EAAAA,KAAC,OAAA,CAAKzH,UAAW8G,GACfQ,SAAA,CAAAvH,EAAAA,IAAC,OAAA,CAAKC,UAAWgH,GAA0BM,SAAAA,CAAA,CAAS,QACnD,OAAA,CAAMA,SAAAE,EAAiB,CAAEN,cAAAA,EAAeC,SAAAA,EAAU,CAAA,CAAE,CAAA,CAAA,CACvD,CAEJ,CC9BA,MAAMO,GAAuB,OACvBC,GAA2B,GAW1B,SAASC,GAA4B,CAC1C,WAAAC,EACA,qBAAAC,EACA,eAAAC,EACA,cAAAC,EACA,WAAAC,EACA,qBAAAC,CACF,EAAiC,CAC/B,MAAMC,EAAeL,GAAsB,OAASJ,GAC9CU,EAAkBN,GAAsB,UAAYH,GACpDU,EAAkBP,GAAsB,UAAY,OACpDQ,EAAoBR,GAAsB,YAAc/C,GACxDwD,EAA0BT,GAAsB,kBAAoBb,GACpEuB,EAAkBV,GAAsB,UAAY,GACpDW,EAAmBX,GAAsB,WAAa,GACtDY,EAAmBZ,GAAsB,WAAa,GAEtD,CAAE,QAAAzH,EAAS,eAAAc,EAAgB,sBAAAjD,EAAuB,gBAAAyK,CAAA,EAAoBC,EAAAA,QAAQ,IAK/E,CACH,IAAI1K,EAAwB,GACxByK,EAAkB,EACtB,MAAMtI,EAA4C,CAAA,EAElDwI,EAAehB,EAAY,CAAC,EAE5B,SAASgB,EACPhB,EACAiB,EACA9G,EACA,CACA,UAAW+G,KAAalB,EAAY,CAClC,GAAI,aAAckB,EAAW,CAC3B,MAAMC,GAA+D,CACnE,KAAMD,EAAU,KAChB,OAAA/G,EACA,IAAK,GACL,QAAS,EACT,MAAO,EACP,gBAAiB+G,EAAU,eAAA,EAG7BF,EAAeE,EAAU,SAAUD,EAAQ,EAAGE,EAAsB,EACpE,QAAA,CAGF,MAAMC,EAASF,EAAU,QAAU,GAE7B9K,GAAyC,CAC7C,GAAG8K,EACH,OAAA/G,EACA,IAAK,EACL,MAAO,EACP,OAAAiH,EACA,MAAOF,EAAU,OAASZ,EAC1B,SAAUY,EAAU,UAAYX,EAChC,SAAUW,EAAU,UAAYV,EAChC,SAAUU,EAAU,UAAYP,EAChC,UAAWO,EAAU,WAAaN,EAClC,UAAWM,EAAU,WAAaL,EAClC,WAAYK,EAAU,YAAcT,EACpC,iBAAkBS,EAAU,kBAAoBR,CAAA,EAGlDlI,EAAQ,KAAKpC,EAAM,EAEfgL,GACF/K,IAGE4K,EAAQH,IACVA,EAAkBG,EACpB,CACF,CAGFzI,EAAQ,KAAK,CAAC,CAAE,IAAK6I,EAAM,OAAQC,CAAA,EAAW,CAAE,IAAKC,EAAM,OAAQC,KAE7DH,IAAS9C,GAA0B,GACnCgD,IAAShD,GAA0B,EAGnC+C,EACEE,EAAgB,EACb,GAELA,EAAgB,EAKb,CACR,EAED,MAAMlI,EAA4C,CAAA,EAClDd,OAAAA,EAAQ,QAAQ,CAACpC,EAAQ2B,IAAQ,CAC/B3B,EAAO,IAAM2B,EACb0J,GAAmBrL,EAAQ2B,EAAK,CAAC,EAE7B3B,EAAO,SAAW,MACpBkD,EAAe,KAAKlD,CAAM,CAC5B,CACD,EAEM,CACL,QAAAoC,EACA,eAAAc,EACA,sBAAAjD,EACA,gBAAAyK,CAAA,CACF,EACC,CACDd,EACAM,EACAC,EACAC,EACAC,EACAC,EACAE,EACAD,EACAE,CAAA,CACD,EAEK,CAAE,gBAAAa,EAAiB,cAAAC,EAAe,uBAAAC,EAAwB,cAAAC,CAAA,EAAkBd,EAAAA,QAAQ,IAKrF,CACH,MAAMc,MAAoB,IAC1B,IAAIC,EAAO,EACPF,EAAyB,EAC7B,MAAMF,EAA4B,CAAA,EAElC,UAAWtL,KAAUoC,EAAS,CAC5B,IAAI2D,EAAQ+D,EAAe9J,CAAM,EAE7B,OAAO+F,GAAU,SACnBA,EAAQD,GAAiBC,EAAO/F,CAAM,EAItC+F,EAAQ/F,EAAO,SAEjBsL,EAAgB,KAAK,GAAGvF,CAAK,IAAI,EACjC0F,EAAc,IAAIzL,EAAQ,CAAE,MAAA+F,EAAO,KAAA2F,EAAM,EACzCA,GAAQ3F,CAAA,CAGV,GAAI9F,IAA0B,GAAI,CAChC,MAAM0L,EAAeF,EAAc,IAAIrJ,EAAQnC,CAAqB,CAAC,EACrEuL,EAAyBG,EAAa,KAAOA,EAAa,KAAA,CAG5D,MAAMJ,EAAwC,CAAA,EAE9C,QAASK,EAAI,EAAGA,GAAK3L,EAAuB2L,IAAK,CAC/C,MAAM5L,EAASoC,EAAQwJ,CAAC,EACxBL,EAAc,qBAAqBvL,EAAO,GAAG,EAAE,EAAI,GAAGyL,EAAc,IAAIzL,CAAM,EAAG,IAAI,IAAA,CAGvF,MAAO,CAAE,gBAAAsL,EAAiB,cAAAC,EAAe,uBAAAC,EAAwB,cAAAC,CAAAA,CAAc,EAC9E,CAAC3B,EAAgB1H,EAASnC,CAAqB,CAAC,EAE7C,CAAC4L,EAAqBC,CAAiB,EAAInB,EAAAA,QAAQ,IAAwB,CAC/E,GAAI,CAACV,EACH,MAAO,CAAC,EAAG7H,EAAQ,OAAS,CAAC,EAG/B,MAAM2J,EAAe/B,EAAawB,EAC5BQ,EAAgBhC,EAAaD,EAE7BkC,EAAa7J,EAAQ,OAAS,EAC9B8J,EAAyB3G,GAAItF,EAAwB,EAAGgM,CAAU,EAGxE,GAAIF,GAAgBC,EAClB,MAAO,CAACE,EAAwBA,CAAsB,EAIxD,IAAIC,EAAqBD,EACzB,KAAOC,EAAqBF,GAAY,CACtC,KAAM,CAAE,KAAAP,EAAM,MAAA3F,CAAA,EAAU0F,EAAc,IAAIrJ,EAAQ+J,CAAkB,CAAC,EAGrE,GAAIT,EAAO3F,EAAQgG,EACjB,MAEFI,GAAA,CAIF,IAAIC,EAAmBD,EACvB,KAAOC,EAAmBH,GAAY,CACpC,KAAM,CAAE,KAAAP,EAAM,MAAA3F,CAAA,EAAU0F,EAAc,IAAIrJ,EAAQgK,CAAgB,CAAC,EAGnE,GAAIV,EAAO3F,GAASiG,EAClB,MAEFI,GAAA,CAGF,MAAMP,EAAsBrG,GAAI0G,EAAwBC,EAAqB,CAAC,EACxEL,EAAoBvG,GAAI0G,EAAYG,EAAmB,CAAC,EAE9D,MAAO,CAACP,EAAqBC,CAAiB,CAAA,EAC7C,CACDL,EACArJ,EACAnC,EACA+J,EACAwB,EACAzB,EACAE,CAAA,CACD,EAED,MAAO,CACL,QAAA7H,EACA,eAAAc,EACA,oBAAA2I,EACA,kBAAAC,EACA,gBAAAR,EACA,cAAAC,EACA,gBAAAb,EACA,sBAAAzK,EACA,uBAAAuL,CAAA,CAEJ,CAEA,SAASH,GACPrL,EACAoF,EACAyF,EACA,CAKA,GAJIA,EAAQ7K,EAAO,QACjBA,EAAO,MAAQ6K,GAGb7K,EAAO,SAAW,OAAW,CAC/B,KAAM,CAAE,OAAA+D,GAAW/D,EACf+D,EAAO,MAAQ,KACjBA,EAAO,IAAMqB,GAEfrB,EAAO,SAAW,EAClBsH,GAAmBtH,EAAQqB,EAAOyF,EAAQ,CAAC,CAAA,CAE/C,CC3RO,SAASwB,GACdjK,EACAX,EACA6J,EACAgB,EACAC,EACAC,EACAC,EACAC,EACAC,EACA,CACA,KAAM,CAACC,EAAoBC,CAAqB,EAAIC,EAAAA,SAG1C,IAAI,EACR,CAACC,EAA0BC,CAA2B,EAC1DF,EAAAA,SAAqC,IAAI,EACrC,CAACG,EAAeC,CAAoB,EAAIJ,EAAAA,SAASP,CAAS,EAC1DY,EAA0B/K,EAAQ,SAAWX,EAAgB,OAC7D2L,EAEJD,GAEAZ,IAAcU,EACVI,EAAqB,CAAC,GAAG/B,CAAe,EACxCgC,EAA6B,CAAA,EAEnC,SAAW,CAAE,IAAApM,EAAK,IAAAS,EAAK,MAAAoE,CAAA,IAAWtE,EAAiB,CACjD,MAAM8L,EAAcf,EAAa,IAAItL,CAAG,EACpCA,IAAQ0L,GAAoB,KAC9BS,EAAmB1L,CAAG,EACpBiL,EAAmB,QAAU,cACzBA,EAAmB,MACnB,GAAGA,EAAmB,KAAK,KACjCU,EAAiB,KAAKpM,CAAG,GAEzB,OAAO6E,GAAU,UAEjBwH,GAAa,OAAS,YACrBH,GACCL,GAA0B,IAAI7L,CAAG,IAAM,IACvCqM,IAAgB,UAElBF,EAAmB1L,CAAG,EAAIoE,EAC1BuH,EAAiB,KAAKpM,CAAG,EAC3B,CAGF,MAAMsM,EAAsBH,EAAmB,KAAK,GAAG,EAEvDI,EAAAA,gBAAgBC,CAA8B,EAE9C,SAASA,GAAiC,CAExC,GADAR,EAAqBX,CAAS,EAC1Be,EAAiB,SAAW,EAAG,OAEnC,MAAMK,EAAkB,IAAI,IAAInB,CAAY,EAC5C,IAAIoB,EAAa,GAEjB,UAAW1M,KAAOoM,EAAkB,CAClC,MAAMO,EAAgBC,GAAmBxB,EAASpL,CAAG,EACrD0M,IAAeC,IAAkBrB,EAAa,IAAItL,CAAG,GAAG,MACpD2M,IAAkB,OACpBF,EAAgB,OAAOzM,CAAG,EAE1ByM,EAAgB,IAAIzM,EAAK,CAAE,KAAM,WAAY,MAAO2M,EAAe,CACrE,CAGF,GAAIjB,IAAuB,KAAM,CAC/B,MAAMmB,EAAcnB,EAAmB,IACjCoB,EAAWxB,EAAa,IAAIuB,CAAW,GAAG,MAC1CE,EAAWH,GAAmBxB,EAASyB,CAAW,EACpDE,IAAa,QAAaD,IAAaC,IACzCL,EAAa,GACbD,EAAgB,IAAII,EAAa,CAC/B,KAAM,UACN,MAAOE,CAAA,CACR,GAEHpB,EAAsB,IAAI,CAAA,CAGxBe,GACFnB,EAAqBkB,CAAe,CACtC,CAGF,SAASO,EAAmBlO,EAAiCmO,EAAyB,CACpF,KAAM,CAAE,IAAKJ,CAAA,EAAgB/N,EA6B7B,GA3BAoO,GAAAA,UAAU,IAAM,CACd,GAAIjB,EAAgB,CAElB,MAAMkB,MAAyB,IAC/B,SAAW,CAAE,IAAAnN,EAAK,MAAA6E,CAAA,IAAWtE,EAEzBsM,IAAgB7M,GAChB,OAAO6E,GAAU,UACjByG,EAAa,IAAItL,CAAG,GAAG,OAAS,WAEhCmN,EAAmB,IAAInN,CAAG,EAI9B8L,EAA4BqB,CAAkB,CAAA,CAGhDxB,EAAsB,CACpB,IAAKkB,EACL,MAAOI,CAAA,CACR,EAEDxB,EAAkB,OAAOwB,GAAc,QAAQ,CAAA,CAChD,EAEDnB,EAA4B,IAAI,EAE5BN,EAAgB,CAClB,MAAM4B,EAAgB9B,EAAa,IAAIuB,CAAW,GAAG,MAC/CE,EACJ,OAAOE,GAAc,SAAWA,EAAYL,GAAmBxB,EAASyB,CAAW,EACjFE,IAAa,QAAaA,IAAaK,GACzC5B,EAAe1M,EAAQiO,CAAQ,CACjC,CACF,CAGF,MAAO,CACL,oBAAAT,EACA,mBAAAU,CAAA,CAEJ,CAEA,SAASJ,GAAmBxB,EAAiDpL,EAAa,CACxF,MAAMqN,EAAW,6BAA6B,IAAI,OAAOrN,CAAG,CAAC,KAE7D,OADsBoL,EAAQ,SAAS,cAAciC,CAAQ,GACvC,wBAAwB,KAChD,CC7IO,SAASC,IAAoB,CAClC,MAAMlC,EAAUmC,EAAAA,OAAuB,IAAI,EACrC,CAACC,EAAYC,CAAa,EAAI7B,EAAAA,SAAS,CAAC,EACxC,CAAC8B,EAAWC,CAAY,EAAI/B,EAAAA,SAAS,CAAC,EACtC,CAACgC,EAA2BC,CAA4B,EAAIjC,EAAAA,SAAS,CAAC,EAE5EW,OAAAA,EAAAA,gBAAgB,IAAM,CACpB,KAAM,CAAE,eAAAuB,GAAmB,OAI3B,GAAIA,GAAkB,KAAM,OAE5B,KAAM,CAAE,YAAAC,EAAa,aAAAC,EAAc,YAAAC,EAAa,aAAAC,CAAA,EAAiB9C,EAAQ,QACnE,CAAE,MAAAvG,EAAO,OAAAsJ,CAAA,EAAW/C,EAAQ,QAAS,sBAAA,EACrCgD,EAAmCF,EAAeF,EAClDK,EAAexJ,EAAQoJ,EAAcF,EACrCO,EAAgBH,EAASC,EAE/BX,EAAcY,CAAY,EAC1BV,EAAaW,CAAa,EAC1BT,EAA6BO,CAAgC,EAE7D,MAAMG,EAAiB,IAAIT,EAAgBU,GAAY,CACrD,MAAMC,EAAOD,EAAQ,CAAC,EAAE,eAAe,CAAC,EAClC,CAAE,aAAAR,EAAc,aAAAE,CAAAA,EAAiB9C,EAAQ,QAG/C8B,GAAAA,UAAU,IAAM,CACdO,EAAcgB,EAAK,UAAU,EAC7Bd,EAAac,EAAK,SAAS,EAC3BZ,EAA6BK,EAAeF,CAAY,CAAA,CACzD,CAAA,CACF,EACD,OAAAO,EAAe,QAAQnD,EAAQ,OAAQ,EAEhC,IAAM,CACXmD,EAAe,WAAA,CAAW,CAC5B,EACC,EAAE,EAEE,CAACnD,EAASoC,EAAYE,EAAWE,CAAyB,CACnE,CCvCO,SAASc,EAAwDC,EAAU,CAChF,MAAMlJ,EAAM8H,EAAAA,OAAOoB,CAAE,EAErBpC,EAAAA,gBAAgB,IAAM,CACpB9G,EAAI,QAAUkJ,CAAA,CACf,EAED,MAAMC,EAAaC,EAAAA,YAAY,IAAI7P,IAAqC,CACtEyG,EAAI,QAAS,GAAGzG,CAAI,CAAA,EACnB,EAAE,EAGL,OAAO2P,GAAKC,CACd,CChBO,SAASE,GAAkBC,EAAqB,CAErD,KAAM,CAACC,EAAgBC,CAAiB,EAAIrD,EAAAA,SAAS,EAAK,EAEtDoD,GAAkB,CAACD,GACrBE,EAAkB,EAAK,EAGzB,SAASC,EAAQ/P,EAAyC,CAExD,GAAIA,EAAM,SAAWA,EAAM,cAAe,CACxC,MAAMgQ,EAAiBhQ,EAAM,cAAc,cACzC,gBAAA,EAIEgQ,IAAmB,MACrBA,EAAe,MAAM,CAAE,cAAe,EAAA,CAAM,EAC5CF,EAAkB,EAAI,GAEtBA,EAAkB,EAAK,CACzB,MAEAA,EAAkB,EAAI,CACxB,CAKF,MAAO,CACL,SAHkBF,GAAc,CAACC,EAGT,EAAI,GAC5B,cAAeD,EAAa,EAAI,GAChC,QAASA,EAAaG,EAAU,MAAA,CAEpC,CCnBO,SAASE,GAA0B,CACxC,QAAAlO,EACA,eAAAc,EACA,KAAAb,EACA,eAAAI,EACA,kBAAAC,EACA,oBAAAmJ,EACA,kBAAAC,EACA,sBAAA7L,EACA,oBAAAsQ,EACA,kBAAAC,CACF,EAA+B,CAE7B,MAAMC,EAAW9F,EAAAA,QAAQ,IAAM,CAC7B,GAAIkB,IAAwB,EAAG,MAAO,GAEtC,IAAI4E,EAAW5E,EAEf,MAAM6E,EAAiB,CAAC7M,EAAgB1D,IAClCA,IAAY,QAAa0D,EAAS1D,EAAU0L,GAE9C4E,EAAW5M,EACJ,IAEF,GAGT,UAAW7D,KAAUkD,EAAgB,CAEnC,MAAMW,EAAS7D,EAAO,IAEtB,GADI6D,GAAU4M,GACVC,EAAe7M,EAAQ9D,GAAWC,EAAQC,EAAuB,CAAE,KAAM,QAAA,CAAU,CAAC,EACtF,MAIF,QAAS0C,EAAS4N,EAAqB5N,GAAU6N,EAAmB7N,IAAU,CAC5E,MAAML,EAAMD,EAAKM,CAAM,EACvB,GACE+N,EAAe7M,EAAQ9D,GAAWC,EAAQC,EAAuB,CAAE,KAAM,MAAO,IAAAqC,CAAA,CAAK,CAAC,EAEtF,KACF,CAIF,GAAIG,GAAkB,MACpB,UAAWH,KAAOG,EAChB,GACEiO,EACE7M,EACA9D,GAAWC,EAAQC,EAAuB,CAAE,KAAM,UAAW,IAAAqC,EAAK,CAAA,EAGpE,MAKN,GAAII,GAAqB,MACvB,UAAWJ,KAAOI,EAChB,GACEgO,EACE7M,EACA9D,GAAWC,EAAQC,EAAuB,CAAE,KAAM,UAAW,IAAAqC,EAAK,CAAA,EAGpE,MAGN,CAGF,OAAOmO,CAAA,EACN,CACDF,EACAC,EACAnO,EACAI,EACAC,EACAmJ,EACA5L,EACAiD,CAAA,CACD,EAED,OAAOyH,EAAAA,QAAQ,IAA0C,CACvD,MAAMlJ,EAA6C,CAAA,EACnD,QAASoC,EAAS,EAAGA,GAAUiI,EAAmBjI,IAAU,CAC1D,MAAM7D,EAASoC,EAAQyB,CAAM,EAEzBA,EAAS4M,GAAY,CAACzQ,EAAO,QACjCyB,EAAgB,KAAKzB,CAAM,CAAA,CAG7B,OAAOyB,CAAA,EACN,CAACgP,EAAU3E,EAAmB1J,CAAO,CAAC,CAC3C,CCtGO,SAASuO,GAAmB,CACjC,KAAAtO,EACA,UAAAuO,EACA,aAAA1B,EACA,UAAA2B,EACA,qBAAA5G,CACF,EAAwB,CACtB,KAAM,CAAE,eAAA6G,EAAgB,iBAAAC,EAAkB,UAAAC,EAAW,aAAAC,EAAc,WAAAC,CAAA,EAAevG,EAAAA,QAAQ,IAAM,CAC9F,GAAI,OAAOiG,GAAc,SACvB,MAAO,CACL,eAAgBA,EAAYvO,EAAK,OACjC,iBAAkB,WAAWA,EAAK,MAAM,KAAKuO,CAAS,MACtD,UAAYjO,GAAmBA,EAASiO,EACxC,aAAc,IAAMA,EACpB,WAAaO,GAAmB1L,GAAM0L,EAASP,CAAS,CAAA,EAI5D,IAAIE,EAAiB,EACjBC,EAAmB,IAIvB,MAAMK,EAAe/O,EAAK,IAAKC,GAAQ,CACrC,MAAM+O,EAAmBT,EAAUtO,CAAG,EAChCgP,EAAW,CAAE,IAAKR,EAAgB,OAAQO,CAAA,EAChDN,OAAAA,GAAoB,GAAGM,CAAgB,MACvCP,GAAkBO,EACXC,CAAA,CACR,EAEKC,EAAkB5O,GACf6C,GAAI,EAAGD,GAAIlD,EAAK,OAAS,EAAGM,CAAM,CAAC,EAG5C,MAAO,CACL,eAAAmO,EACA,iBAAAC,EACA,UAAYpO,GAAmByO,EAAaG,EAAe5O,CAAM,CAAC,EAAE,IACpE,aAAeA,GAAmByO,EAAaG,EAAe5O,CAAM,CAAC,EAAE,OACvE,WAAWwO,EAAgB,CACzB,IAAIK,EAAQ,EACRC,EAAML,EAAa,OAAS,EAChC,KAAOI,GAASC,GAAK,CACnB,MAAMC,EAASF,EAAQ/L,IAAOgM,EAAMD,GAAS,CAAC,EACxCG,EAAgBP,EAAaM,CAAM,EAAE,IAE3C,GAAIC,IAAkBR,EAAQ,OAAOO,EAQrC,GANIC,EAAgBR,EAClBK,EAAQE,EAAS,EACRC,EAAgBR,IACzBM,EAAMC,EAAS,GAGbF,EAAQC,EAAK,OAAOA,CAAA,CAE1B,MAAO,EAAA,CACT,CACF,EACC,CAACb,EAAWvO,CAAI,CAAC,EAEpB,IAAIkO,EAAsB,EACtBC,EAAoBnO,EAAK,OAAS,EAEtC,GAAI4H,EAAsB,CAExB,MAAM2H,EAAqBV,EAAWL,CAAS,EACzCgB,EAAmBX,EAAWL,EAAY3B,CAAY,EAC5DqB,EAAsB/K,GAAI,EAAGoM,EAAqB,CAAiB,EACnEpB,EAAoBjL,GAAIlD,EAAK,OAAS,EAAGwP,EAAmB,CAAiB,CAAA,CAG/E,MAAO,CACL,oBAAAtB,EACA,kBAAAC,EACA,eAAAM,EACA,iBAAAC,EACA,UAAAC,EACA,aAAAC,EACA,WAAAC,CAAA,CAEJ,CCvFA,MAAMY,GAAA,UAMAC,GAA2B,yBAAyBD,EAAe,GAEzE,SAASE,GAAY,CACnBhS,OAAAA,EACAG,QAAAA,EACA8R,eAAAA,EACAC,cAAAA,EACA5P,IAAAA,EACAK,OAAAA,EACAZ,UAAAA,EACAoQ,YAAAA,EACAC,gBAAAA,EACAC,QAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,kBAAAA,EACAC,cAAAA,EACAC,kBAAAA,EACAC,YAAAA,EACAC,WAAAA,EACA5Q,MAAAA,EACA,GAAGsE,CACL,EAA6B,CAC3B,KAAM,CAAEe,SAAAA,EAAUwL,cAAAA,EAAezC,QAAAA,CAAQ,EAAIJ,GAAkBiC,CAAc,EAEvE,CAAEa,UAAAA,CAAU,EAAI9S,EACtB+B,EAAYsD,GACVrF,EACA,CACE,CAAC+R,EAAwB,EAAGG,CAC9B,EACA,OAAOY,GAAc,WAAaA,EAAUxQ,CAAG,EAAIwQ,EACnD/Q,CACF,EACA,MAAMgR,EAAaxQ,GAAmBvC,EAAQsC,CAAG,EAEjD,SAAS0Q,EAAkBC,EAAwB,CACjDL,EAAW,CAAEjQ,OAAAA,EAAQhB,IAAK3B,EAAO2B,GAAI,EAAG,CAAEsR,aAAAA,CAAa,CAAC,CAC1D,CAEA,SAASC,EACP7S,EACA8S,EACA,CACA,IAAIC,EAAe,GACnB,GAAID,EAAc,CAChB,MAAMxS,GAAYF,GAAgBJ,CAAK,EACvC8S,EAAa,CAAExQ,OAAAA,EAAQL,IAAAA,EAAKtC,OAAAA,EAAQ4S,WAAYI,GAAqBrS,EAAS,EAC9EyS,EAAezS,GAAU0S,uBAAA,CAC3B,CACA,OAAOD,CACT,CAEA,SAASE,EAAgBjT,EAAmC,CAC1D8R,IAAc9R,CAAK,EACd6S,EAAiB7S,EAAO+R,CAAe,GAE1CY,EAAA,CAEJ,CAEA,SAASO,EAAYlT,EAAmC,CACtDgS,IAAUhS,CAAK,EACf6S,EAAiB7S,EAAOiS,CAAW,CACrC,CAEA,SAASkB,EAAkBnT,EAAmC,CAC5DkS,IAAgBlS,CAAK,EAChB6S,EAAiB7S,EAAOmS,CAAiB,GAE5CQ,EAAkB,EAAI,CAE1B,CAEA,SAASS,EAAkBpT,EAAmC,CAC5DoS,IAAgBpS,CAAK,EACrB6S,EAAiB7S,EAAOqS,CAAiB,CAC3C,CAEA,SAASgB,EAAgBC,EAAW,CAClChB,EAAY3S,EAAQ2T,CAAM,CAC5B,CAEA,OACE7R,EAAAA,IAAC,MAAA,CACC8R,KAAK,WACL,gBAAe5T,EAAO2B,IAAM,EAC5B,eAAcxB,EACd,gBAAe8R,EACf,gBAAe,CAACc,GAAc,OAC9B1L,SAAAA,EACAtF,UAAAA,EACAC,MAAO,CACL,GAAGmD,GAAanF,EAAQG,CAAO,EAC/B,GAAG6B,GAELqQ,QAASkB,EACTpB,YAAamB,EACbf,cAAeiB,EACff,cAAegB,EACfrD,QAAAA,EACC,GAAG9J,EAEH+C,WAAOwK,WAAW,CACjB7T,OAAAA,EACAsC,IAAAA,EACAK,OAAAA,EACAmR,eAAgBf,EAChB1L,SAAUwL,EACVF,YAAae,EACd,CAAA,CACH,CAEJ,CAEA,MAAMK,GAAgBC,EAAAA,KAAKhC,EAAI,EAIxB,SAAS3H,GAAyBnJ,EAAgBoF,EAAiC,CACxF,OAAOxE,EAAAA,IAACiS,GAAA,CAAyB,GAAGzN,GAATpF,CAAgB,CAC7C,CCzFA,MAAM+S,GAAiB,OAAOC,WAAc,UAAY,OAAOA,UAAUC,UAAa,WAEhFC,GAAA,UAkBN,SAAwBC,GAAgB,CACtCrU,OAAAA,EACAG,QAAAA,EACAmC,IAAAA,EACAK,OAAAA,EACAgQ,YAAAA,EACA2B,YAAAA,EACAC,UAAAA,EACAC,SAAAA,CACF,EAAyB,CACvB,MAAMC,EAAkBhG,EAAAA,OAA+B,MAAS,EAC1DiG,EAAqBjG,EAAAA,OAAwB,MAAS,EACtDkG,EAAkBlG,EAAAA,OAAe,MAAS,EAC1CmG,EAAuB5U,EAAO6U,eAAeD,sBAAwB,GAKrEE,EAA2BlF,EAAc,IAAM,CACnDmF,EAAQ,GAAM,EAAK,CACrB,CAAC,EAEDtH,EAAAA,gBAAgB,IAAM,CACpB,GAAI,CAACmH,EAAsB,OAE3B,SAASI,EAAyB3U,EAAmB,CAGnD,GAFAoU,EAAgBQ,QAAU5U,EAEtB4T,GAAgB,CAClB,MAAMiB,EAAkB,IAAIC,gBACtB,CAAEC,OAAAA,CAAO,EAAIF,EACnBR,EAAmBO,QAAUC,EAG7BhB,UACGC,SAASW,EAA0B,CAClC5L,SAAU,gBACVkM,OAAAA,CACF,CAAC,EAEAC,MAAM,IAAM,EAAE,CACnB,MACEV,EAAgBM,QAAUK,sBAAsBR,CAAwB,CAE5E,CAEA,SAASS,EAAkBlV,EAAmB,CACxCoU,EAAgBQ,UAAY5U,GAC9ByU,EAAA,CAEJ,CAEAU,wBAAiB,YAAaR,EAA0B,CAAES,QAAS,EAAK,CAAC,EACzED,iBAAiB,YAAaD,CAAiB,EAExC,IAAM,CACXG,oBAAoB,YAAaV,EAA0B,CAAES,QAAS,EAAK,CAAC,EAC5EC,oBAAoB,YAAaH,CAAiB,EAClDI,EAAA,EAEJ,EAAG,CAACf,EAAsBE,CAAwB,CAAC,EAEnD,SAASa,GAAa,CACpBlB,EAAgBQ,QAAU,OACtBP,EAAmBO,UAAY,SACjCP,EAAmBO,QAAQW,MAAA,EAC3BlB,EAAmBO,QAAU,QAE3BN,EAAgBM,UAAY,SAC9BY,qBAAqBlB,EAAgBM,OAAO,EAC5CN,EAAgBM,QAAU,OAE9B,CAEA,SAASa,EAAczV,EAA4C,CACjE,GAAIkU,EAAW,CACb,MAAM5T,EAAYF,GAAgBJ,CAAK,EAcvC,GAbAkU,EACE,CACEwB,KAAM,OACNzT,IAAAA,EACAtC,OAAAA,EACA2C,OAAAA,EACA6R,UAAW,CACTA,EAASnU,CAAK,GAEhB0U,QAAAA,GAEFpU,CACF,EACIA,EAAU0S,yBAA0B,MAC1C,CAEIhT,EAAMa,MAAQ,SAEhB6T,EAAA,EACS1U,EAAMa,MAAQ,QACvB6T,EAAQ,EAAI,EACH9T,GAAmBZ,CAAK,GACjCmU,EAASnU,CAAK,CAElB,CAEA,SAAS0U,EAAQiB,EAAgB,GAAOC,EAAkB,GAAM,CAC1DD,EACFrD,EAAYrQ,EAAK,GAAM2T,CAAe,EAEtC3B,EAAY2B,CAAe,CAE/B,CAEA,SAASC,EAAkB5T,EAAQ6T,EAAwB,GAAO,CAChExD,EAAYrQ,EAAK6T,EAAuBA,CAAqB,CAC/D,CAEA,KAAM,CAAErD,UAAAA,CAAU,EAAI9S,EAChB+B,EAAYsD,GAChBrF,EACA,uBACA,CAACA,EAAO6U,eAAeuB,oBAAsBhC,GAC7C,OAAOtB,GAAc,WAAaA,EAAUxQ,CAAG,EAAIwQ,CACrD,EAEA,OACEhR,EAAAA,IAAC,MAAA,CACC8R,KAAK,WACL,gBAAe5T,EAAO2B,IAAM,EAC5B,eAAcxB,EACd,gBAAa,GACb4B,UAAAA,EACAC,MAAOmD,GAAanF,EAAQG,CAAO,EACnCoU,UAAWuB,EACXO,mBAAoBV,EAEnBtM,SAAArJ,EAAOsW,gBAAkB,MACxB9M,EAAAA,KAAA+M,EAAAA,SAAA,CACGlN,SAAA,CAAArJ,EAAOsW,eAAe,CACrBtW,OAAAA,EACAsC,IAAAA,EACAK,OAAAA,EACAgQ,YAAauD,EACbnB,QAAAA,EACD,EACA/U,EAAO6U,eAAeuB,oBACrBpW,EAAO6T,WAAW,CAChB7T,OAAAA,EACAsC,IAAAA,EACAK,OAAAA,EACAmR,eAAgB,GAChBzM,SAAU,GACVsL,YAAauD,CACf,CAAC,CAAA,EACL,CAAA,CAEJ,CAEJ,CC3MA,SAAwBM,GAA+B,CACrD,OAAAxW,EACA,OAAA2C,EACA,eAAAsP,EACA,WAAAW,CACF,EAAwC,CACtC,KAAM,CAAE,SAAAvL,EAAU,QAAA+I,GAAYJ,GAAkBiC,CAAc,EACxD,CAAE,QAAA9R,GAAYH,EACdgF,EAAUgB,GAAqBhG,EAAQ2C,CAAM,EAC7CyC,EAAQpF,EAAO,IAAM,EAE3B,SAASmS,GAAc,CACrBS,EAAW,CAAE,IAAK5S,EAAO,IAAK,OAAA2C,EAAQ,CAAA,CAGxC,OACEb,EAAAA,IAAC,MAAA,CACC,KAAK,eACL,gBAAesD,EACf,eAAcjF,EACd,eAAc6E,EACd,gBAAeiN,EACf,SAAA5K,EACA,UAAWvH,GAAK0E,GAAexE,EAAO,eAAe,EACrD,MAAO,CACL,GAAG+E,GAAmB/E,EAAQ2C,EAAQqC,CAAO,EAC7C,gBAAiBI,EACjB,cAAeA,EAAQjF,CAAA,EAEzB,QAAAiQ,EACA,YAAA+B,EAEC,SAAAnS,EAAO,IAAA,CAAA,CAGd,CCnCA,MAAMyW,GAAA,UAMAC,GAAA,WAMAC,GAAyB,sBAAsBD,EAAa,GAErDE,GAAA,WAWPC,GAAyB,qBAEzBC,GAAA,WAMAC,GAAwB,qBAAqBD,EAAY,GAEzDE,GAAA,WAMAC,GAAoB,sBAAsBD,EAAQ,GAElDE,GAAA,UA8BN,SAAwBC,GAAkB,CACxCnX,OAAAA,EACAG,QAAAA,EACAwC,OAAAA,EACAsP,eAAAA,EACAvF,eAAAA,EACA0K,kBAAAA,EACAC,iBAAAA,EACAC,YAAAA,EACAC,oBAAAA,EACA3E,WAAAA,EACA4E,gBAAAA,EACAnW,UAAAA,EACAoW,iBAAAA,EACAC,oBAAAA,CACF,EAA2B,CACzB,KAAM,CAACC,EAAQC,CAAS,EAAI9K,EAAAA,SAAS,EAAK,EACpC+K,EAAepJ,EAAAA,OAAuB,IAAI,EAC1CqJ,EAAaL,IAAqBzX,EAAOkB,IACzC8D,EAAUgB,GAAqBhG,EAAQ2C,CAAM,EAE7C,CAAE0E,SAAAA,EAAUwL,cAAAA,EAAezC,QAAAA,CAAQ,EAAIJ,GAAkBwH,GAAmBvF,CAAc,EAC1F8F,EAAYT,GAAaU,UAAWC,GAASA,EAAKC,YAAclY,EAAOkB,GAAG,EAC1EiX,EACJJ,IAAc,QAAaA,EAAY,GAAKT,EAAaS,CAAS,EAAI,OAClE9O,EAAgBkP,GAAY9W,UAC5B6H,EAAWiP,IAAe,QAAab,EAAac,OAAS,EAAIL,EAAa,EAAI,OAClFM,EACJpP,GAAiB,CAACC,EAAYD,IAAkB,MAAQ,YAAc,aAAgB,OAClF,CAAEE,SAAAA,EAAUmP,UAAAA,EAAWC,UAAAA,CAAU,EAAIvY,EAErC+B,EAAYsD,GAAiBrF,EAAQA,EAAOwY,gBAAiB,CACjE,CAAC/B,EAAqB,EAAGtN,EACzB,CAACwN,EAAsB,EAAG2B,EAC1B,CAACzB,EAAsB,EAAG0B,EAC1B,CAACxB,EAAqB,EAAGe,EACzB,CAACb,EAAiB,EAAGU,CACvB,CAAC,EAED,SAASc,EAAOC,EAAoB,CAClC,GAAInB,GAAuB,KAAM,OACjC,KAAM,CAAEoB,oBAAAA,CAAoB,EAAI3Y,EAChC,GAAImY,IAAe,OAAW,CAE5B,MAAMS,EAAuB,CAC3BV,UAAWlY,EAAOkB,IAClBG,UAAWsX,EAAsB,OAAS,OAE5CpB,EAAoBD,GAAeoB,EAAY,CAAC,GAAGpB,EAAasB,CAAQ,EAAI,CAACA,CAAQ,CAAC,CACxF,KAAO,CACL,IAAIC,EAUJ,IARGF,IAAwB,IAAQ1P,IAAkB,QAClD0P,IAAwB,IAAQ1P,IAAkB,SAEnD4P,EAAiB,CACfX,UAAWlY,EAAOkB,IAClBG,UAAW4H,IAAkB,MAAQ,OAAS,QAG9CyP,EAAW,CACb,MAAMI,GAAkB,CAAC,GAAGxB,CAAY,EACpCuB,EAEFC,GAAgBf,CAAU,EAAIc,EAG9BC,GAAgBC,OAAOhB,EAAY,CAAC,EAEtCR,EAAoBuB,EAAe,CACrC,MACEvB,EAAoBsB,EAAiB,CAACA,CAAc,EAAI,CAAA,CAAE,CAE9D,CACF,CAEA,SAASG,EAAY3Y,EAAyC,CAC5D+P,IAAU/P,CAAK,EACXmX,GAEF5E,EAAW,CAAEjR,IAAK,EAAGgB,OAAAA,CAAO,CAAC,CAEjC,CAEA,SAASwP,GAAc,CACrBS,EAAW,CAAEjR,IAAK3B,EAAO2B,IAAKgB,OAAAA,CAAO,CAAC,CACxC,CAEA,SAAS0P,GAAQhS,EAA0C,CACrD8I,GACFsP,EAAOpY,EAAM4Y,SAAW5Y,EAAM6Y,OAAO,CAEzC,CAEA,SAAS3E,GAAUlU,EAA6C,CAC9D,KAAM,CAAEa,IAAAA,CAAI,EAAIb,EAChB,GAAI8I,IAAajI,IAAQ,KAAOA,IAAQ,SAEtCb,EAAM8Y,eAAA,EACNV,EAAOpY,EAAM4Y,SAAW5Y,EAAM6Y,OAAO,UAErCZ,GACAzX,GAAkBR,CAAK,IACtBa,IAAQ,aAAeA,IAAQ,cAChC,CAGAb,EAAMD,gBAAA,EACN,KAAM,CAAE2F,MAAAA,CAAM,EAAI1F,EAAM+Y,cAAcC,sBAAA,EAChC,CAAEC,QAAAA,EAAQ,EAAIlY,GAAgBC,CAAS,EAEvC4M,GAAWnI,GAAiBC,GADnB7E,IAAQoY,GAAU,IAAM,IACWtZ,CAAM,EACpDiO,KAAalI,GACf2G,EAAe1M,EAAQiO,EAAQ,CAEnC,CACF,CAEA,SAASsL,GAAYlZ,EAAwC,CAE3D+N,GAAAA,UAAU,IAAM,CACdsJ,EAAoB1X,EAAOkB,GAAG,CAChC,CAAC,EACDb,EAAMmZ,aAAaC,aAAa5B,EAAa5C,QAAU,EAAG,CAAC,EAC3D5U,EAAMmZ,aAAaE,WAAa,MAClC,CAEA,SAASC,IAAY,CACnBjC,EAAoB,MAAS,CAC/B,CAEA,SAASkC,GAAWvZ,EAAwC,CAE1DA,EAAM8Y,eAAA,EACN9Y,EAAMmZ,aAAaE,WAAa,MAClC,CAEA,SAASG,GAAOxZ,EAAwC,CACtDuX,EAAU,EAAK,EAEfvX,EAAM8Y,eAAA,EACN9B,IAAmBI,EAAmBzX,EAAOkB,GAAG,CAClD,CAEA,SAAS4Y,GAAYzZ,EAAwC,CACvD0Z,GAAiB1Z,CAAK,GACxBuX,EAAU,EAAI,CAElB,CAEA,SAASoC,GAAY3Z,EAAwC,CACvD0Z,GAAiB1Z,CAAK,GACxBuX,EAAU,EAAK,CAEnB,CAEA,IAAIqC,GACAC,GACA3B,IACF0B,GAAkB,CAChB1B,UAAW,GACXgB,YAAAA,GACAI,UAAAA,IAGElC,IAAqB,QAAaA,IAAqBzX,EAAOkB,MAChEgZ,GAAkB,CAChBN,WAAAA,GACAE,YAAAA,GACAE,YAAAA,GACAH,OAAAA,MAKN,MAAM7X,GAA6B,CACjC,GAAG+C,GAAmB/E,EAAQ2C,EAAQqC,CAAO,EAC7C,GAAGG,GAAanF,EAAQG,CAAO,GAG3Bga,GAAUna,EAAOgJ,iBAAiB,CACtChJ,OAAAA,EACAiJ,cAAAA,EACAC,SAAAA,EACA7B,SAAUwL,CACZ,CAAC,EAED,OACErJ,EAAAA,KAAA+M,EAAAA,SAAA,CACGlN,SAAA,CAAAyO,GACChW,EAAAA,IAAC,MAAA,CACC6E,IAAKkR,EACL7V,MAAAA,GACAD,UAAWsD,GAAiBrF,EAAQA,EAAOwY,gBAAiBtB,EAAkB,EAE7E7N,SAAA8Q,EAAA,CACH,EAEF3Q,EAAAA,KAAC,MAAA,CACCoK,KAAK,eACL,gBAAe5T,EAAO2B,IAAM,EAC5B,eAAcxB,EACd,eAAc6E,EACd,gBAAeiN,EACf,YAAWoG,EACXhR,SAAAA,EACAtF,UAAAA,EACAC,MAAAA,GACAmQ,YAAAA,EACA/B,QAAS4I,EACT3G,QAAAA,GACAkC,UAAAA,GACC,GAAG0F,GACH,GAAGC,GAEH7Q,SAAA,CAAA8Q,GAEA7B,GACCxW,EAAAA,IAACsY,GAAA,CACC/Y,UAAAA,EACArB,OAAAA,EACA0M,eAAAA,EACA0K,kBAAAA,CAAA,CACF,CAAA,CAAA,CAEJ,CAAA,CAAA,CACF,CAEJ,CAOA,SAASgD,GAAoB,CAC3B/Y,UAAAA,EACArB,OAAAA,EACA0M,eAAAA,EACA0K,kBAAAA,CACF,EAA6B,CAC3B,MAAMiD,EAAoB5L,EAAAA,OAAe,MAAS,EAC5CnN,EAAQD,IAAc,MAE5B,SAASiZ,EAAcja,EAA2C,CAChE,GAAIA,EAAMka,cAAgB,SAAWla,EAAMma,UAAY,EACrD,OAIFna,EAAM8Y,eAAA,EAEN,KAAM,CAAEC,cAAAA,EAAeqB,UAAAA,CAAU,EAAIpa,EACrC+Y,EAAcsB,kBAAkBD,CAAS,EACzC,MAAME,EAAavB,EAAcwB,cAC3B,CAAEC,MAAAA,EAAOnP,KAAAA,CAAK,EAAIiP,EAAWtB,sBAAA,EACnCgB,EAAkBpF,QAAU3T,EAAQjB,EAAMya,QAAUpP,EAAOmP,EAAQxa,EAAMya,OAC3E,CAEA,SAASC,EAAc1a,EAA2C,CAChE,MAAM8Q,EAASkJ,EAAkBpF,QACjC,GAAI9D,IAAW,OAAW,OAC1B,KAAM,CAAEpL,MAAAA,EAAO8U,MAAAA,EAAOnP,KAAAA,GAASrL,EAAM+Y,cAAcwB,cAAevB,sBAAA,EAClE,IAAIpL,EAAW3M,EAAQuZ,EAAQ1J,EAAS9Q,EAAMya,QAAUza,EAAMya,QAAU3J,EAASzF,EACjFuC,EAAWnI,GAAiBmI,EAAUjO,CAAM,EACxC+F,EAAQ,GAAKkI,IAAalI,GAC5B2G,EAAe1M,EAAQiO,CAAQ,CAEnC,CAEA,SAAS+M,GAAuB,CAC9B5D,EAAA,EACAiD,EAAkBpF,QAAU,MAC9B,CAEA,SAAS1C,GAAgB,CACvB7F,EAAe1M,EAAQ,aAAa,CACtC,CAEA,OACE8B,EAAAA,IAAC,MAAA,CACCC,UAAW6U,GACXvE,QAASjS,GACTka,cAAAA,EACAS,cAAAA,EAGAC,qBAAAA,EACAzI,cAAAA,CAAA,CACF,CAEJ,CAKA,SAASwH,GAAiB1Z,EAAwB,CAChD,MAAM4a,EAAgB5a,EAAM4a,cAE5B,MAAO,CAAC5a,EAAM+Y,cAAc8B,SAASD,CAAa,CACpD,CCrYO,MAAM3Y,GAAA,WAmBA6Y,GAAe,WAAW7Y,EAAG,GAE7B8Y,GAAA,WAOAC,GAAuB,mBAEvBC,GAAA,WAaAC,GAAyB,sBAEzBC,GAA4B,yBClBnCC,GAAA,WAkBOC,GAAqB,kBAAkBD,EAAS,GAE7D,SAASE,GAAsC,CAC7CC,eAAAA,EACAjZ,OAAAA,EACAP,QAAAA,EACAsK,eAAAA,EACA0K,kBAAAA,EACAC,iBAAAA,EACAC,YAAAA,EACAC,oBAAAA,EACAtX,sBAAAA,EACA4b,gBAAAA,EACAjJ,WAAAA,EACA4E,gBAAAA,EACAnW,UAAAA,CACF,EAA6B,CAC3B,KAAM,CAACoW,EAAkBC,CAAmB,EAAI5K,WAAA,EAE1CgP,EAAQ,CAAA,EACd,QAAS1W,EAAQ,EAAGA,EAAQhD,EAAQgW,OAAQhT,IAAS,CACnD,MAAMpF,EAASoC,EAAQgD,CAAK,EACtBjF,EAAUJ,GAAWC,EAAQC,EAAuB,CAAE4G,KAAM,QAAS,CAAC,EACxE1G,IAAY,SACdiF,GAASjF,EAAU,GAGrB2b,EAAMC,KACJja,EAAAA,IAACqV,GAAA,CAECnX,OAAAA,EACAG,QAAAA,EACAwC,OAAAA,EACAsP,eAAgB4J,IAAoB7b,EAAO2B,IAC3C+K,eAAAA,EACA0K,kBAAAA,EACAC,iBAAAA,EACAE,oBAAAA,EACAD,YAAAA,EACA1E,WAAAA,EACA4E,gBAAiBA,GAAmBpS,IAAU,EAC9C/D,UAAAA,EACAoW,iBAAAA,EACAC,oBAAAA,CAAA,EAdK1X,EAAOkB,GAed,CACF,CACF,CAEA,OACEY,EAAAA,IAAC,MAAA,CACC8R,KAAK,MACL,gBAAejR,EACfZ,UAAWjC,GACT4b,GACA,CACE,CAACL,EAAoB,EAAGQ,IAAoB,IAE9CD,CACF,EAECvS,SAAAyS,CAAA,CACH,CAEJ,CAEA,MAAAE,GAAehI,EAAAA,KAAK2H,EAAS,EClG7B,SAASM,GAA8B,CACrC,OAAAtZ,EACA,MAAAkI,EACA,QAAAzI,EACA,gBAAAyZ,EACA,WAAAjJ,CACF,EAAuC,CACrC,MAAMkJ,EAAQ,CAAA,EACRI,MAAsB,IAE5B,UAAWlc,KAAUoC,EAAS,CAC5B,GAAI,CAAE,OAAA2B,GAAW/D,EAEjB,GAAI+D,IAAW,OAEf,MAAOA,EAAO,MAAQ8G,GAChB9G,EAAO,SAAW,QACtBA,EAASA,EAAO,OAGlB,GAAIA,EAAO,QAAU8G,GAAS,CAACqR,EAAgB,IAAInY,CAAM,EAAG,CAC1DmY,EAAgB,IAAInY,CAAM,EAC1B,KAAM,CAAE,IAAApC,GAAQoC,EAChB+X,EAAM,KACJha,EAAAA,IAAC0U,GAAA,CAEC,OAAQzS,EACR,OAAApB,EACA,eAAgBkZ,IAAoBla,EACpC,WAAAiR,CAAA,EAJKjR,CAAA,CAKP,CACF,EACF,CAGF,OACEG,EAAAA,IAAC,MAAA,CACC,KAAK,MACL,gBAAea,EACf,UAAW+Y,GAEV,SAAAI,CAAA,CAAA,CAGP,CAEA,MAAAK,GAAenI,EAAAA,KAAKiI,EAAsB,ECnD1C,SAASG,GAAW,CAClB,UAAAra,EACA,OAAAY,EACA,aAAA0Z,EACA,gBAAAR,EACA,uBAAApT,EACA,cAAAH,EACA,mBAAAgU,EACA,sBAAArc,EACA,IAAAqC,EACA,gBAAAb,EACA,mBAAA8a,EACA,gBAAAnK,EACA,YAAAE,EACA,kBAAAE,EACA,kBAAAE,EACA,SAAA8J,EACA,YAAA7J,EACA,WAAAC,EACA,MAAA5Q,EACA,GAAGsE,CACL,EAA0B,CACxB,MAAMuN,EAAa5M,KAA8B,WAE3CyM,EAAkB9D,EAAc,CAAC5P,EAAiC2T,IAAc,CACpFhB,EAAY3S,EAAQ2C,EAAQgR,CAAM,CAAA,CACnC,EAED5R,EAAYjC,GACVqb,GACA,WAAWxY,EAAS,IAAM,EAAI,OAAS,KAAK,GAC5C,CACE,CAAC0Y,EAAoB,EAAGQ,IAAoB,EAAA,EAE9CW,IAAWla,EAAKK,CAAM,EACtBZ,CAAA,EAGF,MAAM+Z,EAAQ,CAAA,EAEd,QAAS1W,EAAQ,EAAGA,EAAQ3D,EAAgB,OAAQ2D,IAAS,CAC3D,MAAMpF,EAASyB,EAAgB2D,CAAK,EAC9B,CAAE,IAAAzD,GAAQ3B,EACVG,EAAUJ,GAAWC,EAAQC,EAAuB,CAAE,KAAM,MAAO,IAAAqC,EAAK,EAC1EnC,IAAY,SACdiF,GAASjF,EAAU,GAGrB,MAAM8R,EAAiB4J,IAAoBla,EAEvCsQ,GAAkBsK,EACpBT,EAAM,KAAKS,CAAkB,EAE7BT,EAAM,KACJjI,EAAW7T,EAAO,IAAK,CACrB,OAAAA,EACA,QAAAG,EACA,IAAAmC,EACA,OAAAK,EACA,cAAe2Z,IAAuB3a,EACtC,eAAAsQ,EACA,gBAAAG,EACA,YAAAE,EACA,kBAAAE,EACA,kBAAAE,EACA,YAAagB,EACb,WAAAd,CAAA,CACD,CAAA,CAEL,CAGF,MAAM6J,EAAiB9R,EAAAA,QACrB,KAAiC,CAAE,cAAArC,EAAe,uBAAAG,IAClD,CAACA,EAAwBH,CAAa,CAAA,EAGxC,OACExG,EAAAA,IAAC2F,GAAA,CAAoB,MAAOgV,EAC1B,SAAA3a,EAAAA,IAAC,MAAA,CACC,KAAK,MACL,UAAAC,EACA,MAAO,CACL,GAAG+C,GAAYuX,CAAY,EAC3B,GAAGra,CAAA,EAEJ,GAAGsE,EAEH,SAAAwV,CAAA,CAAA,EAEL,CAEJ,CAEA,MAAMY,GAAe1I,EAAAA,KAAKoI,EAAG,EAItB,SAASO,GAAwBzb,EAAgBoF,EAA8B,CACpF,OAAOxE,EAAAA,IAAC4a,GAAA,CAAwB,GAAGpW,CAAA,EAATpF,CAAgB,CAC5C,CCpGA,SAAwB0b,GAAa,CACnC,iBAAkB,CAAE,IAAAjb,EAAK,OAAAgB,CAAA,EACzB,QAAA2J,EACA,wBAAAuQ,CACF,EAIG,CACD,MAAMlW,EAAM8H,EAAAA,OAAuB,IAAI,EAEvChB,OAAAA,EAAAA,gBAAgB,IAAM,CAIpBnN,GAAeqG,EAAI,QAAS,MAAM,CAAA,CACnC,EAED8G,EAAAA,gBAAgB,IAAM,CACpB,SAASqP,GAAqB,CAC5BD,EAAwB,IAAI,CAAA,CAG9B,MAAME,EAAW,IAAI,qBAAqBD,EAAoB,CAC5D,KAAMxQ,EAAQ,QACd,UAAW,CAAA,CACZ,EAED,OAAAyQ,EAAS,QAAQpW,EAAI,OAAQ,EAEtB,IAAM,CACXoW,EAAS,WAAA,CAAW,CACtB,EACC,CAACzQ,EAASuQ,CAAuB,CAAC,EAGnC/a,EAAAA,IAAC,MAAA,CACC,IAAA6E,EACA,MAAO,CACL,WAAYhF,IAAQ,OAAY,OAASA,EAAM,EAC/C,QAASgB,IAAW,OAAY,OAASA,EAAS,CAAA,CACpD,CAAA,CAGN,CCjDA,MAAMqa,GAAA,UAUAC,GAAiB,kBAAkBD,EAAK,GAE9C,SAAwBzT,GAAiB,CAAEN,cAAAA,EAAeC,SAAAA,CAAS,EAA0B,CAC3F,OACEM,EAAAA,KAAA+M,EAAAA,SAAA,CACGlN,SAAA,CAAA6T,GAAe,CAAEjU,cAAAA,EAAe,EAChCkU,GAAmB,CAAEjU,SAAAA,CAAS,CAAC,CAAA,CAAA,CAClC,CAEJ,CAEO,SAASgU,GAAe,CAAEjU,cAAAA,CAAc,EAAwB,CACrE,OAAIA,IAAkB,OAAkB,WAGrC,MAAA,CAAImU,QAAQ,WAAWrX,MAAM,KAAKsJ,OAAO,IAAItN,UAAWkb,GAAgB,cAAW,GAClF5T,eAAC,OAAA,CAAKgU,EAAGpU,IAAkB,MAAQ,gBAAkB,gBAAiB,CAAA,CACxE,CAEJ,CAEO,SAASkU,GAAmB,CAAEjU,SAAAA,CAAS,EAA4B,CACxE,OAAOA,CACT,CCJA,MAAMoU,GAAA,UA4EOC,GAAgB,OAAOD,EAAI,GAElCE,GAAA,UAUOC,GAA4B,yBAAyBD,EAAgB,GAErEE,GAAA,WASAC,GAAA,WC7HAC,GAAA,UAgBb,SAASC,GAAmB,CAC1B7d,OAAAA,EACAG,QAAAA,EACAmC,IAAAA,EACAK,OAAAA,EACAsP,eAAAA,EACAW,WAAAA,CACF,EAA4B,CAC1B,KAAM,CAAEvL,SAAAA,EAAUwL,cAAAA,EAAezC,QAAAA,CAAQ,EAAIJ,GAAkBiC,CAAc,EACvE,CAAE6L,iBAAAA,CAAiB,EAAI9d,EACvB+B,EAAYsD,GAChBrF,EACA4d,GACA,OAAOE,GAAqB,WAAaA,EAAiBxb,CAAG,EAAIwb,CACnE,EAEA,SAAS3L,GAAc,CACrBS,EAAW,CAAEjQ,OAAAA,EAAQhB,IAAK3B,EAAO2B,GAAI,CAAC,CACxC,CAEA,OACEG,EAAAA,IAAC,MAAA,CACC8R,KAAK,WACL,gBAAe5T,EAAO2B,IAAM,EAC5B,eAAcxB,EACd,gBAAe8R,EACf5K,SAAAA,EACAtF,UAAAA,EACAC,MAAOmD,GAAanF,EAAQG,CAAO,EACnCgS,YAAAA,EACA/B,QAAAA,EAEC/G,WAAO0U,oBAAoB,CAAE/d,OAAAA,EAAQsC,IAAAA,EAAK+E,SAAUwL,EAAe,CAAA,CACtE,CAEJ,CAEA,MAAAmL,GAAehK,EAAAA,KAAK6J,EAAW,EC9BzBI,GAAA,UAQAC,GAAA,UAYAC,GAAsB,mBAAmBF,EAAU,GAEzD,SAASG,GAAkB,CACzBzb,OAAAA,EACA0Z,aAAAA,EACA/Z,IAAAA,EACAb,gBAAAA,EACA4c,IAAAA,EACAC,OAAAA,EACAre,sBAAAA,EACA4b,gBAAAA,EACA0C,MAAAA,EACA3L,WAAAA,EACA,gBAAiB4L,CACnB,EAA2B,CACzB,MAAM1C,EAAQ,CAAA,EACd,QAAS1W,EAAQ,EAAGA,EAAQ3D,EAAgB2W,OAAQhT,IAAS,CAC3D,MAAMpF,EAASyB,EAAgB2D,CAAK,EAC9BjF,EAAUJ,GAAWC,EAAQC,EAAuB,CAAE4G,KAAM,UAAWvE,IAAAA,CAAI,CAAC,EAC9EnC,IAAY,SACdiF,GAASjF,EAAU,GAGrB,MAAM8R,EAAiB4J,IAAoB7b,EAAO2B,IAElDma,EAAMC,KACJja,EAAAA,IAAC+b,GAAA,CAEC7d,OAAAA,EACAG,QAAAA,EACAmC,IAAAA,EACAK,OAAAA,EACAsP,eAAAA,EACAW,WAAAA,CAAA,EANK5S,EAAOkB,GAOd,CACF,CACF,CAEA,OACEY,EAAAA,IAAC,MAAA,CACC8R,KAAK,MACL,gBAAe4K,EACfzc,UAAWjC,GACTqb,GACA,WAAWxY,EAAS,IAAM,EAAI,OAAS,KAAK,GAC5Cwb,GACA,CACE,CAAC9C,EAAoB,EAAGQ,IAAoB,GAC5C,CAAC,GAAGN,EAAsB,IAAI2C,EAAa,EAAE,EAAGK,EAChD,CAAC/C,EAAyB,EAAG,CAAC+C,CAChC,CACF,EACAvc,MACE,CACE,GAAG8C,GAAYuX,CAAY,EAC3B,wBAAyBgC,IAAQ,OAAY,GAAGA,CAAG,KAAO,OAC1D,2BAA4BC,IAAW,OAAY,GAAGA,CAAM,KAAO,QAItEjV,SAAAyS,CAAA,CACH,CAEJ,CAEA,MAAA2C,GAAezK,EAAAA,KAAKoK,EAAU,ECqIvB,SAASM,GAA+CpY,EAAgC,CAC7F,KAAM,CACJ,IAAAK,EAEA,QAASiD,EACT,KAAAvH,EACA,eAAAI,EACA,kBAAAC,EACA,aAAAic,EACA,aAAAC,EAEA,UAAWC,EACX,gBAAiBC,EACjB,iBAAkBC,EAClB,aAAcC,EACd,qBAAsBC,EAEtB,aAAAC,EACA,uBAAAzW,EACA,qBAAA0W,EACA,YAAA7H,EACA,oBAAAC,EACA,qBAAA1N,EAEA,gBAAAuI,EACA,YAAAE,EACA,kBAAAE,EACA,kBAAAE,EACA,cAAA0M,EACA,qBAAAC,EACA,SAAAC,EACA,eAAA5S,EACA,iBAAA2K,EACA,OAAAkI,EACA,WAAAC,EACA,YAAAC,EAEA,qBAAsBC,EAEtB,UAAAC,EACA,UAAA5d,EACA,MAAAC,GACA,SAAAwa,GACA,eAAAZ,GACA,UAAWgE,GAEX,KAAMC,GACN,aAActY,GACd,kBAAmBC,GACnB,mBAAoBsY,GACpB,mBAAoBC,GACpB,gBAAiBC,GACjB,cAAeC,GACf,UAAWC,EAAA,EACT5Z,EAKE6Z,EAAmBlZ,GAAA,EACnB2M,EAAOiM,IAAW,OAClBjP,EAAYiO,GAAgB,GAC5BuB,GAAkBtB,IAAuB,OAAOlO,GAAc,SAAWA,EAAY,IACrFyP,GAAmBtB,IAAwB,OAAOnO,GAAc,SAAWA,EAAY,IACvF0P,GAAYX,GAAW,WAAaQ,GAAkB,WAAaxD,GACnE9I,GAAa8L,GAAW,YAAcQ,GAAkB,YAAc9V,GACtEd,GACJoW,GAAW,kBAAoBQ,GAAkB,kBAAoBI,GACjEpa,GACJwZ,GAAW,gBAAkBQ,GAAkB,gBAAkBK,GAC7DC,GAAiBd,GAAW,gBAAkBQ,GAAkB,eAChElW,GAAuByV,GAA2B,GAClDre,GAAYue,IAAgB,MAK5B,CAAC/O,GAAW6P,EAAY,EAAI5T,EAAAA,SAAS,CAAC,EACtC,CAAC9C,GAAY2W,EAAa,EAAI7T,EAAAA,SAAS,CAAC,EACxC,CAAC8T,GAAsBC,EAAuB,EAAI/T,EAAAA,SACtD,IAAoBkS,GAAmB,IAAI,GAAI,EAE3C,CAAC8B,GAAkBnU,EAAiB,EAAIG,EAAAA,SAAS,EAAK,EACtD,CAACgL,GAAYiJ,EAAW,EAAIjU,EAAAA,SAAS,EAAK,EAC1C,CAACkU,GAAmBC,EAAoB,EAAInU,EAAAA,SAA6B,MAAS,EAClF,CAACoU,GAAkBC,EAAmB,EAAIrU,EAAAA,SAAiC,IAAI,EAC/E,CAACmJ,GAAiBmL,EAAkB,EAAItU,EAAAA,SAAS,EAAK,EACtD,CAACuU,GAAgBC,EAAiB,EAAIxU,EAAAA,SAAS,EAAE,EAEjDyU,GACJvC,GAAmB,MAAQC,GAA2B,MAAQ,CAAC6B,GAC3DtU,GAAe+U,GAA2BvC,EAAkB4B,GAC5DnU,GAAuB8U,GACxB/U,GAA+B,CAE9BqU,GAAwBrU,CAAY,EACpCyS,EAAwBzS,CAAY,CAAA,EAEtCqU,GAEE/W,GAAiBiG,EAAAA,YACpB/P,GACQwM,GAAa,IAAIxM,EAAO,GAAG,GAAG,OAASA,EAAO,MAEvD,CAACwM,EAAY,CAAA,EAGT,CAACF,GAASC,GAAWiV,GAAY1S,EAAyB,EAAIN,GAAA,EAC9D,CACJ,QAAApM,EACA,eAAAc,GACA,sBAAAjD,EACA,gBAAAyK,GACA,oBAAAmB,GACA,kBAAAC,GACA,gBAAAR,GACA,cAAAC,GACA,uBAAAC,EAAA,EACE7B,GAAqB,CACvB,WAAAC,EACA,qBAAAC,EACA,eAAAC,GACA,WAAAE,GACA,cAAeuC,GACf,qBAAAtC,EAAA,CACD,EAEKpH,GAAsBJ,GAAgB,QAAU,EAChDgf,GAAyB/e,GAAmB,QAAU,EACtDgf,GAAmB7e,GAAsB4e,GACzCE,GAA+BjX,GAAkB7H,GACjD+e,GAA+BlX,GAAkB,EACjDvH,EAAY,CAACwe,GACb/e,GAAmBO,EAAYye,GAC/Bxe,GAAYf,EAAK,OAASof,GAAyB,EAEnD,CAACtf,EAAkB0f,EAAmB,EAAI/U,EAAAA,SAC9C,KAA2C,CAAE,IAAK,GAAI,OAAQ3J,EAAY,EAAG,KAAM,QAAA,EAAS,EAMxF2e,GAAerT,EAAAA,OAAuB,IAAI,EAK1CsT,GAAanO,IAAS,WACtBoO,GAAmBtX,GAAkB0V,GACrC6B,GAAoBP,GAAmBrB,GACvCnR,GAAesS,GAAaQ,GAAmBC,GAC/CC,GAAehD,GAAgB,MAAQC,GAAwB,KAC/D,CAAE,QAAA7F,GAAS,SAAA6I,IAAa/gB,GAAgBC,EAAS,EACjD+gB,GAAepC,IAAmBtV,GAAkBrI,EAAK,OAASqf,GAElEW,GAAwB1X,EAAAA,QAC5B,KAAO,CAAA,eACLxE,GAAA,iBACAoD,GACA,WAAAsK,EAAA,GAEF,CAAC1N,GAAgBoD,GAAkBsK,EAAU,CAAA,EAGzCyO,GAAuB3X,EAAAA,QAAQ,IAAsC,CAEzE,IAAI4X,EAAiB,GACjBC,EAAmB,GAEvB,GAAI7D,GAAgB,MAAQO,GAAgB,MAAQA,EAAa,KAAO,GACtE,UAAW5c,KAAOD,EAOhB,GANI6c,EAAa,IAAIP,EAAarc,CAAG,CAAC,EACpCigB,EAAiB,GAEjBC,EAAmB,GAGjBD,GAAkBC,EAAkB,MAI5C,MAAO,CACL,cAAeD,GAAkB,CAACC,EAClC,gBAAiBD,GAAkBC,CAAA,CACrC,EACC,CAACngB,EAAM6c,EAAcP,CAAY,CAAC,EAE/B,CACJ,oBAAApO,GACA,kBAAAC,GACA,eAAAM,GACA,iBAAAC,GACA,UAAAC,GACA,aAAAC,GACA,WAAAC,EAAA,EACEP,GAAgB,CAClB,KAAAtO,EACA,UAAAuO,EACA,aAAA1B,GACA,UAAA2B,GACA,qBAAA5G,EAAA,CACD,EAEKxI,GAAkB6O,GAAmB,CACzC,QAAAlO,EACA,eAAAc,GACA,oBAAA2I,GACA,kBAAAC,GACA,sBAAA7L,EACA,oBAAAsQ,GACA,kBAAAC,GACA,KAAAnO,EACA,eAAAI,EACA,kBAAAC,CAAA,CACD,EAEK,CAAE,oBAAA8K,GAAqB,mBAAAU,EAAA,EAAuB7B,GAClDjK,EACAX,GACA6J,GACAgB,GACAC,GACAC,GACAC,GACAC,EACAC,EAAA,EAGI8V,GAAYV,GAAa,GAAK,EAC9B1d,GAAYjC,EAAQ,OAAS,EAC7BsgB,GAAsCC,GAA4BxgB,CAAgB,EAClFygB,GAAqCC,GAA2B1gB,CAAgB,EAChF2gB,GACJ1C,GAAkBtP,GAAiBmR,GAAoBnT,GAKnDiU,GAA2BnT,EAAc1B,EAAkB,EAC3D8U,GAA8BpT,EAAcqT,EAAqB,EACjEC,GAA0BtT,EAAcyH,CAAgB,EACxD8L,GAA4BvT,EAAc2H,CAAmB,EAC7D6L,GAAwBxT,EAAcwC,CAAe,EACrDiR,GAAoBzT,EAAc0C,CAAW,EAC7CgR,GAA0B1T,EAAc4C,CAAiB,EACzD+Q,GAA0B3T,EAAc8C,CAAiB,EACzD8Q,GAAwB5T,EAAc6T,EAAe,EACrDC,GAAkB9T,EAAc+T,EAAS,EACzCC,GAAiChU,EAAciU,EAAS,EACxDC,GAAmBlU,EAAcgD,EAAU,EAC3CmR,GAAyBnU,EAAcoU,EAAgB,EAKvDC,GAAYlU,EAAAA,YAChB,CAACmU,EAAe,KAAS,CACvB,MAAM3f,EAAO4f,GAAgB7X,GAAQ,OAAQ,EACzC/H,IAAS,OAET2f,GACF5jB,GAAeiE,CAAI,EAGrBA,EAAK,MAAM,CAAE,cAAe,EAAA,CAAM,EAAA,EAEpC,CAAC+H,EAAO,CAAA,EAMVmB,EAAAA,gBAAgB,IAAM,CAChBwI,KACE6L,GAAa,UAAY,MAAQ3f,EAAiB,MAAQ,IAC5D2f,GAAa,QAAQ,MAAM,CAAE,cAAe,GAAM,EAClDxhB,GAAewhB,GAAa,OAAO,GAEnCmC,GAAA,EAEF7C,GAAmB,EAAK,EAC1B,EACC,CAACnL,GAAiBgO,GAAW9hB,EAAiB,GAAG,CAAC,EAErDiiB,EAAAA,oBAAoBzd,EAAK,KAAO,CAC9B,QAAS2F,GAAQ,QACjB,aAAa,CAAE,IAAA3K,EAAK,OAAAgB,GAAU,CAC5B,MAAM0hB,EACJ1iB,IAAQ,QAAaA,EAAM1B,GAAyB0B,EAAMS,EAAQ,OAAST,EAAM,OAC7E2iB,EACJ3hB,IAAW,QAAa4hB,GAA6B5hB,CAAM,EAAIA,EAAS,QAEtE0hB,IAAgB,QAAaC,IAAmB,SAClDnD,GAAoB,CAAE,IAAKkD,EAAa,OAAQC,EAAgB,CAClE,EAEF,WAAA1R,EAAA,EACA,EAKF,SAAS6Q,GAAgBvjB,EAA4B,CACnD,GAAI,CAACif,EAAsB,OAE3BvZ,GAA6B+Y,CAAY,EAEzC,MAAM6F,EAAkB,IAAI,IAAItF,CAAY,EAC5C,UAAW5c,KAAOD,EAAM,CACtB,GAAIoG,IAAyBnG,CAAG,IAAM,GAAM,SAC5C,MAAMmiB,EAAS9F,EAAarc,CAAG,EAC3BpC,EAAK,QACPskB,EAAgB,IAAIC,CAAM,EAE1BD,EAAgB,OAAOC,CAAM,CAC/B,CAEFtF,EAAqBqF,CAAe,CAAA,CAGtC,SAASb,GAAUzjB,EAAyB,CAC1C,GAAI,CAACif,EAAsB,OAE3BvZ,GAA6B+Y,CAAY,EACzC,KAAM,CAAE,IAAArc,EAAK,QAAAmE,EAAS,aAAAiC,CAAA,EAAiBxI,EACvC,GAAIuI,IAAyBnG,CAAG,IAAM,GAAM,OAC5C,MAAMkiB,EAAkB,IAAI,IAAItF,CAAY,EACtCuF,EAAS9F,EAAarc,CAAG,EACzBK,EAASN,EAAK,QAAQC,CAAG,EAS/B,GARAgf,GAAkB3e,CAAM,EAEpB8D,EACF+d,EAAgB,IAAIC,CAAM,EAE1BD,EAAgB,OAAOC,CAAM,EAI7B/b,GACA2Y,KAAmB,IACnBA,KAAmB1e,GACnB0e,GAAiBhf,EAAK,OACtB,CACA,MAAMqiB,EAAOhf,GAAK/C,EAAS0e,EAAc,EACzC,QAASzV,EAAIyV,GAAiBqD,EAAM9Y,IAAMjJ,EAAQiJ,GAAK8Y,EAAM,CAC3D,MAAMpiB,EAAMD,EAAKuJ,CAAC,EACdnD,IAAyBnG,CAAG,IAAM,KAClCmE,EACF+d,EAAgB,IAAI7F,EAAarc,CAAG,CAAC,EAErCkiB,EAAgB,OAAO7F,EAAarc,CAAG,CAAC,EAC1C,CACF,CAGF6c,EAAqBqF,CAAe,CAAA,CAGtC,SAAS1O,GAAczV,EAAsC,CAC3D,KAAM,CAAE,IAAAsB,EAAK,OAAAgB,EAAQ,KAAAoT,CAAA,EAAS5T,EAC9B,GAAI4T,IAAS,OAAQ,OAErB,GAAIqJ,GAAiBmF,GAA6B5hB,CAAM,EAAG,CACzD,MAAML,EAAMD,EAAKM,CAAM,EACjBhC,EAAYF,GAAgBJ,CAAK,EAWvC,GAVA+e,EACE,CACE,KAAM,SACN,IAAA9c,EACA,OAAQF,EAAQT,CAAG,EACnB,OAAAgB,EACA,WAAAiQ,EAAA,EAEFjS,CAAA,EAEEA,EAAU,yBAA0B,MAAA,CAG1C,GAAI,EAAEN,EAAM,kBAAkB,SAAU,OACxC,MAAMskB,EAActkB,EAAM,OAAO,QAAQ,WAAW,IAAM,KACpDukB,EAAa7C,IAAc1hB,EAAM,SAAWyhB,GAAa,QAC/D,GAAI,GAAC6C,GAAe,CAACC,GAErB,OAAQvkB,EAAM,IAAA,CACZ,IAAK,UACL,IAAK,YACL,IAAK,YACL,IAAK,aACL,IAAK,MACL,IAAK,OACL,IAAK,MACL,IAAK,SACL,IAAK,WACHmU,GAASnU,CAAK,EACd,MACF,QACEwkB,GAAgBxkB,CAAK,EACrB,KAAA,CACJ,CAGF,SAASykB,GAAazkB,EAAsC,CAC1D,KAAM,CAAE,UAAAwQ,EAAW,WAAA7G,CAAAA,EAAe3J,EAAM,cACxC+N,GAAAA,UAAU,IAAM,CACdsS,GAAa7P,CAAS,EAEtB8P,GAAchb,GAAIqE,CAAU,CAAC,CAAA,CAC9B,EACDsV,IAAWjf,CAAK,CAAA,CAGlB,SAASwjB,GAAU7jB,EAAiC2C,EAAgBL,EAAQ,CAE1E,GADI,OAAOsc,GAAiB,YACxBtc,IAAQD,EAAKM,CAAM,EAAG,OAC1B,MAAMoiB,EAAc1iB,EAAK,KAAKM,EAAQL,CAAG,EACzCsc,EAAamG,EAAa,CACxB,QAAS,CAACpiB,CAAM,EAChB,OAAA3C,CAAA,CACD,CAAA,CAGH,SAASglB,IAAsB,CACzB7iB,EAAiB,OAAS,QAC9B0hB,GAAUzhB,EAAQD,EAAiB,GAAG,EAAGA,EAAiB,OAAQA,EAAiB,GAAG,CAAA,CAGxF,SAAS8iB,GAAe5kB,EAA2B,CACjD,GAAI,CAACuiB,GAAoC,OACzC,KAAM,CAAE,IAAAjhB,EAAK,OAAAgB,CAAA,EAAWR,EACxBqd,IAAa,CAAE,IAAKnd,EAAKM,CAAM,EAAG,OAAQP,EAAQT,CAAG,CAAA,EAAKtB,CAAK,CAAA,CAGjE,SAAS6kB,GAAgB7kB,EAA2B,CAClD,GAAI,CAACof,GAAe,CAACb,GAAgB,CAAC9K,GAAe3R,CAAgB,EACnE,OAGF,KAAM,CAAE,IAAAR,EAAK,OAAAgB,CAAA,EAAWR,EAClBnC,EAASoC,EAAQT,CAAG,EACpBwjB,EAAa1F,EAAY,CAAE,IAAKpd,EAAKM,CAAM,EAAG,OAAA3C,CAAA,EAAUK,CAAK,EACnEwjB,GAAU7jB,EAAQ2C,EAAQwiB,CAAU,CAAA,CAGtC,SAASN,GAAgBxkB,EAAsC,CAC7D,GAAI,CAACuiB,GAAoC,OACzC,MAAMtgB,EAAMD,EAAKF,EAAiB,MAAM,EAClC,CAAE,IAAAjB,EAAK,SAAAoD,CAAA,EAAajE,EAG1B,GAAI6hB,IAAgB5d,GAAYpD,IAAQ,IAAK,CAC3C0E,GAA6B+Y,CAAY,EACzC,MAAM8F,EAAS9F,EAAarc,CAAG,EAC/BqhB,GAAU,CAAE,IAAArhB,EAAK,QAAS,CAAC4c,EAAa,IAAIuF,CAAM,EAAG,aAAc,GAAO,EAE1EpkB,EAAM,eAAA,EACN,MAAA,CAGEyT,GAAe3R,CAAgB,GAAKpB,GAAmBV,EAAOof,GAAe,IAAI,GACnFoC,GAAoB,CAAC,CAAE,IAAAlgB,EAAK,OAAAgB,MAAc,CACxC,IAAAhB,EACA,OAAAgB,EACA,KAAM,OACN,IAAAL,EACA,YAAaA,CAAA,EACb,CACJ,CAGF,SAAS2gB,IAAwB,CAE3BnC,KACF7B,IAA0BzS,EAAY,EACtCG,GAAkB,EAAK,EACzB,CAGF,SAASyY,GAA4B/kB,EAA2C,CAE9EA,EAAM,eAAA,EACF,EAAAA,EAAM,cAAgB,SAAWA,EAAM,UAAY,KAGvD0gB,GAAY,EAAI,EAChB1gB,EAAM,cAAc,kBAAkBA,EAAM,SAAS,EAAA,CAGvD,SAASglB,GAA4BhlB,EAA2C,CAE9E,MAAMilB,EAAShZ,GAAQ,QACjBiZ,EAAgCvD,GAAmBnf,GAAsBwd,GACzElP,EACJN,GACA0U,EACAllB,EAAM,QACNilB,EAAO,wBAAwB,IAC3BE,EAAatU,GAAWC,CAAM,EACpC8P,GAAqBuE,CAAU,EAC/B,MAAMhH,EAAemD,GAA+B6D,EAAa,EAC3D5e,EAAK0e,EAAO,cAChB,4BAA4B9G,CAAY,wBAAwBrc,EAAiB,IAAM,CAAC,IAAA,EAE1F7B,GAAesG,CAAE,CAAA,CAGnB,SAAS6e,IAAqC,CAE5C,GADA1E,GAAY,EAAK,EACbC,KAAsB,OAAW,OAErC,KAAM,CAAE,OAAAre,GAAWR,EACb,CAACujB,EAAeC,CAAW,EAC/BhjB,EAASqe,GACL,CAACre,EAAS,EAAGqe,GAAoB,CAAC,EAClC,CAACA,GAAmBre,CAAM,EAChCijB,GAAWF,EAAeC,CAAW,EACrC1E,GAAqB,MAAS,CAAA,CAGhC,SAAS4E,IAAwB,CAE/B5B,GAAU,EAAK,CAAA,CAGjB,SAAS6B,GAA4BzlB,EAAyC,CAC5EA,EAAM,gBAAA,EACNulB,GAAWzjB,EAAiB,OAAS,EAAGE,EAAK,MAAM,CAAA,CAGrD,SAASujB,GAAWG,EAAqBC,EAAmB,CAC1D,GAAIpH,GAAgB,KAAM,OAE1B,KAAM,CAAE,OAAAjc,EAAQ,IAAAhB,CAAA,EAAQQ,EAClBnC,EAASoC,EAAQT,CAAG,EACpBskB,EAAY5jB,EAAKM,CAAM,EACvBoiB,EAAc,CAAC,GAAG1iB,CAAI,EACtB6jB,EAAoB,CAAA,EAC1B,QAASta,EAAIma,EAAana,EAAIoa,EAAWpa,IACvC,GAAIkI,GAAe,CAAE,OAAQlI,EAAG,IAAAjK,CAAA,CAAK,EAAG,CACtC,MAAMwjB,EAAa5F,EAAQ,CAAE,UAAWvf,EAAO,IAAK,UAAAimB,EAAW,UAAW5jB,EAAKuJ,CAAC,CAAA,CAAG,EAC/EuZ,IAAe9iB,EAAKuJ,CAAC,IACvBmZ,EAAYnZ,CAAC,EAAIuZ,EACjBe,EAAQ,KAAKta,CAAC,EAChB,CAIAsa,EAAQ,OAAS,GACnBtH,EAAamG,EAAa,CAAE,QAAAmB,EAAS,OAAAlmB,CAAA,CAAQ,CAC/C,CAMF,SAASmmB,GAA8BxkB,EAAa,CAClD,OAAOA,GAAO8gB,IAAa9gB,GAAO0C,EAAA,CAGpC,SAASkgB,GAA6B5hB,EAAgB,CACpD,OAAOA,GAAU,GAAKA,EAASN,EAAK,MAAA,CAGtC,SAASsgB,GAA4B,CAAE,IAAAhhB,EAAK,OAAAgB,GAA6B,CACvE,OAAOA,GAAUQ,GAAaR,GAAUS,IAAa+iB,GAA8BxkB,CAAG,CAAA,CAGxF,SAASykB,GAAuB,CAAE,IAAAzkB,EAAK,OAAAgB,GAA6B,CAClE,OAAO4hB,GAA6B5hB,CAAM,GAAKhB,GAAO,GAAKA,GAAO0C,EAAA,CAGpE,SAASwe,GAA2B,CAAE,IAAAlhB,EAAK,OAAAgB,GAA6B,CACtE,OAAO4hB,GAA6B5hB,CAAM,GAAKwjB,GAA8BxkB,CAAG,CAAA,CAGlF,SAASmS,GAAexC,EAA6B,CACnD,OACE8U,GAAuB9U,CAAQ,GAC/BpP,GAAuB,CAAE,QAAAE,EAAS,KAAAC,EAAM,iBAAkBiP,EAAU,CAAA,CAIxE,SAASsB,GAAWtB,EAAoB+U,EAAmC,CACzE,GAAI,CAAC1D,GAA4BrR,CAAQ,EAAG,OAC5C0T,GAAA,EAEA,MAAMsB,EAAeC,GAAepkB,EAAkBmP,CAAQ,EAE9D,GAAI+U,GAAS,cAAgBvS,GAAexC,CAAQ,EAAG,CACrD,MAAMhP,EAAMD,EAAKiP,EAAS,MAAM,EAChCuQ,GAAoB,CAAE,GAAGvQ,EAAU,KAAM,OAAQ,IAAAhP,EAAK,YAAaA,EAAK,CAAA,MAC/DgkB,EAEThmB,GAAe6jB,GAAgB7X,GAAQ,OAAQ,CAAC,GAEhD8U,GAAmBiF,GAAS,kBAAoB,EAAI,EACpDxE,GAAoB,CAAE,GAAGvQ,EAAU,KAAM,SAAU,GAGjD+N,GAAwB,CAACiH,GAC3BjH,EAAqB,CACnB,OAAQ/N,EAAS,OACjB,IAAKiT,GAA6BjT,EAAS,MAAM,EAAIjP,EAAKiP,EAAS,MAAM,EAAI,OAC7E,OAAQlP,EAAQkP,EAAS,GAAG,CAAA,CAC7B,CACH,CAGF,SAAS0S,GAAiB,CAAE,IAAAriB,EAAK,OAAAgB,GAA0B,CACzDiQ,GAAW,CAAE,OAAQzP,EAAYR,EAAS,EAAG,IAAAhB,EAAK,CAAA,CAGpD,SAAS6kB,GAAgBtlB,EAAa+X,EAAkB3U,EAA6B,CACnF,KAAM,CAAE,IAAA3C,EAAK,OAAAgB,CAAA,EAAWR,EAClBmG,EAAgBoa,IAAuC/gB,IAAQ,GAErE,OAAQT,EAAA,CACN,IAAK,UACH,MAAO,CAAE,IAAAS,EAAK,OAAQgB,EAAS,CAAA,EACjC,IAAK,YACH,MAAO,CAAE,IAAAhB,EAAK,OAAQgB,EAAS,CAAA,EACjC,KAAK2W,GACH,MAAO,CAAE,IAAK3X,EAAM,EAAG,OAAAgB,CAAA,EACzB,KAAKwf,GACH,MAAO,CAAE,IAAKxgB,EAAM,EAAG,OAAAgB,CAAA,EACzB,IAAK,MACH,MAAO,CAAE,IAAKhB,GAAO2C,EAAW,GAAK,GAAI,OAAA3B,CAAA,EAC3C,IAAK,OAEH,OAAI2F,EAAsB,CAAE,IAAA3G,EAAK,OAAQwB,CAAA,EAClC,CAAE,IAAK,EAAG,OAAQ8V,EAAU9V,EAAYR,CAAA,EACjD,IAAK,MAEH,OAAI2F,EAAsB,CAAE,IAAA3G,EAAK,OAAQyB,EAAA,EAClC,CAAE,IAAKiB,GAAW,OAAQ4U,EAAU7V,GAAYT,CAAA,EACzD,IAAK,SAAU,CACb,GAAIR,EAAiB,SAAWgB,EAAW,OAAOhB,EAClD,MAAMskB,EAAWzV,GAAUrO,CAAM,EAAIsO,GAAatO,CAAM,EAAIuM,GAC5D,MAAO,CAAE,IAAAvN,EAAK,OAAQ8kB,EAAW,EAAIvV,GAAWuV,CAAQ,EAAI,CAAA,CAAE,CAEhE,IAAK,WAAY,CACf,GAAItkB,EAAiB,QAAUE,EAAK,OAAQ,OAAOF,EACnD,MAAMskB,EAAWzV,GAAUrO,CAAM,EAAIuM,GACrC,MAAO,CAAE,IAAAvN,EAAK,OAAQ8kB,EAAW3V,GAAiBI,GAAWuV,CAAQ,EAAIpkB,EAAK,OAAS,CAAA,CAAE,CAE3F,QACE,OAAOF,CAAA,CACX,CAGF,SAASqS,GAASnU,EAAsC,CACtD,KAAM,CAAE,IAAAa,EAAK,SAAAoD,CAAA,EAAajE,EAC1B,IAAI4C,EAAyC,OAC7C,GAAI/B,IAAQ,MAAO,CACjB,GACEkD,GAAY,CACV,SAAAE,EACA,UAAAD,GACA,UAAAlB,EACA,UAAAC,GACA,iBAAAjB,CAAA,CACD,EACD,CACA6iB,GAAA,EAEA,MAAA,CAGF/hB,EAAqB,YAAA,CAIvB5C,EAAM,eAAA,EAEN,MAAM4Y,EAAUpY,GAAkBR,CAAK,EACjCkD,EAAeijB,GAAgBtlB,EAAK+X,EAAS3U,CAAQ,EAC3D,GAAIiiB,GAAepkB,EAAkBoB,CAAY,EAAG,OAEpD,MAAMmjB,EAA2B5jB,GAA4B,CAC3D,OAAQ5B,IAAQ,UAChB,SAAUA,IAAQihB,IAAajhB,IAAQ,OAAS,CAACoD,EACjD,QAAAlC,EACA,eAAAc,GACA,KAAAb,EACA,eAAAI,EACA,kBAAAC,EACA,UAAAS,EACA,iBAAAP,GACA,UAAAQ,GACA,sBAAAnD,EACA,mBAAAgD,EACA,gBAAiBd,EACjB,aAAAoB,EACA,mBAAoBof,EAAA,CACrB,EAED/P,GAAW8T,EAA0B,CAAE,gBAAiB,EAAA,CAAM,CAAA,CAGhE,SAASC,GAAsBrjB,EAA2C,CACxE,GAAI0d,KAAsB,OAAW,OACrC,KAAM,CAAE,OAAAre,GAAWR,EAOnB,OAJEQ,EAASqe,GACLre,EAASW,GAAiBA,GAAiB0d,GAC3Cre,EAASW,GAAiBA,GAAiB0d,IAE1B7e,EAAiB,IAAM,MAAA,CAGhD,SAASykB,IAAgB,CACvB,GACErH,GAAU,MACVpd,EAAiB,OAAS,QAC1B,CAAC0gB,GAA2B1gB,CAAgB,EAE5C,OAGF,KAAM,CAAE,IAAAR,EAAK,OAAAgB,CAAA,EAAWR,EAClBnC,EAASoC,EAAQT,CAAG,EAC1B,GAAI3B,EAAO,gBAAkB,MAAQA,EAAO,WAAa,GACvD,OAGF,MAAM6mB,EAAYlkB,IAAWS,GACvBmK,EAAczD,GAAe9J,CAAM,EACnCG,EAAUH,EAAO,UAAU,CAAE,KAAM,MAAO,IAAKqC,EAAKM,CAAM,CAAA,CAAG,GAAK,EAClE,CAAE,iBAAAmkB,EAAkB,GAAG9kB,GAAUmD,GAAanF,EAAQG,CAAO,EAC7D4mB,EAAY,iDACZC,EAAehnB,EAAO,IAAMG,EAAU,IAAMkE,GAC5C4iB,GAAuC,CAC3C,GAAGjlB,EACH,aAAc2f,GAA+Bhf,EAAS,EACtD,gBAAiBqkB,EAAe,OAAYD,EAC5C,eAAgBF,EAAY,OAAYE,EACxC,iBAAkBD,EACd,QAAQA,CAAgB,MAAMvZ,CAAW,iDACzC,MAAA,EAGN,OACEzL,EAAAA,IAAC,MAAA,CACC,MAAOmlB,GACP,UAAWnnB,GAAK+E,GAAyB7E,EAAO,QAAU4E,EAA6B,EACvF,cAAewgB,GACf,cAAetN,GAAauN,GAA8B,OAC1D,qBAAsBvN,GAAa2N,GAAqC,OACxE,QAASI,GACT,cAAeC,EAAA,CAAA,CACjB,CAIJ,SAASoB,GAAcvkB,EAAgB,CACrC,GAAIR,EAAiB,SAAWQ,GAAUR,EAAiB,OAAS,SAAU,OAE9E,KAAM,CAAE,IAAAR,EAAK,IAAAW,CAAA,EAAQH,EACfnC,EAASoC,EAAQT,CAAG,EACpBxB,EAAUJ,GAAWC,EAAQC,EAAuB,CAAE,KAAM,MAAO,IAAAqC,EAAK,EACxE6kB,EAA2BnnB,EAAO,eAAe,0BAA4B,GAE7EsU,EAAe2B,GAA6B,CAChDmL,GAAmBnL,CAAe,EAClC4L,GAAoB,CAAC,CAAE,IAAAlgB,EAAK,OAAAgB,EAAAA,KAAc,CAAE,IAAAhB,EAAK,OAAAgB,GAAQ,KAAM,UAAW,CAAA,EAGtEgQ,EAAc,CAACrQ,EAAQ0T,EAAwBC,KAA6B,CAC5ED,EAKF5H,GAAAA,UAAU,IAAM,CACdyV,GAAU7jB,EAAQmC,EAAiB,OAAQG,CAAG,EAC9CgS,EAAY2B,EAAe,CAAA,CAC5B,EAED4L,GAAqBvQ,KAAc,CAAE,GAAGA,GAAU,IAAAhP,GAAM,CAC1D,EAGF,OACE6kB,GACA9kB,EAAKF,EAAiB,MAAM,IAAMA,EAAiB,aAGnDmS,EAAY,EAAK,EAIjBxS,EAAAA,IAACuS,GAAA,CAEC,OAAArU,EACA,QAAAG,EACA,IAAAmC,EACA,OAAAK,EACA,YAAAgQ,EACA,YAAA2B,EACA,UAAW8K,EACX,SAAA5K,EAAA,EARKxU,EAAO,GAAA,CASd,CAIJ,SAASonB,GAAsBzkB,EAAgB,CAE7C,MAAM0kB,EAAiBllB,EAAiB,MAAQ,GAAK,OAAYC,EAAQD,EAAiB,GAAG,EAC7F,OACEklB,IAAmB,QACnBllB,EAAiB,SAAWQ,GAC5B,CAAClB,GAAgB,SAAS4lB,CAAc,EAGjCllB,EAAiB,IAAM2J,GAC1B,CAAC,GAAGrK,GAAiB4lB,CAAc,EACnC,CACE,GAAG5lB,GAAgB,MAAM,EAAGxB,EAAwB,CAAC,EACrDonB,EACA,GAAG5lB,GAAgB,MAAMxB,EAAwB,CAAC,CAAA,EAGnDwB,EAAA,CAGT,SAAS6lB,IAAkB,CACzB,MAAMC,EAAiC,CAAA,EAEjC,CAAE,IAAKC,EAAa,OAAQC,GAAmBtlB,EAE/C4jB,EACJnD,IAAsC6E,EAAiBlX,GACnDA,GAAsB,EACtBA,GACAyV,EACJpD,IAAsC6E,EAAiBjX,GACnDA,GAAoB,EACpBA,GAEN,QAASkX,EAAiB3B,EAAa2B,GAAkB1B,EAAW0B,IAAkB,CACpF,MAAMC,EACJD,IAAmBnX,GAAsB,GAAKmX,IAAmBlX,GAAoB,EACjF7N,EAASglB,EAAuBF,EAAiBC,EAEvD,IAAIE,EAAanmB,GACjB,MAAM4lB,EAAiBG,IAAgB,GAAK,OAAYplB,EAAQolB,CAAW,EACvEH,IAAmB,SACjBM,EAEFC,EAAa,CAACP,CAAc,EAG5BO,EAAaR,GAAsBzkB,CAAM,GAI7C,MAAML,GAAMD,EAAKM,CAAM,EACjB0Z,GAAesF,GAA+Bhf,EAAS,EAC7D,IAAIzB,GAAkByB,EAClB2F,GAAgB,GAChB,OAAOqW,GAAiB,aAC1Bzd,GAAMyd,EAAarc,EAAG,EACtBgG,GAAgB4W,GAAc,IAAIhe,EAAG,GAAK,IAG5CqmB,EAAY,KACVjH,GAAUpf,GAAK,CAEb,gBAAiBygB,GAA+Bhf,EAAS,EACzD,gBAAiBuf,GAAe5Z,GAAgB,OAChD,OAAA3F,EACA,IAAAL,GACA,gBAAiBslB,EACjB,uBAAwBnf,IAAyBnG,EAAG,GAAK,GACzD,cAAAgG,GACA,gBAAiB8a,GACjB,YAAaC,GACb,kBAAmBC,GACnB,kBAAmBC,GACnB,SAAA/G,GACA,aAAAH,GACA,gBAAiBoL,IAAmB9kB,EAAS6kB,EAAc,OAC3D,mBAAoBb,GAAsBhkB,CAAM,EAChD,sBAAA1C,EACA,YAAa2jB,GACb,WAAYE,GACZ,mBAAoBoD,GAAcvkB,CAAM,CAAA,CACzC,CAAA,CACH,CAGF,OAAO4kB,CAAA,EAILplB,EAAiB,IAAMkC,IAAalC,EAAiB,OAASiB,MAChEye,GAAoB,CAAE,IAAK,GAAI,OAAQ1e,EAAY,EAAG,KAAM,SAAU,EACtE8d,GAAqB,MAAS,GAI5BM,IAA4BX,KAAyB5B,GACvD6B,GAAwB7B,CAAe,EAGzC,IAAI6I,GAAe,UAAUnd,EAAe,KAAK0V,EAAe,MAC5Dvd,GAAsB,IACxBglB,IAAgB,WAAWhlB,EAAmB,KAAKwd,EAAgB,OAEjEhe,EAAK,OAAS,IAChBwlB,IAAgB9W,IAEd0Q,GAAyB,IAC3BoG,IAAgB,WAAWpG,EAAsB,KAAKpB,EAAgB,OAGxE,MAAMyH,GACJ3lB,EAAiB,MAAQ,IAAMA,EAAiB,SAAWgB,EAAY,EAEzE,OACEqG,EAAAA,KAAC,MAAA,CACC,KAAAoK,EACA,aAAYrM,GACZ,kBAAiBC,GACjB,mBAAkBsY,GAClB,mBAAkBC,GAClB,uBAAsBmC,GAAe,GAAO,OAC5C,gBAAe9f,EAAQ,OACvB,gBAAeggB,GAGf,SAAU,GACV,UAAWtiB,GACTyd,GACA,CACE,CAACE,EAAyB,EAAG3F,EAAA,EAE/B/V,CAAA,EAEF,MACE,CACE,GAAGC,GAEH,yBACEG,EAAiB,IAAMlC,GAAyBihB,IAAkB,MAAQ,OACtE,GAAG1V,EAAsB,KACzB,OACN,mBACE+Y,GAA6BpiB,EAAiB,MAAM,GACpD+e,IAAkB,SAAW,OACzB,GAAGc,GAAmBnf,GAAsBwd,EAAgB,MAC1DoB,GAAyBpB,EAC3B,KACA,OACN,oBAAA7S,GACA,iBAAkBqa,GAClB,0BAA2B,GAAGzH,EAAe,KAC7C,sBAAuB,GAAG0C,EAAY,KACtC,GAAGvX,EAAA,EAGP,IAAKlK,GACL,IAAKiL,GACL,SAAUwY,GACV,UAAWhP,GACX,OAAQmP,GACR,QAASC,GACT,cAAajF,GACb,UAASC,GAET,SAAA,CAAA1W,EAAAA,KAACzC,GAAA,CAAgC,MAAOsb,GACtC,SAAA,CAAAvgB,EAAAA,IAACiG,IAAgC,MAAOyb,GACtC,SAAAha,EAAAA,KAAC1B,GAAA,CAA0B,MAAOwa,GAC/B,SAAA,CAAA,MAAM,KAAK,CAAE,OAAQV,IAAgC,CAACmG,EAAG3iB,IACxDtD,EAAAA,IAACma,GAAA,CAEC,OAAQ7W,EAAQ,EAChB,MAAO,CAACwc,GAA+Bxc,EACvC,QAASgiB,GAAsBjkB,EAAYiC,CAAK,EAChD,gBACEjD,EAAiB,SAAWgB,EAAYiC,EAAQjD,EAAiB,IAAM,OAEzE,WAAY4hB,EAAA,EAPP3e,CAAA,CASR,EACDtD,EAAAA,IAAC6Z,GAAA,CACC,eAAAC,GACA,OAAQlR,GACR,QAAS0c,GAAsBxkB,EAAgB,EAC/C,eAAgBmgB,GAChB,kBAAmBC,GACnB,iBAAkBE,GAClB,YAAA5L,EACA,oBAAqB6L,GACrB,sBAAAljB,EACA,gBACEkC,EAAiB,SAAWS,GAAmBT,EAAiB,IAAM,OAExE,WAAY4hB,GACZ,gBAAiB,CAACrB,GAClB,UAAArhB,EAAA,CAAA,CACF,CAAA,CACF,CAAA,CACF,EACCgB,EAAK,SAAW,GAAKoe,GACpBA,GAEAjX,OAAA+M,EAAAA,SAAA,CACG,SAAA,CAAA9T,GAAgB,IAAI,CAACH,EAAKK,IAAW,CACpC,MAAM0Z,EAAe3R,GAAkB,EAAI/H,EACrCqlB,EAAgBplB,GAAmB,EAAID,EACvCslB,EAAuB9lB,EAAiB,SAAW6lB,EACnD3J,EAAM2D,GAAmB3B,GAAmB1d,EAElD,OACEb,EAAAA,IAACsc,GAAA,CAEC,gBAAe/B,EACf,OAAQ2L,EACR,aAAA3L,EACA,IAAA/Z,EACA,IAAA+b,EACA,OAAQ,OACR,gBAAiB+I,GAAsBY,CAAa,EACpD,sBAAA/nB,EACA,gBAAiBgoB,EAAuB9lB,EAAiB,IAAM,OAC/D,MAAK,GACL,WAAY2hB,EAAA,EAXPnhB,CAAA,CAYP,CAEH,EACDb,EAAAA,IAAC4F,GAAA,CAA0B,MAAOgc,GAC/B,cACH,EACChhB,GAAmB,IAAI,CAACJ,EAAKK,IAAW,CACvC,MAAM0Z,EAAesF,GAA+Btf,EAAK,OAASM,EAAS,EACrEqlB,EAAgB3lB,EAAK,OAASM,EAC9BslB,EAAuB9lB,EAAiB,SAAW6lB,EACnD3J,EACJnP,GAAe4B,GACX0Q,GAAanB,IAAoB3d,EAAkB,OAASC,GAC5D,OACA2b,EACJD,IAAQ,OACJgC,IAAoB3d,EAAkB,OAAS,EAAIC,GACnD,OAEN,OACEb,EAAAA,IAACsc,GAAA,CACC,gBAAegE,GAAeX,GAAyB9e,EAAS,EAEhE,OAAQqlB,EACR,aAAA3L,EACA,IAAA/Z,EACA,IAAA+b,EACA,OAAAC,EACA,gBAAiB8I,GAAsBY,CAAa,EACpD,sBAAA/nB,EACA,gBAAiBgoB,EAAuB9lB,EAAiB,IAAM,OAC/D,MAAO,GACP,WAAY2hB,EAAA,EAVPnhB,CAAA,CAWP,CAEH,CAAA,CAAA,CACH,CAAA,EAEJ,EAECikB,GAAA,EAGAplB,GAAqBC,EAAe,EAGpCsgB,IACCjgB,EAAAA,IAAC,MAAA,CACC,IAAKggB,GACL,SAAUgG,GAAoB,EAAI,GAClC,UAAWhoB,GAAK4d,GAAoB,CAClC,CAACC,EAAkC,EAAG,CAAC4G,GACrCpiB,EAAiB,MAAA,EAEnB,CAACiZ,EAAW,EAAG0M,GACf,CAACxM,EAAyB,EAAGwM,IAAqB7nB,IAA0B,EAAA,CAC7E,EACD,MAAO,CACL,aAAckC,EAAiB,OAASwf,GAA+B,CAAA,CACzE,CAAA,EAIHT,KAAqB,MACpBpf,EAAAA,IAAC8a,GAAA,CACC,iBAAAsE,GACA,wBAAyBC,GACzB,QAAA7U,EAAA,CAAA,CACF,CAAA,CAAA,CAIR,CAEA,SAAS6X,GAAgBmB,EAAwB,CAC/C,OAAOA,EAAO,cAA8B,wCAAwC,CACtF,CAEA,SAASiB,GAAe2B,EAAcC,EAAc,CAClD,OAAOD,EAAG,MAAQC,EAAG,KAAOD,EAAG,SAAWC,EAAG,MAC/C","x_google_ignoreList":[0]}