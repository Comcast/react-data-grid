{"version":3,"file":"ColumnsReordering-BBm2ZJ1g.js","sources":["../../website/routes/ColumnsReordering.tsx?tsr-split=component"],"sourcesContent":["import { useCallback, useMemo, useState } from 'react';\nimport { createFileRoute } from '@tanstack/react-router';\n\nimport { DataGrid } from '../../src';\nimport type { Column, SortColumn } from '../../src';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createFileRoute('/ColumnsReordering')({\n  component: ColumnsReordering\n});\n\ninterface Row {\n  readonly id: number;\n  readonly task: string;\n  readonly complete: number;\n  readonly priority: string;\n  readonly issueType: string;\n}\n\nfunction createRows(): Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.round(Math.random() * 3)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.round(Math.random() * 3)]\n    });\n  }\n\n  return rows;\n}\n\nconst columns: Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80\n  },\n  {\n    key: 'task',\n    name: 'Title',\n    resizable: true,\n    sortable: true,\n    draggable: true\n  },\n  {\n    key: 'priority',\n    name: 'Priority',\n    resizable: true,\n    sortable: true,\n    draggable: true\n  },\n  {\n    key: 'issueType',\n    name: 'Issue Type',\n    resizable: true,\n    sortable: true,\n    draggable: true\n  },\n  {\n    key: 'complete',\n    name: '% Complete',\n    resizable: true,\n    sortable: true,\n    draggable: true\n  }\n];\n\nfunction ColumnsReordering() {\n  const direction = useDirection();\n  const [rows] = useState(createRows);\n  const [columnsOrder, setColumnsOrder] = useState((): readonly number[] =>\n    columns.map((_, index) => index)\n  );\n  const [sortColumns, setSortColumns] = useState<readonly SortColumn[]>([]);\n  const onSortColumnsChange = useCallback((sortColumns: SortColumn[]) => {\n    setSortColumns(sortColumns.slice(-1));\n  }, []);\n\n  const reorderedColumns = useMemo(() => {\n    return columnsOrder.map((index) => columns[index]);\n  }, [columnsOrder]);\n\n  const sortedRows = useMemo((): readonly Row[] => {\n    if (sortColumns.length === 0) return rows;\n    const { columnKey, direction } = sortColumns[0];\n\n    let sortedRows: Row[] = [...rows];\n\n    switch (columnKey) {\n      case 'task':\n      case 'priority':\n      case 'issueType':\n        sortedRows = sortedRows.sort((a, b) => a[columnKey].localeCompare(b[columnKey]));\n        break;\n      case 'complete':\n        sortedRows = sortedRows.sort((a, b) => a[columnKey] - b[columnKey]);\n        break;\n      default:\n    }\n    return direction === 'DESC' ? sortedRows.reverse() : sortedRows;\n  }, [rows, sortColumns]);\n\n  function onColumnsReorder(sourceKey: string, targetKey: string) {\n    setColumnsOrder((columnsOrder) => {\n      const sourceColumnOrderIndex = columnsOrder.findIndex(\n        (index) => columns[index].key === sourceKey\n      );\n      const targetColumnOrderIndex = columnsOrder.findIndex(\n        (index) => columns[index].key === targetKey\n      );\n      const sourceColumnOrder = columnsOrder[sourceColumnOrderIndex];\n      const newColumnsOrder = columnsOrder.toSpliced(sourceColumnOrderIndex, 1);\n      newColumnsOrder.splice(targetColumnOrderIndex, 0, sourceColumnOrder);\n      return newColumnsOrder;\n    });\n  }\n\n  return (\n    <DataGrid\n      columns={reorderedColumns}\n      rows={sortedRows}\n      sortColumns={sortColumns}\n      onSortColumnsChange={onSortColumnsChange}\n      direction={direction}\n      defaultColumnOptions={{ width: '1fr' }}\n      onColumnsReorder={onColumnsReorder}\n    />\n  );\n}\n"],"names":["createRows","rows","i","push","id","task","complete","Math","min","round","random","priority","issueType","columns","key","name","width","resizable","sortable","draggable","SplitComponent","direction","useDirection","useState","columnsOrder","setColumnsOrder","map","_","index","sortColumns","setSortColumns","onSortColumnsChange","useCallback","slice","reorderedColumns","useMemo","sortedRows","length","columnKey","sort","a","b","localeCompare","reverse","onColumnsReorder","sourceKey","targetKey","sourceColumnOrderIndex","findIndex","targetColumnOrderIndex","sourceColumnOrder","newColumnsOrder","toSpliced","splice","jsx","DataGrid"],"mappings":"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"}