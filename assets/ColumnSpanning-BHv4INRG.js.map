{"version":3,"file":"ColumnSpanning-BHv4INRG.js","names":["css","DataGrid","Column","renderCoordinates","useDirection","Route","Row","rows","Array","from","length","_","i","colSpanClassname","columns","key","String","push","name","frozen","resizable","renderCell","colSpan","args","type","row","undefined","cellClass","ColumnSpanning","direction","component"],"sources":["../../website/routes/ColumnSpanning.tsx?tsr-split=component"],"sourcesContent":["import { css } from '@linaria/core';\n\nimport { DataGrid } from '../../src';\nimport type { Column } from '../../src';\nimport { renderCoordinates } from '../renderers';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createFileRoute({\n  component: ColumnSpanning\n});\n\ntype Row = number;\nconst rows: readonly Row[] = Array.from({ length: 100 }, (_, i) => i);\n\nconst colSpanClassname = css`\n  background-color: #ffb300;\n  color: black;\n  text-align: center;\n`;\n\nconst columns: Column<Row>[] = [];\n\nfor (let i = 0; i < 30; i++) {\n  const key = String(i);\n  columns.push({\n    key,\n    name: key,\n    frozen: i < 5,\n    resizable: true,\n    renderCell: renderCoordinates,\n    colSpan(args) {\n      if (args.type === 'ROW') {\n        if (key === '2' && args.row === 2) return 3;\n        if (key === '4' && args.row === 4) return 6; // Will not work as colspan includes both frozen and regular columns\n        if (key === '0' && args.row === 5) return 5;\n        if (key === '27' && args.row === 8) return 3;\n        if (key === '6' && args.row < 8) return 2;\n      }\n      if (args.type === 'HEADER' && key === '8') {\n        return 3;\n      }\n      return undefined;\n    },\n    cellClass(row) {\n      if (\n        (key === '0' && row === 5) ||\n        (key === '2' && row === 2) ||\n        (key === '27' && row === 8) ||\n        (key === '6' && row < 8)\n      ) {\n        return colSpanClassname;\n      }\n      return undefined;\n    }\n  });\n}\n\nfunction ColumnSpanning() {\n  const direction = useDirection();\n\n  return (\n    <DataGrid\n      aria-label=\"Column Spanning Example\"\n      columns={columns}\n      rows={rows}\n      rowHeight={22}\n      className=\"fill-grid\"\n      direction={direction}\n    />\n  );\n}\n"],"mappings":"gHAYMO,EAAuBC,MAAMC,KAAK,CAAEC,OAAQ,IAAK,EAAGC,EAAGC,IAAMA,EAAE,CAE/DC,EAAAA,UAMAC,EAAyB,EAAE,CAEjC,IAAK,IAAIF,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAMG,EAAMC,OAAOJ,EAAE,CACrBE,EAAQG,KAAK,CACXF,MACAG,KAAMH,EACNI,OAAQP,EAAI,EACZQ,UAAW,GACXC,WAAYlB,EACZmB,QAAQC,EAAM,CACZ,GAAIA,EAAKC,OAAS,MAAO,CACvB,GAAIT,IAAQ,KAAOQ,EAAKE,MAAQ,EAAG,MAAO,GAC1C,GAAIV,IAAQ,KAAOQ,EAAKE,MAAQ,EAAG,MAAO,GAC1C,GAAIV,IAAQ,KAAOQ,EAAKE,MAAQ,EAAG,MAAO,GAC1C,GAAIV,IAAQ,MAAQQ,EAAKE,MAAQ,EAAG,MAAO,GAC3C,GAAIV,IAAQ,KAAOQ,EAAKE,IAAM,EAAG,MAAO,GAE1C,GAAIF,EAAKC,OAAS,UAAYT,IAAQ,IACpC,MAAO,IAIXY,UAAUF,EAAK,CACb,GACGV,IAAQ,KAAOU,IAAQ,GACvBV,IAAQ,KAAOU,IAAQ,GACvBV,IAAQ,MAAQU,IAAQ,GACxBV,IAAQ,KAAOU,EAAM,EAEtB,OAAOZ,GAIZ,CAAC,CAGJ,SAASe,GAAiB,CACxB,IAAMC,EAAYzB,GAAc,CAEhC,OACE,EAAA,EAAA,KAAC,EAAA,CACC,aAAW,0BACFU,UACHP,OACN,UAAW,GACX,UAAU,YACCsB,aACX"}