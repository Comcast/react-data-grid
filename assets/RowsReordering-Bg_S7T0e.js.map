{"version":3,"file":"RowsReordering-Bg_S7T0e.js","sources":["../../website/components/DraggableCellRenderer.tsx","../../website/routes/RowsReordering.tsx?tsr-split=component"],"sourcesContent":["import { useState } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { Cell, type CellRendererProps } from '../../src';\n\nconst rowDraggingClassname = css`\n  opacity: 0.5;\n`;\n\nconst rowOverClassname = css`\n  .rdg-row:has(&) {\n    background-color: #ececec;\n  }\n`;\n\ninterface DraggableCellRenderProps<R, SR> extends CellRendererProps<R, SR> {\n  onRowReorder: (sourceIndex: number, targetIndex: number) => void;\n}\n\nexport function DraggableCellRenderer<R, SR>({\n  rowIdx,\n  className,\n  onRowReorder,\n  ...props\n}: DraggableCellRenderProps<R, SR>) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [isOver, setIsOver] = useState(false);\n\n  className = clsx(className, {\n    [rowDraggingClassname]: isDragging,\n    [rowOverClassname]: isOver\n  });\n\n  function onDragStart(event: React.DragEvent<HTMLDivElement>) {\n    setIsDragging(true);\n    // TODO: use a custom drag image to show a preview of the row being dragged\n    event.dataTransfer.setDragImage(event.currentTarget.parentElement!.firstElementChild!, 40, 17);\n    event.dataTransfer.setData('text/plain', String(rowIdx));\n    event.dataTransfer.dropEffect = 'move';\n  }\n\n  function onDragEnd() {\n    setIsDragging(false);\n  }\n\n  function onDragOver(event: React.DragEvent<HTMLDivElement>) {\n    // prevent default to allow drop\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }\n\n  function onDrop(event: React.DragEvent<HTMLDivElement>) {\n    setIsOver(false);\n    // prevent the browser from redirecting in some cases\n    event.preventDefault();\n    onRowReorder(Number(event.dataTransfer.getData('text/plain')), rowIdx);\n  }\n\n  function onDragEnter(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(true);\n    }\n  }\n\n  function onDragLeave(event: React.DragEvent<HTMLDivElement>) {\n    if (isEventPertinent(event)) {\n      setIsOver(false);\n    }\n  }\n\n  return (\n    <Cell\n      draggable\n      onDragStart={onDragStart}\n      onDragEnd={onDragEnd}\n      onDragOver={onDragOver}\n      onDragEnter={onDragEnter}\n      onDragLeave={onDragLeave}\n      onDrop={onDrop}\n      rowIdx={rowIdx}\n      className={className}\n      {...props}\n    />\n  );\n}\n\n// only accept pertinent drag events:\n// - ignore drag events going from the container to an element inside the container\n// - ignore drag events going from an element inside the container to the container\nfunction isEventPertinent(event: React.DragEvent) {\n  const relatedTarget = event.relatedTarget as HTMLElement | null;\n\n  return !event.currentTarget.contains(relatedTarget);\n}\n","import { useCallback, useState } from 'react';\n\nimport { DataGrid, textEditor } from '../../src';\nimport type { CellRendererProps, Column } from '../../src';\nimport { DraggableCellRenderer } from '../components';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createFileRoute({\n  component: RowsReordering\n});\n\ninterface Row {\n  id: number;\n  task: string;\n  complete: number;\n  priority: string;\n  issueType: string;\n}\n\nfunction createRows(): readonly Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.round(Math.random() * 3)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.round(Math.random() * 3)]\n    });\n  }\n\n  return rows;\n}\n\nconst columns: readonly Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80\n  },\n  {\n    key: 'task',\n    name: 'Title',\n    renderEditCell: textEditor\n  },\n  {\n    key: 'priority',\n    name: 'Priority'\n  },\n  {\n    key: 'issueType',\n    name: 'Issue Type'\n  },\n  {\n    key: 'complete',\n    name: '% Complete'\n  }\n];\n\nfunction RowsReordering() {\n  const direction = useDirection();\n  const [rows, setRows] = useState(createRows);\n\n  const renderCell = useCallback((key: React.Key, props: CellRendererProps<Row, unknown>) => {\n    function onRowReorder(fromIndex: number, toIndex: number) {\n      function reorderRows() {\n        setRows((rows) => {\n          const row = rows[fromIndex];\n          const newRows = rows.toSpliced(fromIndex, 1);\n          newRows.splice(toIndex, 0, row);\n          return newRows;\n        });\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (document.startViewTransition) {\n        document.startViewTransition(reorderRows);\n      } else {\n        reorderRows();\n      }\n    }\n\n    return <DraggableCellRenderer key={key} {...props} onRowReorder={onRowReorder} />;\n  }, []);\n\n  return (\n    <DataGrid\n      columns={columns}\n      rows={rows}\n      onRowsChange={setRows}\n      renderers={{ renderCell }}\n      direction={direction}\n    />\n  );\n}\n"],"names":["rowDraggingClassname","rowOverClassname","DraggableCellRenderer","rowIdx","className","onRowReorder","props","isDragging","setIsDragging","useState","isOver","setIsOver","clsx","onDragStart","event","dataTransfer","setDragImage","currentTarget","parentElement","firstElementChild","setData","String","dropEffect","onDragEnd","onDragOver","preventDefault","onDrop","Number","getData","onDragEnter","isEventPertinent","onDragLeave","jsx","Cell","draggable","relatedTarget","contains","createRows","rows","i","push","id","task","complete","Math","min","round","random","priority","issueType","columns","key","name","width","renderEditCell","textEditor","SplitComponent","direction","useDirection","setRows","renderCell","useCallback","fromIndex","toIndex","reorderRows","row","newRows","toSpliced","splice","document","startViewTransition","DataGrid"],"mappings":"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"}