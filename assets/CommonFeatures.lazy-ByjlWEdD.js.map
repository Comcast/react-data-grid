{"version":3,"mappings":"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","names":["exportToCsv","gridEl","fileName","head","body","foot","getGridContent","content","cells","serialiseCellValue","downloadFile","exportToPdf","jsPDF","autoTable","__vitePreload","n","doc","getRows","selector","gridRow","gridCell","value","formattedValue","data","downloadLink","url","Route","createLazyFileRoute","component","CommonFeatures","toolbarClassname","dialogContainerClassname","dateFormatter","Intl","DateTimeFormat","navigator","language","currencyFormatter","NumberFormat","style","currency","getColumns","countries","direction","SelectColumn","key","name","frozen","resizable","renderSummaryCell","jsx","children","renderEditCell","textEditor","row","totalCount","width","draggable","p","autoFocus","className","textEditorClassname","country","onChange","e","onRowChange","target","map","renderCell","props","progress","jsxs","Fragment","max","inlineSize","Math","round","onClose","createPortal","dir","onKeyDown","event","open","type","min","valueAsNumber","onClick","document","editorOptions","displayCellContent","format","startTimestamp","endTimestamp","budget","tabIndex","SelectCellFormatter","available","yesCount","floor","rowKeyGetter","id","createRows","now","Date","rows","i","push","title","client","faker","company","area","person","jobArea","location","contact","internet","exampleEmail","assignee","fullName","random","transaction","finance","transactionType","account","iban","version","system","semver","getComparator","sortColumn","a","b","localeCompare","Error","useDirection","setRows","useState","sortColumns","setSortColumns","selectedRows","setSelectedRows","Set","isExporting","setIsExporting","gridRef","useRef","useMemo","r","sort","Collator","compare","columns","summaryRows","length","filter","sortedRows","compResult","columnKey","handleExportToCsv","flushSync","current","element","handleExportToPdf","DataGrid","ref","defaultColumnOptions","sortable","onSelectedRowsChange","onRowsChange","onSortColumnsChange","topSummaryRows","bottomSummaryRows","enableVirtualization"],"ignoreList":[],"sources":["../../website/exportUtils.tsx","../../website/routes/CommonFeatures.lazy.tsx"],"sourcesContent":["export function exportToCsv(gridEl: HTMLDivElement, fileName: string) {\n  const { head, body, foot } = getGridContent(gridEl);\n  const content = [...head, ...body, ...foot]\n    .map((cells) => cells.map(serialiseCellValue).join(','))\n    .join('\\n');\n\n  downloadFile(fileName, new Blob([content], { type: 'text/csv;charset=utf-8;' }));\n}\n\nexport async function exportToPdf(gridEl: HTMLDivElement, fileName: string) {\n  const { head, body, foot } = getGridContent(gridEl);\n  const [{ jsPDF }, { default: autoTable }] = await Promise.all([\n    import('jspdf'),\n    import('jspdf-autotable')\n  ]);\n  const doc = new jsPDF({\n    orientation: 'l',\n    unit: 'px'\n  });\n\n  autoTable(doc, {\n    head,\n    body,\n    foot,\n    horizontalPageBreak: true,\n    styles: { cellPadding: 1.5, fontSize: 8, cellWidth: 'wrap' },\n    tableWidth: 'wrap'\n  });\n  doc.save(fileName);\n}\n\nfunction getGridContent(gridEl: HTMLDivElement) {\n  return {\n    head: getRows('.rdg-header-row'),\n    body: getRows('.rdg-row:not(.rdg-summary-row)'),\n    foot: getRows('.rdg-summary-row')\n  };\n\n  function getRows(selector: string) {\n    return Array.from(gridEl.querySelectorAll<HTMLDivElement>(selector)).map((gridRow) => {\n      return Array.from(gridRow.querySelectorAll<HTMLDivElement>('.rdg-cell')).map(\n        (gridCell) => gridCell.innerText\n      );\n    });\n  }\n}\n\nfunction serialiseCellValue(value: unknown) {\n  if (typeof value === 'string') {\n    const formattedValue = value.replace(/\"/g, '\"\"');\n    return formattedValue.includes(',') ? `\"${formattedValue}\"` : formattedValue;\n  }\n  return value;\n}\n\nfunction downloadFile(fileName: string, data: Blob) {\n  const downloadLink = document.createElement('a');\n  downloadLink.download = fileName;\n  const url = URL.createObjectURL(data);\n  downloadLink.href = url;\n  downloadLink.click();\n  URL.revokeObjectURL(url);\n}\n","import { useMemo, useRef, useState } from 'react';\nimport { createPortal, flushSync } from 'react-dom';\nimport { faker } from '@faker-js/faker';\nimport { createLazyFileRoute } from '@tanstack/react-router';\nimport { css } from '@linaria/core';\n\nimport DataGrid, {\n  SelectCellFormatter,\n  SelectColumn,\n  textEditor,\n  type Column,\n  type DataGridHandle,\n  type SortColumn\n} from '../../src';\nimport { textEditorClassname } from '../../src/editors/textEditor';\nimport type { Direction } from '../../src/types';\nimport { useDirection } from '../directionContext';\nimport { exportToCsv, exportToPdf } from '../exportUtils';\n\nexport const Route = createLazyFileRoute('/CommonFeatures')({\n  component: CommonFeatures\n});\n\nconst toolbarClassname = css`\n  display: flex;\n  justify-content: flex-end;\n  gap: 8px;\n  margin-block-end: 8px;\n`;\n\nconst dialogContainerClassname = css`\n  position: absolute;\n  inset: 0;\n  display: flex;\n  place-items: center;\n  background: rgba(0, 0, 0, 0.1);\n\n  > dialog {\n    width: 300px;\n    > input {\n      width: 100%;\n    }\n\n    > menu {\n      text-align: end;\n    }\n  }\n`;\n\nconst dateFormatter = new Intl.DateTimeFormat(navigator.language);\nconst currencyFormatter = new Intl.NumberFormat(navigator.language, {\n  style: 'currency',\n  currency: 'eur'\n});\n\ninterface SummaryRow {\n  id: string;\n  totalCount: number;\n  yesCount: number;\n}\n\ninterface Row {\n  id: number;\n  title: string;\n  client: string;\n  area: string;\n  country: string;\n  contact: string;\n  assignee: string;\n  progress: number;\n  startTimestamp: number;\n  endTimestamp: number;\n  budget: number;\n  transaction: string;\n  account: string;\n  version: string;\n  available: boolean;\n}\n\nfunction getColumns(\n  countries: readonly string[],\n  direction: Direction\n): readonly Column<Row, SummaryRow>[] {\n  return [\n    SelectColumn,\n    {\n      key: 'id',\n      name: 'ID',\n      frozen: true,\n      resizable: false,\n      renderSummaryCell() {\n        return <strong>Total</strong>;\n      }\n    },\n    {\n      key: 'title',\n      name: 'Task',\n      frozen: true,\n      renderEditCell: textEditor,\n      renderSummaryCell({ row }) {\n        return `${row.totalCount} records`;\n      }\n    },\n    {\n      key: 'client',\n      name: 'Client',\n      width: 'max-content',\n      draggable: true,\n      renderEditCell: textEditor\n    },\n    {\n      key: 'area',\n      name: 'Area',\n      renderEditCell: textEditor\n    },\n    {\n      key: 'country',\n      name: 'Country',\n      renderEditCell: (p) => (\n        <select\n          autoFocus\n          className={textEditorClassname}\n          value={p.row.country}\n          onChange={(e) => p.onRowChange({ ...p.row, country: e.target.value }, true)}\n        >\n          {countries.map((country) => (\n            <option key={country}>{country}</option>\n          ))}\n        </select>\n      )\n    },\n    {\n      key: 'contact',\n      name: 'Contact',\n      renderEditCell: textEditor\n    },\n    {\n      key: 'assignee',\n      name: 'Assignee',\n      renderEditCell: textEditor\n    },\n    {\n      key: 'progress',\n      name: 'Completion',\n      renderCell(props) {\n        const value = props.row.progress;\n        return (\n          <>\n            <progress max={100} value={value} style={{ inlineSize: 50 }} /> {Math.round(value)}%\n          </>\n        );\n      },\n      renderEditCell({ row, onRowChange, onClose }) {\n        return createPortal(\n          <div\n            dir={direction}\n            className={dialogContainerClassname}\n            onKeyDown={(event) => {\n              if (event.key === 'Escape') {\n                onClose();\n              }\n            }}\n          >\n            <dialog open>\n              <input\n                autoFocus\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                value={row.progress}\n                onChange={(e) => onRowChange({ ...row, progress: e.target.valueAsNumber })}\n              />\n              <menu>\n                <button type=\"button\" onClick={() => onClose()}>\n                  Cancel\n                </button>\n                <button type=\"button\" onClick={() => onClose(true)}>\n                  Save\n                </button>\n              </menu>\n            </dialog>\n          </div>,\n          document.body\n        );\n      },\n      editorOptions: {\n        displayCellContent: true\n      }\n    },\n    {\n      key: 'startTimestamp',\n      name: 'Start date',\n      renderCell(props) {\n        return dateFormatter.format(props.row.startTimestamp);\n      }\n    },\n    {\n      key: 'endTimestamp',\n      name: 'Deadline',\n      renderCell(props) {\n        return dateFormatter.format(props.row.endTimestamp);\n      }\n    },\n    {\n      key: 'budget',\n      name: 'Budget',\n      renderCell(props) {\n        return currencyFormatter.format(props.row.budget);\n      }\n    },\n    {\n      key: 'transaction',\n      name: 'Transaction type'\n    },\n    {\n      key: 'account',\n      name: 'Account'\n    },\n    {\n      key: 'version',\n      name: 'Version',\n      renderEditCell: textEditor\n    },\n    {\n      key: 'available',\n      name: 'Available',\n      renderCell({ row, onRowChange, tabIndex }) {\n        return (\n          <SelectCellFormatter\n            value={row.available}\n            onChange={() => {\n              onRowChange({ ...row, available: !row.available });\n            }}\n            tabIndex={tabIndex}\n          />\n        );\n      },\n      renderSummaryCell({ row: { yesCount, totalCount } }) {\n        return `${Math.floor((100 * yesCount) / totalCount)}% ✔️`;\n      }\n    }\n  ];\n}\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nfunction createRows(): readonly Row[] {\n  const now = Date.now();\n  const rows: Row[] = [];\n\n  for (let i = 0; i < 1000; i++) {\n    rows.push({\n      id: i,\n      title: `Task #${i + 1}`,\n      client: faker.company.name(),\n      area: faker.person.jobArea(),\n      country: faker.location.country(),\n      contact: faker.internet.exampleEmail(),\n      assignee: faker.person.fullName(),\n      progress: Math.random() * 100,\n      startTimestamp: now - Math.round(Math.random() * 1e10),\n      endTimestamp: now + Math.round(Math.random() * 1e10),\n      budget: 500 + Math.random() * 10500,\n      transaction: faker.finance.transactionType(),\n      account: faker.finance.iban(),\n      version: faker.system.semver(),\n      available: Math.random() > 0.5\n    });\n  }\n\n  return rows;\n}\n\ntype Comparator = (a: Row, b: Row) => number;\n\nfunction getComparator(sortColumn: string): Comparator {\n  switch (sortColumn) {\n    case 'assignee':\n    case 'title':\n    case 'client':\n    case 'area':\n    case 'country':\n    case 'contact':\n    case 'transaction':\n    case 'account':\n    case 'version':\n      return (a, b) => {\n        return a[sortColumn].localeCompare(b[sortColumn]);\n      };\n    case 'available':\n      return (a, b) => {\n        return a[sortColumn] === b[sortColumn] ? 0 : a[sortColumn] ? 1 : -1;\n      };\n    case 'id':\n    case 'progress':\n    case 'startTimestamp':\n    case 'endTimestamp':\n    case 'budget':\n      return (a, b) => {\n        return a[sortColumn] - b[sortColumn];\n      };\n    default:\n      throw new Error(`unsupported sortColumn: \"${sortColumn}\"`);\n  }\n}\n\nfunction CommonFeatures() {\n  const direction = useDirection();\n  const [rows, setRows] = useState(createRows);\n  const [sortColumns, setSortColumns] = useState<readonly SortColumn[]>([]);\n  const [selectedRows, setSelectedRows] = useState((): ReadonlySet<number> => new Set());\n  const [isExporting, setIsExporting] = useState(false);\n  const gridRef = useRef<DataGridHandle>(null);\n\n  const countries = useMemo((): readonly string[] => {\n    return [...new Set(rows.map((r) => r.country))].sort(new Intl.Collator().compare);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const columns = useMemo(() => getColumns(countries, direction), [countries, direction]);\n\n  const summaryRows = useMemo((): readonly SummaryRow[] => {\n    return [\n      {\n        id: 'total_0',\n        totalCount: rows.length,\n        yesCount: rows.filter((r) => r.available).length\n      }\n    ];\n  }, [rows]);\n\n  const sortedRows = useMemo((): readonly Row[] => {\n    if (sortColumns.length === 0) return rows;\n\n    return [...rows].sort((a, b) => {\n      for (const sort of sortColumns) {\n        const comparator = getComparator(sort.columnKey);\n        const compResult = comparator(a, b);\n        if (compResult !== 0) {\n          return sort.direction === 'ASC' ? compResult : -compResult;\n        }\n      }\n      return 0;\n    });\n  }, [rows, sortColumns]);\n\n  function handleExportToCsv() {\n    flushSync(() => {\n      setIsExporting(true);\n    });\n\n    exportToCsv(gridRef.current!.element!, 'CommonFeatures.csv');\n\n    flushSync(() => {\n      setIsExporting(false);\n    });\n  }\n\n  async function handleExportToPdf() {\n    flushSync(() => {\n      setIsExporting(true);\n    });\n\n    await exportToPdf(gridRef.current!.element!, 'CommonFeatures.pdf');\n\n    flushSync(() => {\n      setIsExporting(false);\n    });\n  }\n\n  return (\n    <>\n      <div className={toolbarClassname}>\n        <button type=\"button\" onClick={handleExportToCsv}>\n          Export to CSV\n        </button>\n        <button type=\"button\" onClick={handleExportToPdf}>\n          Export to PDF\n        </button>\n      </div>\n      <DataGrid\n        ref={gridRef}\n        rowKeyGetter={rowKeyGetter}\n        columns={columns}\n        rows={sortedRows}\n        defaultColumnOptions={{\n          sortable: true,\n          resizable: true\n        }}\n        selectedRows={selectedRows}\n        onSelectedRowsChange={setSelectedRows}\n        onRowsChange={setRows}\n        sortColumns={sortColumns}\n        onSortColumnsChange={setSortColumns}\n        topSummaryRows={summaryRows}\n        bottomSummaryRows={summaryRows}\n        className=\"fill-grid\"\n        direction={direction}\n        enableVirtualization={!isExporting}\n      />\n    </>\n  );\n}\n"],"file":"assets/CommonFeatures.lazy-ByjlWEdD.js"}