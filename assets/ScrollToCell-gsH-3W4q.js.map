{"version":3,"file":"ScrollToCell-gsH-3W4q.js","sources":["../../website/routes/ScrollToCell.tsx?tsr-split=component"],"sourcesContent":["import { useRef, useState } from 'react';\nimport { css } from '@linaria/core';\nimport clsx from 'clsx';\n\nimport { DataGrid } from '../../src';\nimport type { Column, DataGridHandle } from '../../src';\nimport { renderCoordinates } from '../renderers';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createFileRoute({\n  component: ScrollToCell\n});\n\ntype Row = number;\nconst rows: readonly Row[] = Array.from({ length: 200 }, (_, i) => i);\nconst columns: Column<Row>[] = [];\nfor (let i = 0; i < 200; i++) {\n  const key = String(i);\n  columns.push({\n    key,\n    name: key,\n    width: 120,\n    frozen: i < 5,\n    resizable: true,\n    renderCell: renderCoordinates\n  });\n}\n\nconst flexClassname = css`\n  display: flex;\n  gap: 5px;\n  align-items: center;\n  margin-block-end: 5px;\n\n  > fieldset {\n    display: contents;\n  }\n`;\n\nconst smoothClassname = css`\n  scroll-behavior: smooth;\n`;\n\nfunction ScrollToCell() {\n  const direction = useDirection();\n  const [idx, setIdx] = useState<number | undefined>(10);\n  const [rowIdx, setRowIdx] = useState<number | undefined>(10);\n  const [scrollBehavior, setScrollBehavior] = useState<ScrollBehavior>('auto');\n  const gridRef = useRef<DataGridHandle>(null);\n\n  function scrollToColumn() {\n    gridRef.current!.scrollToCell({ idx });\n  }\n\n  function scrollToRow() {\n    gridRef.current!.scrollToCell({ rowIdx });\n  }\n\n  function scrollToCell() {\n    gridRef.current!.scrollToCell({ idx, rowIdx });\n  }\n\n  return (\n    <>\n      <div className={flexClassname}>\n        <label>\n          <span>Column index: </span>\n          <input\n            style={{ inlineSize: 50 }}\n            type=\"number\"\n            value={idx ?? ''}\n            onChange={(event) => {\n              const { valueAsNumber } = event.target;\n              setIdx(Number.isNaN(valueAsNumber) ? undefined : valueAsNumber);\n            }}\n          />\n        </label>\n        <label>\n          <span>Row index: </span>\n          <input\n            style={{ inlineSize: 50 }}\n            type=\"number\"\n            value={rowIdx ?? ''}\n            onChange={(event) => {\n              const { valueAsNumber } = event.target;\n              setRowIdx(Number.isNaN(valueAsNumber) ? undefined : valueAsNumber);\n            }}\n          />\n        </label>\n        <fieldset>\n          <legend>Scroll behavior</legend>\n          <label>\n            Auto\n            <input\n              type=\"radio\"\n              name=\"scroll-behavior\"\n              checked={scrollBehavior === 'auto'}\n              onChange={() => {\n                setScrollBehavior('auto');\n              }}\n            />\n          </label>\n          <label>\n            Smooth\n            <input\n              type=\"radio\"\n              name=\"scroll-behavior\"\n              checked={scrollBehavior === 'smooth'}\n              onChange={() => {\n                setScrollBehavior('smooth');\n              }}\n            />\n          </label>\n        </fieldset>\n      </div>\n      <div className={flexClassname}>\n        <button type=\"button\" onClick={scrollToCell}>\n          Scroll to cell\n        </button>\n        <button type=\"button\" onClick={scrollToColumn}>\n          Scroll to column\n        </button>\n        <button type=\"button\" onClick={scrollToRow}>\n          Scroll to row\n        </button>\n      </div>\n      <DataGrid\n        ref={gridRef}\n        aria-label=\"Scroll To Cell Example\"\n        columns={columns}\n        rows={rows}\n        className={clsx('fill-grid', { [smoothClassname]: scrollBehavior === 'smooth' })}\n        direction={direction}\n      />\n    </>\n  );\n}\n"],"names":["rows","Array","from","length","_","i","columns","key","String","push","name","width","frozen","resizable","renderCell","renderCoordinates","flexClassname","smoothClassname","SplitComponent","direction","useDirection","idx","setIdx","useState","rowIdx","setRowIdx","scrollBehavior","setScrollBehavior","gridRef","useRef","scrollToColumn","current","scrollToCell","scrollToRow","jsxs","Fragment","children","className","jsx","style","inlineSize","type","value","onChange","event","valueAsNumber","target","Number","isNaN","undefined","checked","onClick","DataGrid","ref","clsx"],"mappings":"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"}