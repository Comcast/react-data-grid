{"version":3,"file":"CellNavigation-XVcBGaE3.js","sources":["../../website/routes/CellNavigation.tsx?tsr-split=component"],"sourcesContent":["import { useState } from 'react';\nimport { createFileRoute } from '@tanstack/react-router';\n\nimport { DataGrid } from '../../src';\nimport type { CellKeyboardEvent, CellKeyDownArgs, Column } from '../../src';\nimport { useDirection } from '../directionContext';\n\nexport const Route = createFileRoute('/CellNavigation')({\n  component: CellNavigation\n});\n\ninterface Row {\n  id: number;\n  task: string;\n  complete: number;\n  priority: string;\n  issueType: string;\n  startDate: string;\n  completeDate: string;\n}\n\ntype CellNavigationMode = 'NONE' | 'CHANGE_ROW' | 'LOOP_OVER_ROW' | 'LOOP_OVER_COLUMN' | 'NO_TAB';\n\nconst columns: Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80\n  },\n  {\n    key: 'task',\n    name: 'Title'\n  },\n  {\n    key: 'priority',\n    name: 'Priority'\n  },\n  {\n    key: 'issueType',\n    name: 'Issue Type'\n  },\n  {\n    key: 'complete',\n    name: '% Complete'\n  },\n  {\n    key: 'startDate',\n    name: 'Start Date'\n  },\n  {\n    key: 'completeDate',\n    name: 'Expected Complete',\n    width: 200\n  }\n];\n\nfunction getRandomDate(start: Date, end: Date) {\n  return new Date(\n    start.getTime() + Math.random() * (end.getTime() - start.getTime())\n  ).toLocaleDateString();\n}\n\nfunction createRows(): Row[] {\n  const rows = [];\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.floor(Math.random() * 3 + 1)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.floor(Math.random() * 3 + 1)],\n      startDate: getRandomDate(new Date(2015, 3, 1), new Date()),\n      completeDate: getRandomDate(new Date(), new Date(2016, 0, 1))\n    });\n  }\n\n  return rows;\n}\n\nfunction CellNavigation() {\n  const direction = useDirection();\n  const [rows] = useState(createRows);\n  const [cellNavigationMode, setCellNavigationMode] = useState<CellNavigationMode>('CHANGE_ROW');\n\n  function handleCellKeyDown(args: CellKeyDownArgs<Row>, event: CellKeyboardEvent) {\n    if (args.mode === 'EDIT') return;\n    const { column, rowIdx, selectCell } = args;\n    const { idx } = column;\n    const { key, shiftKey } = event;\n\n    const preventDefault = () => {\n      event.preventGridDefault();\n      event.preventDefault();\n    };\n\n    const loopOverNavigation = () => {\n      if ((key === 'ArrowRight' || (key === 'Tab' && !shiftKey)) && idx === columns.length - 1) {\n        selectCell({ rowIdx, idx: 0 });\n        preventDefault();\n      } else if ((key === 'ArrowLeft' || (key === 'Tab' && shiftKey)) && idx === 0) {\n        selectCell({ rowIdx, idx: columns.length - 1 });\n        preventDefault();\n      }\n    };\n\n    const changeRowNavigation = () => {\n      if (key === 'ArrowRight' && idx === columns.length - 1) {\n        if (rows.length === 0) return;\n        if (rowIdx === -1) {\n          selectCell({ rowIdx: 0, idx: 0 });\n        } else {\n          if (rowIdx === rows.length - 1) return;\n          selectCell({ rowIdx: rowIdx + 1, idx: 0 });\n        }\n        preventDefault();\n      } else if (key === 'ArrowLeft' && idx === 0) {\n        if (rowIdx === -1) return;\n        selectCell({ rowIdx: rowIdx - 1, idx: columns.length - 1 });\n        preventDefault();\n      }\n    };\n\n    const loopOverColumnNavigation = () => {\n      let newRowIdx: number;\n      if (rowIdx === -1) {\n        newRowIdx = shiftKey ? rows.length - 1 : 0;\n      } else {\n        newRowIdx = shiftKey ? rowIdx - 1 : rowIdx === rows.length - 1 ? -1 : rowIdx + 1;\n      }\n      selectCell({ rowIdx: newRowIdx, idx });\n      preventDefault();\n    };\n\n    if (cellNavigationMode === 'LOOP_OVER_ROW') {\n      loopOverNavigation();\n    } else if (cellNavigationMode === 'CHANGE_ROW') {\n      changeRowNavigation();\n    } else if (cellNavigationMode === 'LOOP_OVER_COLUMN' && key === 'Tab') {\n      loopOverColumnNavigation();\n    } else if (cellNavigationMode === 'NO_TAB' && key === 'Tab') {\n      // Need to allow default event to focus the next element\n      event.preventGridDefault();\n    }\n  }\n\n  return (\n    <>\n      <div style={{ marginBlockEnd: 5 }}>\n        Cell Navigation Modes:\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'NONE'}\n            onChange={() => setCellNavigationMode('NONE')}\n          />\n          None\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'CHANGE_ROW'}\n            onChange={() => setCellNavigationMode('CHANGE_ROW')}\n          />\n          Change Row\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'LOOP_OVER_ROW'}\n            onChange={() => setCellNavigationMode('LOOP_OVER_ROW')}\n          />\n          Loop Over Row\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'LOOP_OVER_COLUMN'}\n            onChange={() => setCellNavigationMode('LOOP_OVER_COLUMN')}\n          />\n          Loop Over Column\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'NO_TAB'}\n            onChange={() => setCellNavigationMode('NO_TAB')}\n          />\n          No Tab\n        </label>\n      </div>\n      <DataGrid\n        columns={columns}\n        rows={rows}\n        direction={direction}\n        onCellKeyDown={handleCellKeyDown}\n      />\n    </>\n  );\n}\n"],"names":["columns","key","name","width","getRandomDate","start","end","Date","getTime","Math","random","toLocaleDateString","createRows","rows","i","push","id","task","complete","min","round","priority","floor","issueType","startDate","completeDate","SplitComponent","direction","useDirection","useState","cellNavigationMode","setCellNavigationMode","handleCellKeyDown","args","event","mode","column","rowIdx","selectCell","idx","shiftKey","preventDefault","preventGridDefault","loopOverNavigation","length","changeRowNavigation","loopOverColumnNavigation","newRowIdx","jsxs","Fragment","marginBlockEnd","jsx","DataGrid"],"mappings":"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"}