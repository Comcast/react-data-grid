{"version":3,"file":"main.3cd1f988f6ff08611736.js","mappings":"uBAAIA,ECCAC,EADAC,ECAAC,EACAC,E,6ECEJ,MAoCMC,EAAN,WAoBe,SAASC,IACtB,OACE,iBAAKC,UA1DT,UA0DI,WACE,6CAEA,mCACA,eAASC,GAAT,mBAA+BC,OAA/B,EAAqCC,gBAArC,gCAGA,eAASF,GAAT,gBAA4BC,OAA5B,EAAkCC,gBAAlC,6BAGA,eAASF,GAAT,mBAA+BC,OAA/B,EAAqCC,gBAArC,gCAGA,eAASF,GAAT,mBAA+BC,OAA/B,EAAqCC,gBAArC,gCAGA,eAASF,GAAT,sBAAkCC,OAAlC,EAAwCC,gBAAxC,mCAGA,eAASF,GAAT,gBAA4BC,OAA5B,EAAkCC,gBAAlC,6BAGA,eAASF,GAAT,YAAwBC,OAAxB,EAA8BC,gBAA9B,yBAGA,eAASF,GAAT,kBAA8BC,OAA9B,EAAoCC,gBAApC,+BAGA,eAASF,GAAT,sBAAkCC,OAAlC,EAAwCC,gBAAxC,mCAGA,eAASF,GAAT,iBAA6BC,OAA7B,EAAmCC,gBAAnC,8BAGA,eAASF,GAAT,iBAA6BC,OAA7B,EAAmCC,gBAAnC,gCAGA,eAASF,GAAT,WAAuBC,OAAvB,EAA6BC,gBAA7B,wBAGA,eAASF,GAAT,kBAA8BC,OAA9B,EAAoCC,gBAApC,+BAGA,eAASF,GAAT,mBAA+BC,OAA/B,EAAqCC,gBAArC,gCAGA,eAASF,GAAT,iBAA6BC,OAA7B,EAAmCC,gBAAnC,8BAGA,eAASF,GAAT,aAAyBC,OAAzB,EAA+BC,gBAA/B,0BAGA,eAASF,GAAT,uBAAmCC,OAAnC,EAAyCC,gBAAzC,oCAIA,mCACA,cACEC,KADF,iEAEEC,OAFF,SAGEC,IAHF,yCAOA,cACEF,KADF,oEAEEC,OAFF,SAGEC,IAHF,qCAOA,cACEF,KADF,yDAEEC,OAFF,SAGEC,IAHF,uCAOA,cAAGF,KAAH,oDAA4DC,OAA5D,SAA4EC,IAA5E,oC,4CCtIC,MAAMC,EAAoC,oBAAXC,OAAyBC,EAAAA,UAAYC,EAAAA,gBCFpE,SAASC,EAAwCC,GACtD,MAAMC,GAAMC,EAAAA,EAAAA,QAAU,MAOtB,OALAP,GAAgB,KAAM,MACfK,IACL,SAAAC,EAAIE,UAAJ,EAAaC,MAAM,CAAEC,eAAe,OACnC,CAACL,IAEG,CACLC,IAAAA,EACAK,SAAUN,EAAa,GAAK,GCoDzB,SAASO,GAAoB,yDAMlC,aANkC,EAOlC,kBAAmBC,IAEnB,MAAM,eAAOF,GAAaP,EAA1B,GAMA,OACE,mBAAOX,WAAWqB,EAAAA,EAAAA,GAnEU,6BAmEuDC,GA7B/C,wCA6BpC,WACE,kBACE,aADF,EAEE,kBAFF,EAGET,IAHF,EAIEU,KAJF,WAKEL,SALF,EAMElB,UAlEwB,8BAmExBsB,SAPF,EAQEE,QARF,EASEC,SAfN,YACEA,EAASC,EAAAA,OAAD,QAAoBA,EAAD,YAA3BD,WAeIE,QAVF,KAYA,gBAAK3B,UArDgB,6B,SCtC3B,MAAM4B,GAAsBC,EAAAA,EAAAA,oBAAmCC,GAElDC,EAAuBH,EAAoBI,SAElDC,GAA4BJ,EAAAA,EAAAA,oBAGhCC,GAEWI,EAA6BD,EAA0BD,SAE7D,SAASG,IACd,MAAMC,GAAsBC,EAAAA,EAAAA,YAAWT,GACjCU,GAA4BD,EAAAA,EAAAA,YAAWJ,GAE7C,QAA4BH,IAAxBM,QAAmEN,IAA9BQ,EACvC,MAAM,IAAIC,MAAM,sDAGlB,MAAO,CAACH,EAAqBE,GCtBxB,SAASE,EAAgBC,GAC9BA,EAAMD,kBCID,MAAME,EAAoB,aAoCpBC,EAAiC,CAC5CC,IAAKF,EACLG,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,WAAW,EACXC,UAAU,EACVC,QAAQ,EACRC,eAAeC,IAEX,SAACjC,EAAD,CACE,aAAW,aACXkC,eAAgBD,EAAMC,eACtBC,MAAOF,EAAMG,gBACb9B,SAAU2B,EAAMI,yBAEhB7B,QAASa,IAIfiB,UAtDF,SAAyBL,GACvB,MAAOM,EAAeC,GAAwBxB,IAE9C,OACE,SAAChB,EAAD,CACE,aAAW,SACXkC,eAAgBD,EAAMC,eACtBC,MAAOI,EACP/B,QAASa,EACTf,SAAU,CAACD,EAASoC,KAClBD,EAAqB,CAAEE,IAAKT,EAAMS,IAAKrC,QAAAA,EAASoC,aAAAA,QA6CtDE,eAvCF,SAA8BV,GAC5B,MAAOM,EAAeC,GAAwBxB,IAE9C,OACE,SAAChB,EAAD,CACE,aAAW,eACXkC,eAAgBD,EAAMC,eACtBC,MAAOI,EACPjC,SAAWD,IACTmC,EAAqB,CAAEE,IAAKT,EAAMS,IAAKrC,QAAAA,EAASoC,cAAc,KAGhEjC,QAASa,MCNFuB,EAAuB,2BAEpC,SAASC,EAAmBC,GACrB,MAALA,GAAAA,EAAAA,QACK,MAALA,GAAAA,EAAAA,SAGa,SAASC,GAA8B,qCAIpDC,IAEA,OACE,kBACEnE,UADF,EAEEa,IAFF,EAGEyC,MAAOO,EAAIO,EAHb,KAIE3C,SAAWgB,GAAU4B,EAAY,MAAU,CAACD,EAAD,KAAc3B,EAAAA,OAAaa,QACtEgB,OAAQ,IAAMH,GANlB,KCxCK,SAASI,EAAsBnB,GACpC,IACE,OAAO,8BAAGA,EAAMS,IAAIT,EAAMgB,OAAOxB,OACjC,MACA,OAAO,MCkBJ,SAAS4B,GAA4B,qDAI1CC,IAEA,MAAM,eAAOvD,GAAaP,EAA1B,GAQM+D,EAAIC,EAAa,oBAAvB,oBAEA,OACE,kBACE9D,IADF,EAEEb,UAnC6B,kCAoC7BkB,SAHF,EAIE0D,UAbJ,UAAuB,IAAEhC,IACvB,UAAIA,GACF6B,KAOF,UAME,GACA,gBAAKI,QAAL,WAAwB/B,MAAxB,KAAmCgC,OAAnC,IAA8C9E,UA1B5B,qBA0BlB,2BACE,iBAAM0E,EAAN,S,mCCtCD,MAAM,IAAEK,EAAF,IAAOC,EAAP,MAAYC,EAAZ,MAAmBC,EAAnB,KAA0BC,GAASC,KAEzC,SAASC,EACdC,GAEA,GAAyB,mBAAdA,EACT,MAAM,IAAI/C,MAAM,yDAIb,SAASgD,EAAYC,EAAgBV,GAC1C,YAAehD,IAAXgD,EACK,CACL,uBAAwBU,EACxB,mBAAqB,GAAEV,OAGpB,CAAE,uBAAwBU,GAG5B,SAASC,EACdrB,EACAsB,GAEA,MAAO,CACLC,gBAAiBvB,EAAOwB,IAAM,EAC9BC,mBAA2B/D,IAAZ4D,EAAyB,QAAOA,SAAY5D,EAC3DgE,KAAM1B,EAAOlB,OAAU,yBAAwBkB,EAAOwB,YAAS9D,GAI5D,SAASiE,EACd3B,KACG4B,GAEH,OAAO3E,EAAAA,EAAAA,GCxBqB,sBD8BvB2E,EAHsB5B,EAAOlB,QCZA,0BDaHkB,EAAO6B,oBCPA,iCCuNxC,SAASC,GACP,IAAEtD,EAAF,MAAOE,GACPqD,EACAC,GAEA,OAAID,EAAaE,IAAIzD,GAEZuD,EAAaG,IAAI1D,GAEL,iBAAVE,EACFA,EAEY,iBAAVA,GAAsB,SAASyD,KAAKzD,GACtCoC,EAAOkB,EAAgBI,SAAS1D,EAAO,IAAO,UADvD,EAMF,SAAS2D,EACP3D,GACA,SAAE4D,EAAF,SAAY3D,GACZ4D,GAIA,OAFA7D,EAAQkC,EAAIlC,EAAD,MAAQ4D,EAAAA,EAAYC,GAEP,iBAAb5D,EACFgC,EAAIjC,EAAOC,GAGbD,EC7RF,SAAS8D,EACdxC,EACAyC,EACAC,GAEA,MAAMpB,EAAoC,mBAAnBtB,EAAOsB,QAAyBtB,EAAOsB,QAAQoB,GAAQ,EAC9E,GACEC,OAAOC,UAAUtB,IACjBA,EAAW,KAETtB,EAAOlB,QAAUkB,EAAOwB,IAAMF,EAAW,GAAKmB,GAEhD,OAAOnB,ECVJ,SAASuB,EAAiDC,GAC/D,MAAMrG,GAAMC,EAAAA,EAAAA,QAAOoG,GAMnB,OAJAzG,EAAAA,EAAAA,YAAU,KACRI,EAAIE,QAAUmG,MAGTC,EAAAA,EAAAA,cAAY,IAAIL,KACrBjG,EAAIE,WAAW+F,KACd,IC8BU,SAASM,GAA0B,8DAKhD/D,IAEA,MAAM,eAAOnC,GAAaP,EAA1B,GAcA,OACE,kBACEE,IADF,EAEEK,SAFF,EAGElB,UAvD2B,gCAwD3B2B,QATJ,YACE0F,EAAO5E,EAAAA,SAAiBA,EAAxB4E,UASEzC,UAlBJ,YACMnC,MAAAA,EAAAA,KAAJ,UAAyBA,EAAAA,MAEvBA,EAAAA,iBACA4E,EAAO5E,EAAAA,SAAiBA,EAAxB4E,WASF,WAOE,iBAAMrH,UAlDqB,gCAkD3B,SAA0C,KAC1C,iCACGsH,IAAAA,IACC,gBAAKzC,QAAL,WAAwB/B,MAAxB,KAAmCgC,OAAnC,IAA8C9E,UA3ChC,0BA2Cd,2BACE,iBAAM0E,EAAG4C,QAAAA,EAAAA,gBAAT,oBAGJ,QC3ED,SAASC,EAAiB3G,GAC/B,MAAMC,GAAMC,EAAAA,EAAAA,QAAuB,MAE7B0G,GAAiB1G,EAAAA,EAAAA,SAAO,IACvB,CAAE2G,IAAeC,EAAAA,EAAAA,UAAkB,IAE1CnH,GAAgB,KAAM,MACfK,EAKD4G,EAAezG,QAGjB0G,EAAY,IAGd,SAAA5G,EAAIE,UAAJ,EAAaC,MAAM,CAAEC,eAAe,IAVlCuG,EAAezG,SAAU,IAW1B,CAACH,IAQJ,MAAM+G,EAAY/G,IAAe4G,EAAezG,QAEhD,MAAO,CACLF,IAAAA,EACAK,SAAUyG,EAAY,GAAK,EAC3BC,QAXF,SAAiBnF,GACXA,EAAMpC,SAAWQ,EAAIE,UACvByG,EAAezG,SAAU,KCchB,SAAS8G,GAAkB,mKAUxCC,IACyB,QACzB,MAAM,yBAAiBF,GAAYL,EAAnC,GACMQ,EAAS,MAAGC,OAAH,EAAGA,EAAAA,WAAwBC,GAASA,EAAAA,YAAmB7D,EAAtE,MACM8D,OACJH,IAAAA,GAA2BA,GAA3BA,EAA4CC,EAA5CD,QADF,EAEMT,EAAa,MAAGY,OAAH,EAAGA,EAAtB,UACMC,OAAWD,IAAAA,GAA4BF,EAAAA,OAA5BE,EAAsDH,EAAtDG,OAAjB,EACME,EACJd,IAAAA,EAA8BA,QAAAA,EAAAA,YAA9BA,kBADF,EAGMtH,EAAY+F,EAAiB3B,EAAQA,EAAT,gBACNA,EAAOpB,WAzCL,8BA2E9B,cACE,SAAIqF,EAA6B,OACjC,MAAM,oBAAEC,GAAR,EACA,YAAIJ,EAA0B,CAE5B,MAAMK,EAAuB,CAC3BC,UAAWpE,EADgB,IAE3BqE,UAAWH,EAAsB,OAAS,OAE5CD,EAAoBL,GAAAA,EAA2B,MAA3BA,GAAwD,CAA5EK,QACK,CACL,MAUA,IARGC,GAAD,SAAwBhB,IACtBgB,GAFJ,QAE2BhB,KAEzBoB,EAAiB,CACfF,UAAWpE,EADI,IAEfqE,UAAWnB,QAAAA,EAAAA,OAAmC,QAGlD,EAAe,CACb,MAAMqB,EAAkB,IAAxB,GACA,EAEEA,EAAAA,GAAAA,EAGAA,EAAAA,OAAAA,EAAAA,GAEFN,EAAAA,QAEAA,EAAoBK,EAAiB,CAAH,GAAlCL,KA4DN,OACE,gBACEO,KADF,eAEE,gBAAexE,EAAAA,IAFjB,EAGE,gBAHF,EAIE,YAJF,EAKE,eALF,EAMEvD,IANF,EAQEK,SAAU4G,EAAkB,EAR9B,EASE9H,UATF,EAUE6I,MAAO,IACFpD,EAAarB,EADX,GAELsC,SAAQ,SAAEtC,EAAAA,UAAF,OAFH,EAGLrB,SAAQ,SAAEqB,EAAAA,UAAF,OAAqBtC,GAE/B8F,QAvDJ,YACEA,EAAAA,GACA,GAEEkB,EAAAA,IAoDAnH,QAxEJ,WACEmH,EAAW1E,EAAX0E,MAwEEC,cAAe3E,EAAAA,UArEnB,YACE,MAAM,MAAE4E,GAAUvG,EAAAA,cAAlB,wBACeuG,EAAQvG,EAAvB,QAEA,IAKAwG,EAAe7E,EAAf6E,cA2CA,EAkBEC,cAAe9E,EAAAA,UA9InB,YACE,GAAI3B,UAAAA,EAAAA,aAAJ,IAAqCA,EAAAA,QACnC,OAGF,MAAM,0BAAiB0G,GAAvB,GACM,MAAEH,GAAUI,EAAlB,wBACMC,EAASL,EAAQvG,EAAvB,QAOA,cACE,MAAMK,EAAQL,EAAAA,QAAAA,EAAyB2G,EAAAA,wBAAvC,KACItG,EAAJ,GACEmG,EAAe7E,EAAf6E,GARAI,EAAJ,KAiBAD,EAAAA,kBAAAA,GACAA,EAAAA,iBAAAA,cAAAA,GACAA,EAAAA,iBAAAA,sBAPA,aACEA,EAAAA,oBAAAA,cAAAA,GACAA,EAAAA,oBAAAA,qBAAAA,aAqGF,WA/BIhF,EAAJ,gBAEI,SAACA,EAAD,gBACEA,OADF,EAEEkD,cAFF,EAGEa,SAHF,EAIEd,OAJF,EAKE9D,gBALF,EAMEC,yBANF,EAOEH,eARJ,IAaEe,EAAJ,UAEI,YACEiD,OADF,EAEEC,cAFF,EAGEa,SAHF,EAIE9E,eAJF,WAMGe,EAAD,OAKCA,EAAP,O,iBCtLG,MAkBMkF,EAAgB,mBAyBhBC,EAAwB,4BCDrC,SAASC,GAAsC,mLAU7C1B,IAEA,MAAM2B,EAAN,GACA,IAAK,IAAIC,EAAT,EAAoBA,EAAQC,EAA5B,OAA4CD,IAAS,CACnD,MAAMtF,EAASuF,EAAf,GACMjE,EAAUkB,EAAWxC,EAAQyC,EAAuB,CAAEtF,KAAM,gBAClE,IAAImE,IACFgE,GAAShE,EAATgE,GAGFD,EAAAA,MACE,YAEErF,OAFF,EAGEsB,QAHF,EAIErC,eAAgBuG,IAAoBxF,EAJtC,IAKE6E,eALF,EAME1F,gBANF,EAOEC,yBAPF,EAQE6E,oBARF,EASEL,YATF,EAUEc,WAVF,EAWEhB,gBAAiBA,GAZrB2B,IAYwCC,GAV/BtF,EADP,MAgBJ,OACE,gBACEwE,KADF,MAEE,gBAFF,EAGE5I,WAAWqB,EAAAA,EAAAA,GA3CW,2BA4CyB,IAArBuI,GAAxB,GAEFf,MAAOtD,EANT,YAQE,I,SAKN,SAAesE,EAAAA,EAAAA,MAAf,GCvFO,SAASC,GAA8B,iBAC5CC,EAD4C,QAE5CJ,EAF4C,KAG5CK,EAH4C,WAI5CC,IAEA,MAAM7F,EAASuF,EAAQI,EAAiBnE,KAClC/B,EAAMmG,EAAKD,EAAiBvE,QAClC,OAAQyE,EAAWpG,IAAQqG,EAAe9F,EAAQP,GAG7C,SAASqG,EAAsB9F,EAAiCP,GACrE,OACmB,MAAjBO,EAAO+F,SACN/F,EAAOgG,WAC6E,KAAzD,mBAApBhG,EAAOiG,SAA0BjG,EAAOiG,SAASxG,GAAOO,EAAOiG,UAmBpE,SAASC,GAA8B,KAC5CN,EAD4C,YAE5CO,EAF4C,OAG5C/E,EAH4C,sBAI5CqB,EAJ4C,OAK5CzC,EAL4C,WAM5C6F,IAQA,IAAgB,IAAZzE,EACF,OAAOoB,EAAWxC,EAAQyC,EAAuB,CAAEtF,KAAM,WAG3D,GAAIiE,GAAU,GAAKA,EAASwE,EAAKQ,OAAQ,CACvC,MAAM3G,EAAMmG,EAAKxE,GACjB,OAAKyE,EAAWpG,QAGhB,EAFS+C,EAAWxC,EAAQyC,EAAuB,CAAEtF,KAAM,MAAOsC,IAAAA,IAKpE,OAAI0G,EACK3D,EAAWxC,EAAQyC,EAAuB,CAC/CtF,KAAM,UACNsC,IAAK0G,EAAY/E,EAASwE,EAAKQ,eAHnC,EC/CF,SAASC,GAAY,gJAYhBrH,IAEH,MAAM,yBAAiBwE,GAAYL,EAAnC,IAEM,UAAEmD,GAAR,EACM1K,EAAY+F,EAAiB,EAMZ,mBAAd2E,EAA2BA,EAAlC,GANF,EAEE,GA/ByB,0BAiCKC,GAvBA,iCA4BhC,cACE7B,EAAWjF,EAAKO,EAAhB0E,GAiBF,OACE,gBACEF,KADF,WAEE,gBAAexE,EAAAA,IAFjB,EAGE,gBAHF,EAIE,eAJF,EAKE,iBAAgB8F,EAAe9F,EAAhB,SALjB,EAMEvD,IANF,EAOEK,SAPF,EAQElB,UARF,EASE6I,MAAOpD,EAAarB,EATtB,GAUEzC,QAzBJ,WAAuB,MACrBiJ,EAAiB,SAACxG,EAAAA,oBAAD,EAACA,EAAlBwG,aACU,MAAVC,GAAAA,EAAU,EAAVA,IAwBE9B,cAjBJ,WACE6B,GAAAA,GACgB,MAAhBE,GAAAA,EAAgB,EAAhBA,IAgBEC,cAtBJ,WACEH,KAsBEhD,QAbF,iBAgBIxD,EAAD,WACC,iCACE,SAACA,EAAD,WACEA,OADF,EAEEP,IAFF,EAGER,eAHF,EAIEgB,YAJF,IAMA,O,SAOV,SAAewF,EAAAA,EAAAA,MAAf,GCzFA,SAASmB,IACP,UACEhL,EADF,OAEEwF,EAFF,aAGEyF,EAHF,OAIEnG,EAJF,gBAKE8E,EALF,cAMElG,EANF,cAOEwH,EAPF,mBAQEC,EARF,sBASEtE,EATF,IAUEhD,EAVF,gBAWEuH,EAXF,mBAYEC,EAZF,uBAaEC,EAbF,WAcET,EAdF,iBAeEC,EAfF,SAgBES,EAhBF,qBAiBEC,EAjBF,aAkBEC,EAlBF,YAmBEpH,EAnBF,WAoBEyE,KACG1F,GAELvC,GAEA,MAAM6K,EAAkBzE,GAAe0E,IACrCtH,EAAYmB,EAAQmG,MAQtB3L,GAAYqB,EAAAA,EAAAA,GACViI,EACC,YAAU9D,EAAS,GAAM,EAAI,OAAS,OAFzB,MAMd+F,OANc,EAMdA,EAAW1H,GACX7D,GAH+C,IAArB4J,GAAvBL,GAML,MAAME,EAAQ,GAEd,IAAK,IAAIC,EAAQ,EAAGA,EAAQ0B,EAAgBZ,OAAQd,IAAS,CAC3D,MAAMtF,EAASgH,EAAgB1B,IACzB,IAAE9D,GAAQxB,EACVsB,EAAUkB,EAAWxC,EAAQyC,EAAuB,CAAEtF,KAAM,MAAOsC,IAAAA,SACzD/B,IAAZ4D,IACFgE,GAAShE,EAAU,GAGrB,MAAMrC,EAAiBuG,IAAoBhE,EAEvCvC,GAAkBgI,EACpB5B,EAAMmC,KAAKP,GAEX5B,EAAMmC,MACJ,SAAC,EAAD,CAEExH,OAAQA,EACRsB,QAASA,EACT7B,IAAKA,EACLgI,SAAUX,IAAkBtF,EAC5B+E,cAAeQ,IAAuBvF,EACtCvC,eAAgBA,EAChByI,WAAYzI,EAAiBiI,OAAyBxJ,EACtD+I,WAAYA,EACZC,iBAAkBA,EAClBzG,YAAaqH,EACb5C,WAAYA,GAXP1E,EAAOxB,MAiBpB,OACE,SAACb,EAAD,CAAsBuB,MAAOI,EAA7B,UACE,gBACEkF,KAAK,MACL/H,IAAKA,EACLb,UAAWA,EACXyL,aAvDN,SAAyBhJ,GACH,MAApB+I,GAAAA,EAAuBhG,GACX,MAAZiG,GAAAA,EAAehJ,IAsDXoG,MAAOtD,EAAY0F,EAAcnG,MAC7B1B,EANN,SAQGqG,M,SAMT,UAAeI,EAAAA,EAAAA,OAAKkC,EAAAA,EAAAA,YAAWf,KCtF/B,SAASgB,IAAiB,GACxBC,EADwB,SAExBC,EAFwB,UAGxBC,EAHwB,WAIxBxH,EAJwB,eAKxBtB,EALwB,OAMxBe,EANwB,IAOxBP,EAPwB,iBAQxBuI,EACA3H,YAAa4H,IAEb,MAAM,IAAExL,EAAF,SAAOK,EAAP,QAAiB0G,GAAYL,EAAiBlE,GAEpD,SAASoB,IACP4H,EAAmBJ,GAIrB,MAAMK,EAAkBlI,EAAOgG,UAAYgC,IAAqBhI,EAAOwB,IAEvE,OACE,gBACEgD,KAAK,WACL,gBAAexE,EAAOwB,IAAM,EAC5B,gBAAevC,EACfxC,IAAKA,EACLK,SAAUA,EAEVlB,UAAW+F,EAAiB3B,GAC5ByE,MAAO,IACFpD,EAAarB,GAChBmI,OAAQD,EAAkB,UAAY,WAExC3K,QAAS2K,EAAkB7H,OAAc3C,EACzC8F,QAASA,EAbX,WAeKxD,EAAOgG,UAAYgC,IAAqBhI,EAAOwB,MAAQxB,EAAON,iBAC/D,SAACM,EAAON,eAAR,CACEoI,SAAUA,EACVC,UAAWA,EACX/H,OAAQA,EACRP,IAAKA,EACLc,WAAYA,EACZtB,eAAgBA,EAChBoB,YAAaA,KAjBZL,EAAOxB,KAwBlB,UAAeiH,EAAAA,EAAAA,MAAKmC,IC7BpB,SAASQ,IAAkB,2KAetBpJ,IAGH,MAAMwC,EAAMwF,EAAAA,GAAAA,MAAAA,EAA+CqB,EAA/CrB,EAAZ,EAMA,OACE,YAAsB9H,MAAtB,YACE,gBACEsF,KADF,MAEE,aAFF,EAGE,gBAHF,EAIE5I,WAAWqB,EAAAA,EAAAA,GAAK,EAhCG,yBAmChB,YAAUmE,EAAAA,GAAAA,EAAAA,OAA4B,QAEQ,IAArBoE,GAAxB,GAGJjI,QAlBN,WACE+K,EAAAA,IAkBI7D,MAAOtD,EAAY0F,EAbrB,iBAgBGG,EAAAA,KAAqBhH,IACpB,aAEE6H,GAFF,EAGEC,SAHF,EAIEC,UAJF,EAKExH,WALF,EAMEtB,eAAgBuG,IAAoBxF,EANtC,IAOEA,OAPF,EAQEP,IARF,EASEuI,iBATF,EAUE3H,YAXJ,GAESL,EADP,WAkBV,UAAeyF,EAAAA,EAAAA,MAAf,ICjFA,SAAS8C,IAAmB,qDAK1B7D,IAEA,MAAM,yBAAiBlB,GAAYL,EAAnC,IACQqF,iBAAF,mBAAsCC,GAA5C,EACM7M,EAAY+F,EAAiB,EAvB9B,UA0ByB,mBAArB8G,EAAkCA,EAAzC,GAHF,GAUA,OACE,gBACEjE,KADF,WAEE,gBAAexE,EAAAA,IAFjB,EAGE,eAHF,EAIE,gBAJF,EAKEvD,IALF,EAMEK,SANF,EAOElB,UAPF,EAQE6I,MAAOpD,EAAarB,EARtB,GASEzC,QAdJ,WACEmH,EAAWjF,EAAXiF,IAcElB,QAVF,WAYGkF,IACC,YAAkB1I,OAAlB,EAAkCP,IAAlC,EAA4CR,eAD9C,M,SAON,UAAewG,EAAAA,EAAAA,MAAf,ICvBA,SAASkD,IAAkB,uGASzB,gBAAiBC,IAEjB,MAAMvD,EAAN,GACA,IAAK,IAAIC,EAAT,EAAoBA,EAAQ0B,EAA5B,OAAoD1B,IAAS,CAC3D,MAAMtF,EAASgH,EAAf,GACM1F,EAAUkB,EAAWxC,EAAQyC,EAAuB,CAAEtF,KAAF,UAAmBsC,IAAAA,SAC7E,IAAI6B,IACFgE,GAAShE,EAATgE,GAGF,MAAMrG,EAAiBuG,IAAoBxF,EAA3C,IAEAqF,EAAAA,MACE,aAEErF,OAFF,EAGEsB,QAHF,EAIE7B,IAJF,EAKER,eALF,EAMEyF,WAPJW,GAESrF,EADP,MAWJ,OACE,gBACEwE,KADF,MAEE,gBAFF,EAGE5I,WAAWqB,EAAAA,EAAAA,GAAK,EAEb,YAAUmE,EAAAA,GAAAA,EAAAA,OAA4B,OAzClB,0BA2CqB,IAAXA,GAjDvC,WAmDuD,IAArBoE,GAAxB,GAGJf,MACE,IACKtD,EADL,GAEE,6BAAyB0H,IAAAA,EAAqB,GAAEA,WAFlD,EAGE,gCAA4BC,IAAAA,EAAwB,GAAEA,WAAapL,GAhBzE,SAoBE,I,SAKN,UAAe+H,EAAAA,EAAAA,MAAf,I,SC/FA,MAAMsD,GAAe,IAAIC,IAAI,CAE3B,eAEA,MACA,WACA,WACA,UACA,KACA,SACA,OACA,UACA,aACA,QAEA,MAEA,YACA,YACA,aACA,UACA,MACA,OACA,WACA,SAEA,SAEA,cACA,SACA,QACA,OAEA,cAEA,KAEA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,QAGK,SAASC,GAAkB3L,GAChC,OAAQA,EAAE4L,SAAW5L,EAAE6L,UAAsB,YAAV7L,EAAEkB,IAahC,SAAS4K,IAAmB,IAAE5K,EAAF,OAAOvC,IACxC,MACU,QAARuC,IACCvC,aAAkBoN,kBACjBpN,aAAkBqN,qBAClBrN,aAAkBsN,oBAEbtN,EAAOuN,QACZ,+FClCS,SAASC,IAAgB,kEAMtCC,IACuB,UACvB,MAAMC,GAAkBjN,EAAAA,EAAAA,UAClBkN,GAFiB,KAEM5J,OAAAA,EAAAA,EAAAA,oBAAAA,EAAAA,EAAAA,sBAKvB6J,EAA2BhH,GAAc,KAC7C9C,GAAAA,MAkBF,aACE+J,qBAAqBH,EAArBG,SAoBF,cACE,EACE7J,EAAYR,GAAZQ,GAEA8J,KAxCJ1N,EAAAA,EAAAA,YAAU,KACR,KAQA,OAFA2N,iBAAiB,YAAaC,EAA0B,CAAEC,SAAS,IAE5D,KACLC,oBAAoB,YAAaF,EAA0B,CAAEC,SAAS,IACtEE,KARF,aACET,EAAAA,QAA0BU,sBAA1BV,MASD,CAACC,EAbJvN,IA4CA,MAAM,UAAEiK,GAAR,EACM1K,EAAY+F,EAAiB,EAAD,uBAIX,mBAAd2E,EAA2BA,EAAlC,GAJF,IAGE,SAACtG,EAAAA,gBAAAA,EAAD,kBAjFJ,WAqFE,OACE,gBACEwE,KADF,WAEE,gBAAexE,EAAAA,IAFjB,EAGE,eAHF,qBAKEpE,UALF,EAME6I,MAAOpD,EAAarB,EANtB,GAOEQ,UAzCJ,YACE,cAAInC,EAAAA,IACFA,EAD0B,kBAG1B0B,SACK,aAAI1B,EAAAA,IACTA,EAAAA,kBACA0B,GAAAA,GACA2J,QACK,UACa,kBAAG1J,EAAAA,oBAAH,EAAGA,EAAAA,cAAH,EAAlB,IACA,IACE3B,EAAAA,oBA8BFiM,mBAAoBV,EAAuBQ,OAR7C,WAUGpK,MAAAA,EAAAA,SACC,iCACE,SAACA,EAAD,QAAeA,OAAf,EAA+BP,IAA/B,EAAyCQ,YAAzC,EAAmEF,QAAnE,KACCC,OAAAA,EAAAA,EAAAA,oBAAAA,EAAAA,EAAAA,mBACC,SAACA,EAAD,WAAkBA,OAAlB,EAAkCP,IAAlC,EAA4CR,gBAA5C,EAA2DgB,YAD7D,SCxFK,SAASsK,IAAkB,0IASxCnD,IAuCA,gBACE,MAAM,aAAOhG,GAAb,EACMpB,EAASuF,EAAf,GACMiF,EAAY5E,EAAlB,GACM6E,EAAc,IAApB,GACMC,EAAN,GACA,IAAK,IAAIC,EAAT,EAA0BA,EAA1B,EAAyCA,IACvC,GAAI7E,EAAe,CAAE1E,OAAF,EAAaI,IAAAA,IAAQ,CACtC,MAAMoJ,EAAaC,EAAO,CAAEzG,UAAWpE,EAAb,gBAAoC8K,UAAWlF,EAAK+E,KAC1EC,IAAehF,EAAnB+E,KACEF,EAAAA,GAAAA,EACAC,EAAAA,KAAAA,IAKFA,EAAAA,OAAJ,IACc,MAAZK,GAAAA,EAAY,EAAgB,WAAW/K,OAAAA,KAI3C,OACE,gBACEpE,UAnF2B,gCAoF3BoP,YA7DJ,YAME,cAIE,IAAI3M,EAAAA,SAAqB4M,IAG3B,aACE7O,OAAAA,oBAAAA,YAAAA,GACAA,OAAAA,oBAAAA,UAAAA,GACA8O,GAAAA,GAKJ,WACE,MAAMC,EAAaC,EAAnB,QACA,YAAID,EAA0B,OAE9B,MAAM,OAAE/J,GAAR,EAGAiK,EAFsBjK,EAAAA,EAAsBA,EAAtBA,EAAtB,EACoBA,EAAAA,EAAsB+J,EAAtB/J,EAApB,GAEAgG,OAAAA,GAZEkE,GAhBF,IAAIjN,EAAAA,UACJ6M,GAAAA,GACA9O,OAAAA,iBAAAA,YAAAA,GACAA,OAAAA,iBAAAA,UAAAA,KA0DEuI,cA9BJ,YACEtG,EAAAA,kBACAgN,EAAW1F,EAAAA,OAAD,EAA8BC,EAAxCyF,W,kBCXJ,MAAME,GAAmC,CACvC/J,KAAM,EACNJ,QAAS,EACToK,KAAM,UAyGR,SAASC,IAGLlG,QAASmG,EACT9F,KAAM+F,EAHR,YAIExF,EAJF,aAKEyF,EALF,aAMEb,EANF,UAQEc,EACAC,gBAAiBC,EACjBC,iBAAkBC,EAVpB,aAYEC,EAZF,qBAaEC,EAbF,YAcEvI,EAdF,oBAeEK,EAfF,qBAgBEmI,EACAC,QAASC,EAjBX,WAkBEC,EAlBF,iBAmBEC,EAnBF,yBAoBEC,EApBF,WAsBEhG,EAtBF,iBAuBEC,EAvBF,SAwBEgG,EAxBF,eAyBE7H,EAzBF,OA0BEgG,EA1BF,QA2BE8B,EAEAC,mBAAoBC,EA7BtB,qBA8BEC,EA9BF,YAgCEC,EAhCF,eAiCEC,EAjCF,UAkCEpR,EAlCF,MAmCE6I,EAnCF,SAoCE0C,EAEA,aAAc8F,EACd,kBAAmBjQ,EACnB,mBAAoBkQ,EACpB,cAAeC,IAEjB1Q,IACA,OAIS,MAAToP,IAAAA,EAAc,IACd,MAAMC,GAAe,MAAGC,EAAAA,EAA4C,iBAAdF,EAAyBA,EAAY,GACrFG,GAAgB,MAAGC,EAAAA,EAA6C,iBAAdJ,EAAyBA,EAAY,GACvFuB,GAAW,MAAGL,EAAAA,EAAenG,GAC7BgG,GAAkB,MAAGC,EAAAA,EAAyB,OAChC,MAApBC,IAAAA,GAAyB,GAKzB,MAAOO,GAAWC,KAAgBhK,EAAAA,EAAAA,UAAS,IACpCiK,GAAYC,KAAiBlK,EAAAA,EAAAA,UAAS,IACtCvB,GAAc0L,KAAmBnK,EAAAA,EAAAA,WAAsC,IAAM,IAAIoK,OACjF/H,GAAkBgI,KAAuBrK,EAAAA,EAAAA,UAC9CiI,KAEKqC,GAAYC,KAAiBvK,EAAAA,EAAAA,UAA+C,OAC5EwK,GAAY5C,KAAe5H,EAAAA,EAAAA,WAAS,IACpCyK,GAAmBC,KAAiB1K,EAAAA,EAAAA,eAA6B5F,IACjEuQ,GAAkBC,KAAuB5K,EAAAA,EAAAA,UAAyC,MAKnF6K,IAAuBzR,EAAAA,EAAAA,QAAOiJ,IAC9ByF,IAA0B1O,EAAAA,EAAAA,QAAOqR,IACjCK,IAAqB1R,EAAAA,EAAAA,SAAQ,GAC7B2R,IAAS3R,EAAAA,EAAAA,QAAuB,OAK/B4R,GAASC,GAAWC,IC9PtB,WAKL,MAAMF,GAAU5R,EAAAA,EAAAA,QAAuB,OAChC6R,EAAWE,IAAgBnL,EAAAA,EAAAA,UAAS,IACpCkL,EAAYE,IAAiBpL,EAAAA,EAAAA,UAAS,GA2B7C,OAzBAnH,GAAgB,KACd,MAAM,eAAEwS,GAAmBvS,OAI3B,GAAsB,MAAlBuS,EAAwB,OAE5B,MAAMC,EAAiB,IAAID,GAAe,KAGxC,MAAM,YAAEE,EAAF,aAAeC,GAAiBR,EAAQ3R,QAI9C8R,EAAaI,GAAeE,iBAAmB,GAAM,EAAI,EAAI,IAC7DL,EAAcI,MAKhB,OAFAF,EAAeI,QAAQV,EAAQ3R,SAExB,KACLiS,EAAeK,gBAEhB,IAEI,CAACX,EAASC,EAAWC,GD4NaU,GAEnCC,GAAgB,gBAAGhJ,OAAH,EAAGA,EAAaC,QAAhB,GAA0B,EAC1C0I,GAAeN,GAAa1C,GAAkBqD,GAAmBnD,GACjEoD,GAA+B,MAAhBlD,GAAgD,MAAxBC,EACvCkD,IAAmD,IAA7B1J,GAAiBvE,OAEvCjC,IAAkBmQ,EAAAA,EAAAA,UAAQ,KAE9B,MAAM,OAAElJ,GAAWuF,EACnB,OACa,IAAXvF,GACgB,MAAhB8F,GACgB,MAAhBN,GACAM,EAAaqD,MAAQnJ,GACrBuF,EAAQ6D,OAAO/P,GAAQyM,EAAajK,IAAI2J,EAAanM,QAEtD,CAACkM,EAASO,EAAcN,KAErB,QACJrG,GADI,eAEJkK,GAFI,oBAGJC,GAHI,kBAIJC,GAJI,cAKJC,GALI,cAMJC,GANI,iBAOJC,GAPI,sBAQJrN,GARI,uBASJsN,GATI,QAUJ1D,IlBpQG,UAAqC,WAC1CX,EAD0C,aAE1C3J,EAF0C,cAG1CC,EAH0C,WAI1CuL,EAJ0C,qBAK1CnB,EAL0C,WAM1CE,EAN0C,qBAO1CQ,IAC+B,YAC/B,MAAMvK,EAAc,eAAG6J,OAAH,EAAGA,EAAsB9J,UAAzB,EAAqC,GACnD0N,EAAgB,eAAG5D,OAAH,EAAGA,EAAsB/M,WAAzB,EAAsCc,EACtD8P,EAAe,eAAG7D,OAAH,EAAGA,EAAsBvN,WAAzB,EACfqR,EAAgB,eAAG9D,OAAH,EAAGA,EAAsBxN,YAAzB,GAEhB,QAAE2G,EAAF,eAAWkK,EAAX,sBAA2BhN,EAA3B,QAAkD4J,IAAYiD,EAAAA,EAAAA,UAAQ,KAO1E,MAAMjD,EAAoB,GAC1B,IAAI5J,GAAyB,EAE7B,MAAM8C,EAAUmG,EAAWyE,KAAKC,IAAc,YAC5C,MAAMpK,EAAQ,eAAGsG,OAAH,EAAGA,EAAY+D,SAASD,EAAU5R,OAAlC,EAERM,EAASkH,GAAYoK,EAAUtR,SAAU,EAEzCkB,EAA2C,IAC5CoQ,EACH5O,IAAK,EACL1C,OAAAA,EACA+C,oBAAoB,EACpBmE,SAAAA,EACAnH,SAAQ,SAAEuR,EAAUvR,UAAZ,EAAwBoR,EAChCrR,UAAS,SAAEwR,EAAUxR,WAAZ,EAAyBsR,EAClC7Q,UAAS,SAAE+Q,EAAU/Q,WAAZ,EAAyB2Q,GAWpC,OARIhK,IACF,MAAAhG,EAAON,iBAAPM,EAAON,eAAmBU,IAGxBtB,GACF2D,IAGKzC,KAGTuF,EAAQ1B,MAAK,EAAGrF,IAAK8R,EAAMxR,OAAQyR,IAAa/R,IAAKgS,EAAM1R,OAAQ2R,KAE7DH,IAAShS,GAA2B,EACpCkS,IAASlS,EAA0B,EAGvC,MAAIgO,GAAAA,EAAY+D,SAASC,GACnBhE,EAAW+D,SAASG,GACflE,EAAWoE,QAAQJ,GAAQhE,EAAWoE,QAAQF,IAE/C,EAEV,MAAIlE,GAAAA,EAAY+D,SAASG,GAAc,EAGnCD,EACEE,EAAgB,GACZ,EAENA,EAAgB,EAGb,IAGT,MAAMhB,EAA4C,GAiBlD,OAhBAlK,EAAQoL,SAAQ,CAAC3Q,EAAQwB,KACvBxB,EAAOwB,IAAMA,EAETxB,EAAOgG,UACTqG,EAAQ7E,KAAKxH,EAAOxB,KAGA,MAAlBwB,EAAOsB,SACTmO,EAAejI,KAAKxH,OAIO,IAA3ByC,IACF8C,EAAQ9C,GAAuBZ,oBAAqB,GAG/C,CACL0D,QAAAA,EACAkK,eAAAA,EACAhN,sBAAAA,EACA4J,QAAAA,KAED,CAACX,EAAYsE,EAAkBE,EAAkBD,EAAiB3D,KAE/D,cAAEsD,EAAF,iBAAiBE,EAAjB,uBAAmCC,EAAnC,cAA2DF,IAAkBP,EAAAA,EAAAA,UAAQ,KAMzF,MAAMO,EAAgB,IAAInC,IAC1B,IAAIhM,EAAO,EACPoO,EAAmB,EACnBC,EAAyB,EACzBa,EAAkB,GAClBC,EAAiB,EACjBC,EAAyB,EAE7B,IAAK,MAAM9Q,KAAUuF,EAAS,CAC5B,IAAI7G,EAAQoD,EAAkB9B,EAAQ+B,EAAcC,QAEtCtE,IAAVgB,EACFoS,KAEApS,EAAQ2D,EAAiB3D,EAAOsB,EAAQuC,GACxCsO,GAAkBnS,EAClBmR,EAAckB,IAAI/Q,EAAQ,CAAEtB,MAAAA,EAAOgD,KAAM,KAI7C,IAAK,MAAM1B,KAAUuF,EAAS,CAC5B,IAAI7G,EACJ,GAAImR,EAAc5N,IAAIjC,GAAS,CAC7B,MAAMgR,EAAenB,EAAc3N,IAAIlC,GACvCgR,EAAatP,KAAOA,IACjBhD,MAAAA,GAAUsS,QAKbtS,EAAQ2D,EADuBxB,GADNmB,EAAgB6O,GACeC,GACP9Q,EAAQuC,GACzDsO,GAAkBnS,EAClBoS,IACAjB,EAAckB,IAAI/Q,EAAQ,CAAEtB,MAAAA,EAAOgD,KAAAA,IAErCoO,GAAoBpR,EACpBgD,GAAQhD,EACRkS,GAAoB,GAAElS,OAGxB,IAA+B,IAA3B+D,EAA8B,CAChC,MAAMuO,EAAenB,EAAc3N,IAAIqD,EAAQ9C,IAC/CsN,EAAyBiB,EAAatP,KAAOsP,EAAatS,MAG5D,MAAMkR,EAAwC,CAC5CqB,oBAAqBL,GAGvB,IAAK,IAAIjG,EAAI,EAAGA,GAAKlI,EAAuBkI,IAAK,CAC/C,MAAM3K,EAASuF,EAAQoF,GACvBiF,EAAe,qBAAoB5P,EAAOwB,OAAU,GAAEqO,EAAc3N,IAAIlC,GAAS0B,SAGnF,MAAO,CAAEkO,cAAAA,EAAeE,iBAAAA,EAAkBC,uBAAAA,EAAwBF,cAAAA,KACjE,CAAC9N,EAAcwD,EAASvD,EAAeO,EAAgBE,KAEnDiN,EAAqBC,IAAqBL,EAAAA,EAAAA,UAAQ,KACvD,IAAKxC,EACH,MAAO,CAAC,EAAGvH,EAAQa,OAAS,GAG9B,MAAM8K,EAAe3D,EAAawC,EAC5BoB,EAAgB5D,EAAavL,EAE7BoP,EAAa7L,EAAQa,OAAS,EAC9BiL,EAAyB1Q,EAAI8B,EAAwB,EAAG2O,GAG9D,GAAIF,GAAgBC,EAClB,MAAO,CAACE,EAAwBA,GAIlC,IAAIC,EAAqBD,EACzB,KAAOC,EAAqBF,GAAY,CACtC,MAAM,KAAE1P,EAAF,MAAQhD,GAAUmR,EAAc3N,IAAIqD,EAAQ+L,IAGlD,GAAI5P,EAAOhD,EAAQwS,EACjB,MAEFI,IAIF,IAAIC,EAAmBD,EACvB,KAAOC,EAAmBH,GAAY,CACpC,MAAM,KAAE1P,EAAF,MAAQhD,GAAUmR,EAAc3N,IAAIqD,EAAQgM,IAGlD,GAAI7P,EAAOhD,GAASyS,EAClB,MAEFI,IAMF,MAAO,CAHqB3Q,EAAIyQ,EAAwBC,EAAqB,GACnD3Q,EAAIyQ,EAAYG,EAAmB,MAG5D,CACD1B,EACAtK,EACA9C,EACA8K,EACAwC,EACA/N,EACA8K,IAGF,MAAO,CACLvH,QAAAA,EACAkK,eAAAA,EACAC,oBAAAA,EACAC,kBAAAA,EACAC,cAAAA,EACAC,cAAAA,EACAC,iBAAAA,EACArN,sBAAAA,EACAsN,uBAAAA,EACA1D,QAAAA,GkBiCEmF,CAAqB,CACvB9F,WAAAA,EACA3J,aAAAA,GACAwL,WAAAA,GACAvL,cAAeuM,GACfnC,qBAAAA,EACAE,WAAYC,EAAaD,OAAa5O,EACtCoP,qBAAAA,KAGI,oBACJ2E,GADI,kBAEJC,GAFI,KAGJ9L,GAHI,UAIJ+L,GAJI,eAKJC,GALI,iBAMJC,GANI,WAOJhM,GAPI,UAQJiM,GARI,aASJC,GATI,WAUJC,IEtRG,UAA4B,QACjCrG,EADiC,UAEjCE,EAFiC,aAGjCiD,EAHiC,UAIjCzB,EAJiC,QAKjChB,EALiC,WAMjCE,EANiC,iBAOjCC,EAPiC,qBAQjCM,IAEA,MAAOmF,EAAaN,IAAarC,EAAAA,EAAAA,UAAQ,KACvC,GAAuB,IAAnBjD,EAAQjG,QAA8B,MAAdmG,EAAoB,MAAO,MAAC7O,EAAWiO,EAAQvF,QAE3E,MAAM8L,EAAY,CAChBtM,GACCuM,KAAeC,GAChBC,KAEA,IAAIC,EAAiB,EACrB,MAAMC,EAA+B,GACrC,IAAK,MAAO/T,EAAKuJ,KAAcyK,OAAOC,QAAQlG,EAAW3G,EAAMuM,IAAc,CAE3E,MAAOO,EAAaC,GACc,IAAhCP,EAAqBhM,OACjB,CAAC2B,EAAWA,EAAU3B,QACtB8L,EAAUnK,EAAWqK,EAAsBC,EAAgBC,EAAiB,GAClFC,EAAO/T,GAAO,CAAEuJ,UAAAA,EAAW2K,YAAAA,EAAaL,cAAeA,EAAgBC,GACvEA,GAAkBK,EAAiB,EAGrC,MAAO,CAACJ,EAAQD,IAGlB,OAAOJ,EAAUvG,EAASU,EAAS,KAClC,CAACA,EAASE,EAAYZ,KAElB/F,EAAMC,IAAcyJ,EAAAA,EAAAA,UAAQ,KAIjC,MAAMsD,EAAe,IAAI5J,IACzB,IAAKiJ,EAAa,MAAO,CAACtG,EAAS9F,GAEnC,MAAMgN,EAAwC,GACxCC,EAAc,CAClBlN,EACAmN,EACA1K,KAnDN,IAAyB2K,EAAAA,EAqDCpN,EApDjBqN,MAAMC,QAAQF,GAqDfH,EAAcrL,QAAQ5B,GAGxB4M,OAAOW,KAAKvN,GAAM+K,SAAQ,CAAC7I,EAAUsL,EAAUD,KAAS,MAEtD,MAAMtL,OAAkBnK,IAAbqV,EAA0B,GAAEA,MAAajL,IAAaA,EAC3DvH,EAAU,eAAGiM,OAAH,EAAGA,EAAkBvK,IAAI4F,KAAzB,GACV,UAAEE,EAAF,YAAa2K,EAAb,cAA0BL,GAAkBzM,EAAKkC,GAEjDuL,EAAwB,CAC5BxL,GAAAA,EACAkL,SAAAA,EACAjL,SAAAA,EACAvH,WAAAA,EACAwH,UAAAA,EACAM,MAAAA,EACA+K,SAAAA,EACAf,cAAAA,EACAiB,QAASH,EAAK/M,QAEhByM,EAAcrL,KAAK6L,GACnBT,EAAaW,IAAIF,GAEb9S,GACFuS,EAAYJ,EAAa7K,EAAIQ,EAAQ,OAM3C,OADAyK,EAAYb,OAAavU,EAAW,GAC7B,CAACmV,EAAehN,GAEvB,SAASA,EAAWpG,GAClB,OAAOmT,EAAa3Q,IAAIxC,MAEzB,CAAC+M,EAAkByF,EAAatG,KAE7B,eAAEiG,EAAF,iBAAkBC,EAAlB,UAAoCC,EAApC,aAA+CC,EAA/C,WAA6DC,IAAe1C,EAAAA,EAAAA,UAAQ,KACxF,GAAyB,iBAAdzD,EACT,MAAO,CACL+F,eAAgB/F,EAAYjG,EAAKQ,OACjCyL,iBAAmB,WAAUjM,EAAKQ,WAAWyF,OAC7CiG,UAAY1Q,GAAmBA,EAASyK,EACxCkG,aAAc,IAAMlG,EACpBmG,WAAa/M,GAAmBnE,EAAMmE,EAAS4G,IAInD,IAAI+F,EAAiB,EACjBC,EAAmB,IAIvB,MAAM2B,EAAe5N,EAAKuK,KAAK1Q,IAC7B,MAAMgU,EAAmB5N,EAAWpG,GAChCoM,EAAU,CAAE1O,KAAM,QAASsC,IAAAA,IAC3BoM,EAAU,CAAE1O,KAAM,MAAOsC,IAAAA,IACvBiU,EAAW,CAAE7K,IAAK+I,EAAgBlR,OAAQ+S,GAGhD,OAFA5B,GAAqB,GAAE4B,OACvB7B,GAAkB6B,EACXC,KAGHC,EAAkBvS,GACfR,EAAI,EAAGD,EAAIiF,EAAKQ,OAAS,EAAGhF,IAGrC,MAAO,CACLwQ,eAAAA,EACAC,iBAAAA,EACAC,UAAY1Q,GAAmBoS,EAAaG,EAAevS,IAASyH,IACpEkJ,aAAe3Q,GAAmBoS,EAAaG,EAAevS,IAASV,OACvEsR,WAAW/M,GACT,IAAI2O,EAAQ,EACRC,EAAML,EAAapN,OAAS,EAChC,KAAOwN,GAASC,GAAK,CACnB,MAAMC,EAASF,EAAQ9S,GAAO+S,EAAMD,GAAS,GACvCG,EAAgBP,EAAaM,GAAQjL,IAE3C,GAAIkL,IAAkB9O,EAAQ,OAAO6O,EAQrC,GANIC,EAAgB9O,EAClB2O,EAAQE,EAAS,EACRC,EAAgB9O,IACzB4O,EAAMC,EAAS,GAGbF,EAAQC,EAAK,OAAOA,EAE1B,OAAO,MAGV,CAAChO,EAAYgG,EAAWjG,IAE3B,IAAI6L,EAAsB,EACtBC,EAAoB9L,EAAKQ,OAAS,EAEtC,GAAI0G,EAAsB,CACxB,MAAMkH,EAAoB,EACpBC,EAAqBjC,EAAW3E,GAChC6G,EAAmBlC,EAAW3E,EAAYyB,GAChD2C,EAAsB7Q,EAAI,EAAGqT,EAAqBD,GAClDtC,EAAoB/Q,EAAIiF,EAAKQ,OAAS,EAAG8N,EAAmBF,GAG9D,MAAO,CACLvC,oBAAAA,EACAC,kBAAAA,EACA9L,KAAAA,EACA+L,UAAAA,EACAC,eAAAA,EACAC,iBAAAA,EACAhM,WAAAA,EACAiM,UAAAA,EACAC,aAAAA,EACAC,WAAAA,GFkHEmC,CAAgB,CAClBxI,QAAAA,EACAU,QAAAA,GACAE,WAAAA,EACAV,UAAAA,EACAiD,aAAAA,GACAzB,UAAAA,GACAb,iBAAAA,EACAM,qBAAAA,IAGI9F,GG7SD,UAAmC,QACxCzB,EADwC,eAExCkK,EAFwC,KAGxC7J,EAHwC,YAIxCO,EAJwC,oBAKxCuJ,EALwC,kBAMxCC,EANwC,sBAOxClN,EAPwC,oBAQxCgP,EARwC,kBASxCC,EATwC,WAUxC7L,IAGA,MAAMuO,GAAW9E,EAAAA,EAAAA,UAAQ,KACvB,GAA4B,IAAxBI,EAA2B,OAAO,EAEtC,IAAI0E,EAAW1E,EAEf,MAAM2E,EAAiB,CAACC,EAAgBhT,SACtB5D,IAAZ4D,GAAyBgT,EAAShT,EAAUoO,IAC9C0E,EAAWE,GACJ,GAKX,IAAK,MAAMtU,KAAUyP,EAAgB,CAEnC,MAAM6E,EAAStU,EAAOwB,IACtB,GAAI8S,GAAUF,EAAU,MACxB,GAAIC,EAAeC,EAAQ9R,EAAWxC,EAAQyC,EAAuB,CAAEtF,KAAM,YAC3E,MAIF,IAAK,IAAIiE,EAASqQ,EAAqBrQ,GAAUsQ,EAAmBtQ,IAAU,CAC5E,MAAM3B,EAAMmG,EAAKxE,GACjB,IAAIyE,EAAWpG,IAEb4U,EAAeC,EAAQ9R,EAAWxC,EAAQyC,EAAuB,CAAEtF,KAAM,MAAOsC,IAAAA,KAEhF,MAKJ,GAAmB,MAAf0G,EACF,IAAK,MAAM1G,KAAO0G,EAChB,GACEkO,EACEC,EACA9R,EAAWxC,EAAQyC,EAAuB,CAAEtF,KAAM,UAAWsC,IAAAA,KAG/D,MAMR,OAAO2U,IACN,CACD3C,EACAC,EACA9L,EACAO,EACAuJ,EACAjN,EACAgN,EACA5J,IAGF,OAAOyJ,EAAAA,EAAAA,UAAQ,KACb,MAAMtI,EAA6C,GACnD,IAAK,IAAIsN,EAAS,EAAGA,GAAU3E,EAAmB2E,IAAU,CAC1D,MAAMtU,EAASuF,EAAQ+O,GAEnBA,EAASF,IAAapU,EAAOlB,QACjCkI,EAAgBQ,KAAKxH,GAGvB,OAAOgH,IACN,CAACoN,EAAUzE,EAAmBpK,IH2NTgP,CAAmB,CACzChP,QAAAA,GACAkK,eAAAA,GACAC,oBAAAA,GACAC,kBAAAA,GACAlN,sBAAAA,GACAgP,oBAAAA,GACAC,kBAAAA,GACA9L,KAAAA,GACAO,YAAAA,EACAN,WAAAA,KAGI2O,GAAYnI,GAAQjG,OAAS,GAA2B,mBAAfmG,EACzCkI,GAAYD,IAAa,EAAI,EAC7BE,GAAYnP,GAAQa,OAAS,EAE7BuO,GA9EkB,EA8EY/O,GAAKQ,OAAS+I,GAAmB,EAC/DyF,GAAsCC,GAA4BlP,IAClEmP,GAAqCC,GAA2BpP,IAKhEqP,GAAkBnS,EAAcoS,IAChCC,GAAsBrS,GA6I5B,SAAuBzF,GACrB,IAAK+O,EAAsB,OAE3BlL,EAA6B2K,GAC7B,MAAMuJ,EAAkB,IAAInM,IAAIkD,GAEhC,IAAK,MAAMzM,KAAOkM,EAAS,CACzB,MAAMyJ,EAASxJ,EAAanM,GACxBrC,EACF+X,EAAgB5B,IAAI6B,GAEpBD,EAAgBE,OAAOD,GAI3BjJ,EAAqBgJ,MA3JjBG,GAAiCzS,EAAc0S,IAC/CC,GAA2B3S,GAC/B,CAACpD,EAAQO,EAAiCyV,KAExC/Q,GAAW,CAAEtD,OADEwE,GAAK8K,QAAQjR,GACP+B,IAAKxB,EAAOwB,KAAOiU,MAGtCC,GAAoB7S,GAAezB,IACvCsD,GAAW,CAAEtD,OAAAA,EAAQI,KAAM,OAEvBmU,GAAyB9S,GAAerB,IAC5CkD,GAAW,CAAEtD,QAAS,EAAGI,IAAAA,OAErBoU,GAA0B/S,GAC9B,CAACgT,EAAgB7V,KAEf0E,GAAW,CAAEtD,OADE+E,EAAauK,QAAQmF,GAtGhB,EAsGgDjQ,GAAKQ,OAAS,EAC7D5E,IAAKxB,EAAOwB,SAG/BsU,GAAoBjT,EAAcxC,IAKxClE,GAAgB,KAEXyY,KACDmB,GAAepQ,GAAkBwI,GAAqBxR,UAMxDwR,GAAqBxR,QAAUgJ,GAC/B+D,GAAa/D,KAEiB,IAA1BA,GAAiBnE,KACnB6M,GAAO1R,QAASC,MAAM,CAAEC,eAAe,KARvCsR,GAAqBxR,QAAUgJ,MAYnCxJ,GAAgB,KACd,GAAyB,OAArB8R,GAA2B,OAC/B,MAGMvP,EAHgB4P,GAAQ3R,QAASqZ,cACpC,mBAAkB/H,GAAiBzM,IAAM,OAEhBqN,YAAc,EAC1CpB,IAAiB1L,IACf,MAAMkU,EAAkB,IAAIvI,IAAI3L,GAEhC,OADAkU,EAAgBlF,IAAI9C,GAAiBzP,IAAKE,GACnCuX,KAET/H,GAAoB,MACN,MAAdrJ,GAAAA,EAAiBoJ,GAAiBzM,IAAK9C,KACtC,CAACuP,GAAkBK,GAASzJ,KAE/BqR,EAAAA,EAAAA,qBAAoBzZ,IAAK,KAAM,CAC7B0Z,QAAS7H,GAAQ3R,QACjByZ,eAAe5U,GACbkI,GAAa,CAAElI,IAAAA,KAEjB6U,YAAYjV,GACV,MAAM,QAAEzE,GAAY2R,GACf3R,GACLA,EAAQ2Z,SAAS,CACfzN,IAAKiJ,GAAU1Q,GACfmV,SAAU,YAGd7R,WAAAA,OAMF,MAAM8R,IAAqBzT,EAAAA,EAAAA,cACzB,CAAC/C,EAAiCtB,KAClB,SAAVA,GAIJ+O,IAAiB1L,IACf,MAAMkU,EAAkB,IAAIvI,IAAI3L,GAEhC,OADAkU,EAAgBlF,IAAI/Q,EAAOxB,IAAKE,GACzBuX,KAGK,MAAdpR,GAAAA,EAAiB7E,EAAOwB,IAAK9C,IAT3BwP,GAAoBlO,KAWxB,CAAC6E,IAGGuC,IAAuBrE,EAAAA,EAAAA,cAAa3B,IACxC4M,GAAc5M,GACdgK,GAAwBzO,QAAUyE,IACjC,IAKH,SAAS6T,IAAU,IAAExV,EAAF,QAAOrC,EAAP,aAAgBoC,IACjC,IAAK2M,EAAsB,OAE3BlL,EAA6B2K,GAC7B,MAAMuJ,EAAkB,IAAInM,IAAIkD,GAChC,GAAIrG,GAAWpG,GAAM,CACnB,IAAK,MAAMgX,KAAYhX,EAAIsI,UAAW,CACpC,MAAMqN,EAASxJ,EAAa6K,GACxBrZ,EACF+X,EAAgB5B,IAAI6B,GAEpBD,EAAgBE,OAAOD,GAI3B,YADAjJ,EAAqBgJ,GAIvB,MAAMC,EAASxJ,EAAanM,GAC5B,GAAIrC,EAAS,CACX+X,EAAgB5B,IAAI6B,GACpB,MAAMsB,EAAiBtI,GAAmBzR,QACpCyE,EAASwE,GAAK8K,QAAQjR,GAE5B,GADA2O,GAAmBzR,QAAUyE,EACzB5B,IAAoC,IAApBkX,GAAyBA,IAAmBtV,EAAQ,CACtE,MAAMuV,EAAO5V,EAAKK,EAASsV,GAC3B,IAAK,IAAI/L,EAAI+L,EAAiBC,EAAMhM,IAAMvJ,EAAQuJ,GAAKgM,EAAM,CAC3D,MAAMlX,EAAMmG,GAAK+E,GACb9E,GAAWpG,IACf0V,EAAgB5B,IAAI3H,EAAanM,WAIrC0V,EAAgBE,OAAOD,GACvBhH,GAAmBzR,SAAW,EAGhCwP,EAAqBgJ,GAqBvB,SAAS9U,GAAYuW,GACnB,IAAKnK,EAA0B,OAC/B,MAAMoK,EAAsB,IAAI7N,IAAIwD,GAChCqK,EAAoB5U,IAAI2U,GAC1BC,EAAoBxB,OAAOuB,GAE3BC,EAAoBtD,IAAIqD,GAE1BnK,EAAyBoK,GAG3B,SAASC,GAAczY,GACrB,KAAMA,EAAMpC,kBAAkB8a,SAAU,OACxC,MAAMC,EAAoD,OAAtC3Y,EAAMpC,OAAOgb,QAAQ,aACnCC,EAAa1C,IAAanW,EAAMpC,SAAWoS,GAAO1R,QACxD,IAAKqa,IAAgBE,EAAY,OAEjC,MAAM,IAAE1Y,EAAF,QAAO2Y,GAAY9Y,GACnB,OAAE+C,GAAWuE,GAEnB,GACEmP,IACW,MAAXnI,GACA1D,GAAkB5K,KACjBwH,GAAWD,GAAKxE,KACS,WAA1BuE,GAAiB6F,KACjB,CAGA,MACM4L,EAAO,GACb,GAFa,KAETD,EAEF,YA0EN,WACE,MAAM,IAAE3V,EAAF,OAAOJ,GAAWuE,GACxBkI,GAAc,CAAEpO,IAAKkM,EAAQ0L,GAAajW,IAAUgD,UAAWmB,GAAQ/D,GAAKhD,MA7ExE8Y,GAGF,GAAIH,IAAYC,EAEd,YA2EN,WACE,IAAKzK,IAAY5B,GAA+B,OAAf6C,KAAwB9H,GAAeH,IACtE,OAGF,MAAM,IAAEnE,EAAF,OAAOJ,GAAWuE,GAClBmF,EAAYa,EAAQ0L,GAAajW,IASvCmU,GAAUnU,EAPeuL,EAAQ,CAC/BnC,UAAWoD,GAAWnO,IACtB8X,gBAAiB3J,GAAWxJ,UAC5B0G,UAAAA,EACA0M,gBAAiBjS,GAAQ/D,GAAKhD,OAxF5BiZ,GAKJ,GAAIC,GAA6BtW,GAAS,CACxC,MAAM3B,EAAMmG,GAAKxE,GAEjB,GACEyE,GAAWpG,KACe,IAA1BkG,GAAiBnE,MAEP,cAARhD,GAAuBiB,EAAIc,YAElB,eAAR/B,IAAyBiB,EAAIc,YAIhC,OAFAlC,EAAMsZ,sBACNtX,GAAYZ,EAAIoI,IAKpB,OAAQxJ,EAAMG,KACZ,IAAK,SAEH,YADAqP,GAAc,MAEhB,IAAK,UACL,IAAK,YACL,IAAK,YACL,IAAK,aACL,IAAK,MACL,IAAK,OACL,IAAK,MACL,IAAK,SACL,IAAK,YAiPT,SAAkBxP,GAChB,MAAM,IAAEG,EAAF,SAAOoZ,GAAavZ,EAC1B,IAAImN,EAAOoB,GACX,GAAY,QAARpO,EAAe,CACjB,GV3oBC,UAAqB,mBAC1BoO,EAD0B,UAE1B8H,EAF0B,UAG1BmD,EAH0B,UAI1BlD,EACAhP,kBAAkB,OAAEvE,EAAF,IAAUI,GALF,SAM1BoW,IAIA,GAA2B,SAAvBhL,GAAwD,eAAvBA,EAAqC,CACxE,MAAMkL,EAAkBtW,IAAQkT,EAC1BqD,EAA2B,IAARvW,EACnBwW,EAAY5W,IAAWuT,EACvBsD,EAAa7W,IAAWyW,EAE9B,OAAOD,EAAWG,GAAoBE,EAAaH,GAAmBE,EAGxE,OAAO,EUynBDE,CAAY,CACVN,SAAAA,EACAhL,mBAAAA,GACA8H,UAAAA,GACAmD,WAxeU,EAyeVlD,UAAAA,GACAhP,iBAAAA,KAKF,YAFAwS,KAKF3M,EAA8B,SAAvBoB,GAAgC,aAAeA,GAIxDvO,EAAMsZ,iBAEN,MACMS,EAtFR,SAAyB5Z,EAAa0K,EAAkB0O,GACtD,MAAM,IAAEpW,EAAF,OAAOJ,GAAWuE,GAClBlG,EAAMmG,GAAKxE,GACX9B,EAAgBsV,KAAgD,IAATpT,EAG7D,GACU,cAARhD,GACAc,GACAuG,GAAWpG,KACVA,EAAIc,YACS,IAAdd,EAAI4I,MACJ,CACA,IAAIgQ,GAAgB,EACpB,IAAK,IAAI1N,EAAIhF,GAAiBvE,OAAS,EAAGuJ,GAAK,EAAGA,IAAK,CACrD,MAAM2N,EAAY1S,GAAK+E,GACvB,GAAI9E,GAAWyS,IAAcA,EAAUzQ,KAAOpI,EAAIsT,SAAU,CAC1DsF,EAAe1N,EACf,OAGJ,IAAsB,IAAlB0N,EACF,MAAO,CAAE7W,IAAAA,EAAKJ,OAAQiX,GAI1B,OAAQ7Z,GACN,IAAK,UACH,MAAO,CAAEgD,IAAAA,EAAKJ,OAAQA,EAAS,GACjC,IAAK,YACH,MAAO,CAAEI,IAAAA,EAAKJ,OAAQA,EAAS,GACjC,IAAK,YACH,MAAO,CAAEI,IAAKA,EAAM,EAAGJ,OAAAA,GACzB,IAAK,aACH,MAAO,CAAEI,IAAKA,EAAM,EAAGJ,OAAAA,GACzB,IAAK,MACH,MAAO,CAAEI,IAAKA,GAAOoW,GAAY,EAAI,GAAIxW,OAAAA,GAC3C,IAAK,OAEH,OAAI9B,EAAsB,CAAEkC,IAAAA,EAAKJ,OAAQ,GAClC,CAAEI,IAAK,EAAGJ,OAAQ8H,GA3cb,EA2cmC9H,GACjD,IAAK,MAEH,OAAI9B,EAAsB,CAAEkC,IAAAA,EAAKJ,OAAQwE,GAAKQ,OAAS,GAChD,CAAE5E,IAAKkT,GAAWtT,OAAQ8H,EAAUyL,GAAYvT,GACzD,IAAK,SAAU,CACb,IAjdY,IAidRuE,GAAiBvE,OAAsB,OAAOuE,GAClD,MAAM4S,EAAWzG,GAAU1Q,GAAU2Q,GAAa3Q,GAAU0N,GAC5D,MAAO,CAAEtN,IAAAA,EAAKJ,OAAQmX,EAAW,EAAIvG,GAAWuG,GAAY,GAE9D,IAAK,WAAY,CACf,GAAI5S,GAAiBvE,QAAUwE,GAAKQ,OAAQ,OAAOT,GACnD,MAAM4S,EAAWzG,GAAU1Q,GAAU0N,GACrC,MAAO,CAAEtN,IAAAA,EAAKJ,OAAQmX,EAAW3G,GAAiBI,GAAWuG,GAAY3S,GAAKQ,OAAS,GAEzF,QACE,OAAOT,IA8BU6S,CAAgBha,EADrByK,GAAkB5K,GACiBuZ,GAC/C7B,GAAepQ,GAAkByS,IAiBrC1T,GV1wBG,UAA4C,mBACjDkI,EADiD,QAEjDrH,EAFiD,eAGjDkK,EAHiD,KAIjD7J,EAJiD,YAKjDO,EALiD,UAMjD0R,EANiD,UAOjDlD,EACA8D,iBAAmBjX,IAAKkX,GARyB,aASjDN,EATiD,sBAUjD3V,EAViD,mBAWjDkW,EAXiD,WAYjD9S,IAEA,IAAMrE,IAAKoX,EAASxX,OAAQyX,GAAeT,EAE3C,MAAMU,EAAcC,IAClB,GAAIF,GAAc,GAAKA,EAAajT,EAAKQ,OAAQ,CAC/C,MAAM3G,EAAMmG,EAAKiT,GACjB,GAAIhT,EAAWpG,GAAM,OAIvB,IAAK,MAAMO,KAAUyP,EAAgB,CACnC,MAAM6E,EAAStU,EAAOwB,IACtB,GAAI8S,EAASsE,EAAS,MACtB,MAAMtX,EAAU4E,EAAuB,CACrCN,KAAAA,EACAO,YAAAA,EACA/E,OAAQyX,EACRpW,sBAAAA,EACAzC,OAAAA,EACA6F,WAAAA,IAGF,GAAIvE,GAAWsX,EAAUtE,GAAUsE,EAAUtX,EAAUgT,EAAQ,CAC7DsE,EAAUtE,GAAUyE,EAAYzX,EAAU,GAC1C,SASN,GAJIqX,EAAmBP,IACrBU,EAAWF,EAAUF,EAAa,GAGT,SAAvB9L,EAA+B,CACjC,MAAMoM,EAAezT,EAAQa,OAEvB6S,GAAmC,IAAbL,EADFA,IAAYI,EAIT,eAAvBpM,EACgBiM,IAAelE,IAE/BiE,EAAU,EACVC,GAAc,GAGhBD,EAAU,EAEHK,IACkB,eAAvBrM,EACiBiM,IAAehB,IAEhCgB,GAAc,EACdD,EAAUI,EAAe,GAG3BJ,EAAUI,EAAe,EAE3BF,GAAW,IAIf,MAAO,CAAEtX,IAAKoX,EAASxX,OAAQyX,GUgrBIK,CAA4B,CAC3D3T,QAAAA,GACAkK,eAAAA,GACA7J,KAAAA,GACAO,YAAAA,EACA0R,WAjgBc,EAkgBdlD,UAAAA,GACAlS,sBAAAA,GACAmK,mBAAoBpB,EACpBiN,gBAAiB9S,GACjByS,aAAAA,EACAO,mBAAoB9D,GACpBhP,WAAAA,MAzREsT,CAAS9a,GACT,MACF,SAyDJ,SAAyBA,GAA4C,MACnE,IAAKyW,GAAoC,OACzC,MAAMrV,EAAMmG,GAAKD,GAAiBvE,QAClC,GAAIyE,GAAWpG,GAAM,OACrB,MAAM,IAAEjB,EAAF,SAAOoZ,GAAavZ,EAG1B,GAAI+Q,IAAgBwI,GAAoB,MAARpZ,EAAa,CAC3CyC,EAA6B2K,GAC7B,MAAMwJ,EAASxJ,EAAanM,GAI5B,OAHAwV,GAAU,CAAExV,IAAAA,EAAKrC,SAAU8O,EAAajK,IAAImT,GAAS5V,cAAc,SAEnEnB,EAAMsZ,iBAKR,SADepS,GAAQI,GAAiBnE,KACjC4X,gBAAP,QAAsBC,eAAtB,EAAsBA,cAAgBhb,GAClCA,EAAMib,sBAENxT,GAAeH,KHvlBhB,SAA4BtH,GACjC,OAAQ0K,GAAa9G,IAAI5D,EAAMG,KGslBW+a,CAAmBlb,IACzDsP,IAAoB,EAAGnM,IAAAA,EAAKJ,OAAAA,MAAR,CAClBI,IAAAA,EACAJ,OAAAA,EACAoK,KAAM,OACN/L,IAAAA,EACA+Z,YAAa/Z,MAlFbga,CAAgBpb,IAYtB,SAASgZ,GAAajW,GACpB,OAAOoT,GAAY7I,EAAQ+E,QAAQ9K,GAAKxE,IAAgBA,EAG1D,SAASmU,GAAUnU,EAAgB3B,GACjC,GAA4B,mBAAjBsL,EAA6B,OACxC,MAAM2O,EAAYrC,GAAajW,GAC/B,GAAI3B,IAAQkM,EAAQ+N,GAAY,OAChC,MAAMjP,EAAc,IAAIkB,GACxBlB,EAAYiP,GAAaja,EACzBsL,EAAaN,EAAa,CACxBC,QAAS,CAACgP,GACV1Z,OAAQuF,GAAQI,GAAiBnE,OAIrC,SAAS2W,KACuB,SAA1BxS,GAAiB6F,MACrB+J,GAAU5P,GAAiBvE,OAAQuE,GAAiBlG,KA4DtD,SAASka,GAA8BnY,GACrC,OAAOA,GAAOiT,IAAajT,GAAOkT,GAGpC,SAASgD,GAA6BtW,GACpC,OAAOA,GAAU,GAAKA,EAASwE,GAAKQ,OAGtC,SAASyO,IAA4B,IAAErT,EAAF,OAAOJ,IAC1C,OAAOA,IArVS,GAqVcA,GAAUuT,IAAagF,GAA8BnY,GAGrF,SAASuT,IAA2B,IAAEvT,EAAF,OAAOJ,IACzC,OAAOsW,GAA6BtW,IAAWuY,GAA8BnY,GAG/E,SAASsE,GAAe4N,GACtB,OACEqB,GAA2BrB,IAC3BhO,EAAuB,CAAEH,QAAAA,GAASK,KAAAA,GAAMD,iBAAkB+N,EAAU7N,WAAAA,KAIxE,SAASnB,GAAWgP,EAAoB+B,GACtC,GAAKZ,GAA4BnB,GAGjC,GAFAyE,KAEI1C,GAAgB3P,GAAe4N,GAAW,CAC5C,MAAMjU,EAAMmG,GAAK8N,EAAStS,QAC1BuM,GAAoB,IAAK+F,EAAUlI,KAAM,OAAQ/L,IAAAA,EAAK+Z,YAAa/Z,SAC1DsW,GAAepQ,GAAkB+N,GAG1ChK,GAAagK,GAEb/F,GAAoB,IAAK+F,EAAUlI,KAAM,WAI7C,SAAS9B,IAAa,IAAElI,EAAF,OAAOJ,IAC3B,MAAM,QAAEzE,GAAY2R,GACpB,GAAK3R,EAAL,CAEA,GAAmB,iBAAR6E,GAAoBA,EAAMiB,GAAuB,CAE1D,GADM,MAANrB,IAAAA,EAAWuE,GAAiBvE,SACvByT,GAA4B,CAAEzT,OAAAA,EAAQI,IAAAA,IAAQ,OACnD,MAAM,YAAEqN,GAAgBlS,EAClBqD,EAASuF,GAAQ/D,IACjB,KAAEE,EAAF,MAAQhD,GAAUmR,GAAc3N,IAAIlC,GAC1C,IAAI4E,EAAQlD,EAAOhD,EAEnB,MAAM4C,EAAU4E,EAAuB,CACrCN,KAAAA,GACAO,YAAAA,EACA/E,OAAAA,EACAqB,sBAAAA,GACAzC,OAAAA,EACA6F,WAAAA,KAGF,QAAgBnI,IAAZ4D,EAAuB,CACzB,MAAM,KAAEI,EAAF,MAAQhD,GAAUmR,GAAc3N,IAAIqD,GAAQvF,EAAOwB,IAAMF,EAAU,IACzEsD,EAAQlD,EAAOhD,EAGjB,MACMkb,EAAwBhV,EAAQiK,EAActB,GADvB7L,EAAO6L,GAAawC,GAG/CpT,EAAQ4Q,WAAa7L,EAAOqO,GACnB6J,IACTjd,EAAQ4Q,WAAa3I,EAAQiK,GAIjC,GAAsB,iBAAXzN,GAAuBsW,GAA6BtW,GAAS,CACtE,MAAMyY,EAAS/H,GAAU1Q,GACnByK,EAAYkG,GAAa3Q,GAC3ByY,EAASxM,GAEX1Q,EAAQ0Q,UAAYwM,EACXA,EAAShO,EAAYwB,GAAYyB,KAE1CnS,EAAQ0Q,UAAYwM,EAAShO,EAAYiD,MAgH/C,SAASgL,GAAsBC,GAC7B,QAA0Brc,IAAtBqQ,GAAiC,OACrC,MAAM,OAAE3M,GAAWuE,GAOnB,OAJEvE,EAAS2M,GACL3M,EAAS2Y,GAAiBA,GAAiBhM,GAC3C3M,EAAS2Y,GAAiBA,GAAiBhM,IAE1BpI,GAAiBnE,SAAM9D,EAchD,SAASsc,GAAc5Y,GACrB,GACEuE,GAAiBvE,SAAWA,GACF,SAA1BuE,GAAiB6F,OACjBgJ,IACU,MAAV3J,EAKF,OACE,SAACN,GAAD,CACE3E,KAAM+F,EACNpG,QAASA,GACTI,iBAAkBA,GAClBG,eAAgBA,GAChBsF,wBAAyBA,GACzBL,aAAcA,EACdF,OAAQA,EACRK,YAAaA,GACb9D,qBAAsBA,KAK5B,SAAS6S,GAAc7Y,GACrB,GAAIuE,GAAiBvE,SAAWA,GAAoC,WAA1BuE,GAAiB6F,KAAmB,OAE9E,MAAM,IAAEhK,EAAF,IAAO/B,GAAQkG,GACf3F,EAASuF,GAAQ/D,GACjBF,EAAUkB,EAAWxC,EAAQyC,GAAuB,CAAEtF,KAAM,MAAOsC,IAAAA,IAEnEsK,EAAc,KAClB4D,IAAoB,EAAGnM,IAAAA,EAAKJ,OAAAA,MAAR,CAAwBI,IAAAA,EAAKJ,OAAAA,EAAQoK,KAAM,cAiBjE,OALI5F,GAAKD,GAAiBvE,UAAYuE,GAAiB6T,aAErDzP,KAIA,SAACN,GAAD,CAEEzJ,OAAQA,EACRsB,QAASA,EACT7B,IAAKA,EACLQ,YApBgB,CAACR,EAAQya,KACvBA,GACF3E,GAAU5P,GAAiBvE,OAAQ3B,GACnCsK,KAEA4D,IAAqB+F,IAAD,IAAoBA,EAAUjU,IAAAA,OAgBlDsK,YAAaA,EACbL,aAAc,KACZA,GAAa/D,MAPV3F,EAAOxB,MAmIdmH,GAAiBnE,IAAMkT,IAAa/O,GAAiBvE,OAASuT,MAChEhH,GAAoBpC,IACpBnE,QAAqB1J,IAGvB,IAAIyc,GAAgB,GAAErO,OAQtB,OAPIlG,GAAKQ,OAAS,IAChB+T,IAAgBtI,IAEd1C,GAAmB,IACrBgL,IAAiB,WAAUhL,OAAqBnD,UAIhD,iBACExH,KAAMgQ,GAAY,WAAa,OAC/B,aAAYvH,EACZ,kBAAiBjQ,EACjB,mBAAkBkQ,EAClB,yBAAsBkC,SAAsB1R,EAC5C,gBAAe6H,GAAQa,OACvB,gBA9zBoB,EA8zBauL,GAAYxC,GAC7CvT,WAAWqB,EAAAA,EAAAA,GI/9Ba,cJq+BtBrB,EAH+BkS,II19BG,gCJ29BgB,OAArBG,InB5iC9B,WmBgjCDxJ,MACE,IACKA,EACHoN,iBAAkBsI,GAClB,0BAA4B,GAAErO,OAC9B,kBAAoB,GAAEgE,OACtB,2BAA6B,GAAE9D,OAC/B,oBAAsB,GACpBpL,EAAIgR,GAAgB9C,IACpBhD,GACAqD,GAAmBnD,UA1O7B,WACE,GAAyB,OAArBiC,GAA2B,OAAO2B,GACtC,MAAM,oBAAEqB,GAAwBrB,GAC1BwK,EAAWnJ,EAAoBoJ,MAAM,KAE3C,OADAD,EAASnM,GAAiBzM,KAAO,cAC1B,IACFoO,GACHqB,oBAAqBmJ,EAASE,KAAK,MAqO5BC,IAGP9d,IAAK6R,GACL5B,SAnhBJ,SAAsBrO,GACpB,MAAM,UAAEgP,EAAF,WAAaE,GAAelP,EAAM2G,cACxCsI,GAAaD,GACbG,GAAcD,GACN,MAARb,GAAAA,EAAWrO,IAghBTmC,UAAWsW,GACX,cAAa3J,GAlCf,UAqCGqH,KACC,gBACE/X,IAAK4R,GACLvR,UAAoC,IAA1B6I,GAAiBnE,MAA2C,IAA7BmE,GAAiBvE,OAAgB,GAAK,EAC/ExF,UIt/BH,WJu/BG6I,MAAO,CACLoC,aAAclB,GAAiBvE,OAAS,GAE1CZ,UAAWsW,MAGf,SAAC,EAAD,CACEvR,QAASyB,GACTnC,eAAgB2R,GAChBrX,gBAAiBA,GACjBC,yBAA0B8V,GAC1BtR,YAAaA,EACbK,oBAAqBA,EACrBxB,sBAAuBA,GACvB+C,gBAAiB6J,GAAsB1J,GAAiBnE,SAAM9D,EAC9DgH,WAAYiR,GACZjS,iBAAkBkR,KAEH,IAAhBhP,GAAKQ,QAAgB4G,EACpBA,GAEA,iCACE,SAAClP,EAAD,CAA4BoB,MAAO8V,GAAnC,SApMR,WACE,MAAMwF,EAAc,GACpB,IAAInI,EAAgB,EAEpB,MAAQ7Q,IAAKiZ,EAAarZ,OAAQsZ,GAAmB/U,GAK/CgV,EACJ7F,IAAsC4F,EAAiBhJ,GACnDA,GAAoB,EACpBA,GAEN,IAAK,IAAIkJ,EARP9F,IAAsC4F,EAAiBjJ,GACnDA,GAAsB,EACtBA,GAMiCmJ,GAAkBD,EAAWC,IAAkB,CACpF,MAAMC,EACJD,IAAmBnJ,GAAsB,GAAKmJ,IAAmBlJ,GAAoB,EACjFtQ,EAASyZ,EAAuBH,EAAiBE,EAEvD,IAAIE,EAAa9T,GACjB,MAAM+T,EAAiBxV,GAAQkV,QAGR/c,IAAnBqd,IACEF,EAEFC,EAAa,CAACC,GACLL,IAAmBtZ,GAAW4F,GAAgBqJ,SAAS0K,KAEhED,EACEL,EAAczT,GAAgBA,GAAgBZ,OAAS,GAAG5E,IACtD,IAAIwF,GAAiB+T,GACrB,IACK/T,GAAgBgU,MAAM,EAAGvY,GAAwB,GACpDsY,KACG/T,GAAgBgU,MAAMvY,GAAwB,MAK7D,MAAMhD,EAAMmG,GAAKxE,GACXyF,EA5tBc,EA4tBmBzF,EAAS,EAChD,GAAIyE,GAAWpG,GAAM,GAChB4S,cAAAA,GAAkB5S,GACrB,MAAMwb,EACJ7L,IAAgB3P,EAAIsI,UAAUyH,OAAO0L,GAAOhP,EAAajK,IAAI2J,EAAcsP,MAC7EV,EAAYhT,MACV,SAAC2T,GAAD,CACE,aAAY1b,EAAI4I,MAAQ,EACxB,eAAc5I,EAAI6T,QAClB,gBAAe7T,EAAI2T,SAAW,EAC9B,gBAtuBc,EAsuBmBf,EAAgB,EACjD,gBAAejD,GAAe6L,OAAqBvd,EAEnDmK,GAAIpI,EAAIoI,GACRC,SAAUrI,EAAIqI,SACdd,gBAAiB8T,EACjB/S,UAAWtI,EAAIsI,UACf3G,OAAQA,EACR3B,IAAKA,EACLoH,aAAcA,EACdnG,OAAQqR,GAAa3Q,GACrBiH,MAAO5I,EAAI4I,MACX9H,WAAYd,EAAIc,WAChBiF,gBAAiBkV,IAAmBtZ,EAASqZ,OAAc/c,EAC3D4B,cAAe2b,EACf3S,YAAaoN,GACbrV,YAAayV,IAdRrW,EAAIoI,KAiBb,SAIF,IAAIrJ,EADJ6T,IAEA,IAAI/S,GAAgB,EACoB,MAAZ,mBAAjBsM,GACTpN,EAAMoN,EAAanM,GACnBH,EAAa,eAAG4M,OAAH,EAAGA,EAAcjK,IAAIzD,KAArB,GAEbA,EAAMgW,GAAYnC,EAAgBjR,EAGpCoZ,EAAYhT,MACV,SAAC4F,GAAD,CACE,gBAxwBgB,GAwwBkBoH,GAAYnC,EAAgBjR,GAAU,EACxE,gBAAegO,GAAe9P,OAAgB5B,EAE9C0D,OAAQA,EACR3B,IAAKA,EACLuH,gBAAiB8T,EACjBxb,cAAeA,EACfmH,WAAYA,EACZC,iBAAkBA,EAClBS,SAAUA,EACVN,aAAcA,EACdnG,OAAQqR,GAAa3Q,GACrB0F,cACiB,OAAf8G,IAAuBA,GAAWnO,MAAQA,EACtC8F,GAAQ6V,WAAWC,GAAMA,EAAE7c,MAAQoP,GAAWxJ,iBAC9C1G,EAEN8H,gBAAiBkV,IAAmBtZ,EAASqZ,OAAc/c,EAC3DqJ,mBAAoB+S,GAAsB1Y,GAC1CgG,qBAAsB0G,GAAa1G,QAAuB1J,EAC1D+E,sBAAuBA,GACvBxC,YAAaqV,GACb5Q,WAAY8Q,GACZtO,uBAAwB8S,GAAc5Y,GACtC6F,mBAAoBgT,GAAc7Y,IAtB7B5C,IA2BX,OAAOgc,EAmFEc,KAFL,MAIGnV,OAJH,EAIGA,EAAagK,KAAI,CAAC1Q,EAAK2B,KACtB,MAAMma,EACJ5V,GAAiBvE,SA53BL,EA43BkCwE,GAAKQ,OAAShF,EAAS,EACjEyH,EACJiG,GAAe8C,GACXpD,GAAaxC,IAAoB7F,EAAYC,OAAShF,QACtD1D,EACAoL,OACIpL,IAARmL,EAAoBmD,IAAoB7F,EAAYC,OAAS,EAAIhF,QAAU1D,EAE7E,OACE,SAAC,GAAD,CACE,gBAt4BU,EAs4BuBiU,GAAYvQ,EAAS,EAEtDA,OAAQA,EACR3B,IAAKA,EACLoJ,IAAKA,EACLC,OAAQA,EACR9B,gBAAiBA,GACjBvE,sBAAuBA,GACvB+C,gBAAiB+V,EAAuB5V,GAAiBnE,SAAM9D,EAC/DgH,WAAYkR,IARPxU,YAkBrB,SAAS2U,GAAeyF,EAAcC,GACpC,OAAOD,EAAGha,MAAQia,EAAGja,KAAOga,EAAGpa,SAAWqa,EAAGra,OAG/C,UAAeuG,EAAAA,EAAAA,YAAW8D,IKvmC1BiQ,eAAeC,GAAsBC,GACnC,MAAM,qBAAEC,SAA+B,oCACjCC,EAAOC,SAASC,cAAc,OAOpC,OANAF,EAAKG,UAAYJ,GACfK,EAAAA,EAAAA,cAAaN,EAAa,CACxB9O,sBAAsB,KAInB,CACLqP,KAAMC,EAAQ,mBACdC,KAAMD,EAAQ,kCACdE,KAAMF,EAAQ,qBAGhB,SAASA,EAAQG,GACf,OAAOtJ,MAAMuJ,KAAKV,EAAKW,iBAAiCF,IAAWpM,KAAKuM,GAC/DzJ,MAAMuJ,KAAKE,EAAQD,iBAAiC,cAActM,KACtEwM,GAAaA,EAASC,eAM/B,SAASC,GAAmB3d,GAC1B,GAAqB,iBAAVA,EAAoB,CAC7B,MAAM4d,EAAiB5d,EAAM6d,QAAQ,KAAM,MAC3C,OAAOD,EAAezM,SAAS,KAAQ,IAAGyM,KAAoBA,EAEhE,OAAO5d,EC1ET,MAwBM8d,GAAgB,IAAIC,KAAJ,eAAwBC,UAA9C,UACMC,GAAoB,IAAIF,KAAJ,aAAsBC,UAAtB,SAA0C,CAClEzY,MADkE,WAElE2Y,SAAU,QAGZ,SAASC,IAAmB,UAAEC,IAC5B,OAAO,8BAAGN,GAAAA,OAAV,KAGF,SAASO,IAAkB,MAAEre,IAC3B,OAAO,8BAAGie,GAAAA,OAAV,KAuMF,SAASvR,GAAanM,GACpB,OAAOA,EAAP,GAGF,SAAS+d,KACP,MAAMC,EAAMC,KAAZ,MACM9X,EAAN,GAEA,IAAK,IAAI+E,EAAT,EAAgBA,EAAhB,IAA0BA,IACxB/E,EAAAA,KAAU,CACRiC,GADQ,EAER8V,MAAQ,SAAQhT,EAAI,IACpBiT,OAAQC,IAAAA,QAAAA,cACRC,KAAMD,IAAAA,KAAAA,UACNE,QAASF,IAAAA,QAAAA,UACTG,QAASH,IAAAA,SAAAA,eACTI,SAAUJ,IAAAA,KAAAA,WACVK,SARQ,IAQEld,KAAAA,SACVmd,eAAgBV,EAAMzc,KAAAA,MATd,KASyBA,KAAAA,UACjCod,aAAcX,EAAMzc,KAAAA,MAVZ,KAUuBA,KAAAA,UAC/Bqd,OAAQ,IAXA,MAWMrd,KAAAA,SACdsd,YAAaT,IAAAA,QAAAA,kBACbU,QAASV,IAAAA,QAAAA,OACTW,QAASX,IAAAA,OAAAA,SACTY,UAAWzd,KAAAA,SAAgB,KAI/B,SAIF,SAAS0d,GAAc5a,GACrB,UACE,eACA,YACA,aACA,WACA,cACA,cACA,kBACA,cACA,cACE,MAAO,CAAC6a,EAAGC,IACFD,EAAAA,GAAAA,cAA4BC,EAAnC,IAEJ,gBACE,MAAO,CAACD,EAAGC,IACFD,EAAAA,KAAkBC,EAAlBD,GAAAA,EAAsCA,EAAAA,GAAAA,GAA7C,EAEJ,SACA,eACA,qBACA,mBACA,aACE,MAAO,CAACA,EAAGC,IACFD,EAAAA,GAAgBC,EAAvB,GAEJ,QACE,MAAM,IAAIzgB,MAAO,4BAA2B2F,OAInC,SAAS+a,KACtB,MAAOjZ,EAAMkZ,IAAWxb,EAAAA,EAAAA,UAAxB,KACOM,EAAamb,IAAkBzb,EAAAA,EAAAA,UAAtC,KACO4I,EAAc8S,IAAmB1b,EAAAA,EAAAA,WAA8B,IAAM,IAA5E,MAEM2b,GAAY3P,EAAAA,EAAAA,UAAQ,IACjB,IAAI,IAAItG,IAAIpD,EAAAA,KAAUsZ,GAAMA,EAA5B,kBAA8C,IAAIjC,KAAJ,UADvB,UAAhC,IAIM1X,GAAU+J,EAAAA,EAAAA,UAAQ,IApP1B,SAAoB2P,GAClB,MAAO,CAAC,EAEN,CACEzgB,IADF,KAEEC,KAFF,KAGEC,MAHF,GAIEI,QAJF,EAKEF,WALF,EAME4J,iBAAgB,KACd,uCAGJ,CACEhK,IADF,QAEEC,KAFF,OAGEC,MAHF,IAIEI,QAJF,EAKEiH,OALF,EAMEyC,iBAAgB,EAAC,IAAE/I,MACV,gCAAGA,EAAV,WAAO,eAGX,CACEjB,IADF,SAEEC,KAFF,SAGEC,MAHF,IAIEqH,OAAQjG,GAEV,CACEtB,IADF,OAEEC,KAFF,OAGEC,MAHF,IAIEqH,OAAQjG,GAEV,CACEtB,IADF,UAEEC,KAFF,UAGEC,MAHF,IAIEqH,OAASoZ,IACP,mBACEC,WADF,EAEExjB,UAFF,EAGEsD,MAAOigB,EAAAA,IAHT,QAIE9hB,SAAWC,GAAM6hB,EAAA,YAAc,IAAKA,EAAL,IAAYpB,QAASzgB,EAAAA,OAAS4B,QAJ/D,YAMG+f,EAAAA,KAAelB,IACd,4BADF,GACE,OAIN3E,cAAe,CACbiG,aAAa,IAGjB,CACE7gB,IADF,UAEEC,KAFF,UAGEC,MAHF,IAIEqH,OAAQjG,GAEV,CACEtB,IADF,WAEEC,KAFF,WAGEC,MAHF,IAIEqH,OAAQjG,GAEV,CACEtB,IADF,WAEEC,KAFF,aAGEC,MAHF,IAIEW,UAAUL,GACR,MAAME,EAAQF,EAAAA,IAAd,SACA,OACE,iCACE,qBAAU4B,IAAV,IAAoB1B,MAApB,EAAkCuF,MAAO,CAAE/F,MAAO,MADpD,IAC8DsC,KAAAA,MAAD,GAD7D,QAKJ+E,OAAM,EAAC,4BAAoBhG,MAClBuf,EAAAA,EAAAA,eACL,gBACE1jB,UA3IZ,UA4IY4E,UAAYnC,IACV,WAAIA,EAAAA,KACF0B,KAJN,UAQE,oBAAQwf,MAAR,aACE,kBACEH,WADF,EAEEjiB,KAFF,QAGEwD,IAHF,IAIEC,IAJF,MAKE1B,MAAOO,EALT,SAMEpC,SAAWC,GAAM2C,EAAY,MAAUie,SAAU5gB,EAAAA,OAASkiB,mBAE5D,6BACE,mBAAQjiB,QAAS,IAAMwC,IAAvB,qBACA,mBAAQxC,QAAS,IAAMwC,GAAvB,6BAINgc,SAxBF,MA2BF3C,cAAe,CACbqG,iBAAiB,IAGrB,CACEjhB,IADF,iBAEEC,KAFF,aAGEC,MAHF,IAIEW,UAAUL,IACD,aAAoBse,UAAWte,EAAAA,IAAtC,kBAGJ,CACER,IADF,eAEEC,KAFF,WAGEC,MAHF,IAIEW,UAAUL,IACD,aAAoBse,UAAWte,EAAAA,IAAtC,gBAGJ,CACER,IADF,SAEEC,KAFF,SAGEC,MAHF,IAIEW,UAAUL,IACD,aAAmBE,MAAOF,EAAAA,IAAjC,UAGJ,CACER,IADF,cAEEC,KAAM,oBAER,CACED,IADF,UAEEC,KAFF,UAGEC,MAAO,KAET,CACEF,IADF,UAEEC,KAFF,UAGEsH,OAAQjG,GAEV,CACEtB,IADF,YAEEC,KAFF,YAGEC,MAHF,GAIEW,UAAS,EAAC,mCAAoBJ,MAE1B,YACEC,MAAOO,EADT,UAEEpC,SAAU,KACR4C,EAAY,MAAUwe,WAAYhf,EAAIgf,aAExClhB,QALF,EAME0B,eAPJ,IAWFuJ,iBAAgB,EAAG/I,KAAK,sBAAYigB,OAC3B,8BAAI,GAAE1e,KAAAA,MAAY,IAAD,EAAXA,aA8EW2e,CAAP,IAA8B,CAArD,IAEMxZ,GAAcmJ,EAAAA,EAAAA,UAAQ,IAMnB,CALwB,CAC7BzH,GAD6B,UAE7B6X,WAAY9Z,EAFiB,OAG7Bga,SAAUha,EAAAA,QAAasZ,GAAMA,EAAnBtZ,YAAgCQ,UAG3C,CAPH,IASMyZ,GAAavQ,EAAAA,EAAAA,UAAQ,KACzB,OAAI1L,EAAAA,OAA0B,OAAOgC,EAErC,MAAMia,EAAa,IAAnB,GAWA,OAVAA,EAAAA,MAAgB,CAAClB,EAAGC,KAClB,IAAK,MAAL,OAAgC,CAC9B,MACMkB,EADapB,GAAc7a,EAAjC,UACmBkc,CAAWpB,EAA9B,GACA,OAAImB,EACF,MAAOjc,QAAAA,EAAAA,UAAAA,GAAP,EAGJ,YAEF,IACC,CAAC+B,EAfJ,IAiBMgW,GACJ,aACEhQ,aADF,GAEErG,QAFF,EAGEK,KAHF,EAIEwG,qBAAsB,CACpBvN,UADoB,EAEpBD,WAAW,GAEbsN,aARF,EASEC,qBATF,EAUEpB,aAVF,EAWEnH,YAXF,EAYEK,oBAZF,EAaEkC,YAbF,EAcEvK,UAfJ,cAmBA,OACE,iCACE,iBAAKA,UAnWX,WAmWM,WACE,aAAcokB,SAAU,ID1WzBtE,eACLE,EACAqE,GAEA,MAAM,KAAE9D,EAAF,KAAQE,EAAR,KAAcC,SAAeX,GAAeC,GAC5CsE,EAAU,IAAI/D,KAASE,KAASC,GACnCnM,KAAK9K,GAAUA,EAAM8K,IAAI0M,IAAoBvC,KAAK,OAClDA,KAAK,OA4EV,SAAsB2F,EAAkBE,GACtC,MAAMC,EAAerE,SAASC,cAAc,KAC5CoE,EAAaC,SAAWJ,EACxB,MAAMK,EAAMC,IAAIC,gBAAgBL,GAChCC,EAAapkB,KAAOskB,EACpBF,EAAaK,QACbF,IAAIG,gBAAgBJ,GAhFpBK,CAAaV,EAAU,IAAIW,KAAK,CAACV,GAAU,CAAE/iB,KAAM,6BCiWf0jB,CAAYjF,EAA1C,kDAGA,aAAcoE,SAAU,IDjWzBtE,eACLE,EACAqE,GAEA,OAAO,MAAEa,EAAF,UAASC,IAAa,KAAE5E,EAAF,KAAQE,EAAR,KAAcC,UAAgB0E,QAAQC,IAAI,CACrE,2DACAtF,GAAeC,KAEXsF,EAAKJ,EAAMK,WACXC,EAAKN,EAAMO,aAAa,IAAIlF,KAASE,KAASC,IACpDwE,EAAMQ,kBAAkBJ,EAAIE,EAAI,WAChCL,EAAUG,ECsVJ,uBAA8BK,CAAa3F,GAA3C,6BAGA,aAAcoE,SAAU,IDtVzBtE,eACLE,EACAqE,GAEA,OAAO,MAAEuB,GAASC,GAAW,KAAEtF,EAAF,KAAQE,EAAR,KAAcC,UAAgB0E,QAAQC,IAAI,CACrE,sCACO,6DAA2BS,cAC5B/F,GAAeC,KAEjB+F,EAAM,IAAIH,EAAM,CACpBI,YAAa,IACbC,KAAM,OAGRJ,EAAUE,EAAK,CACbxF,KAAAA,EACAE,KAAAA,EACAC,KAAAA,EACAwF,qBAAqB,EACrBC,OAAQ,CAAEC,YAAa,IAAKC,SAAU,EAAGC,UAAW,QACpDC,WAAY,SAEdR,EAAIS,KCgUE,sBAA8BC,CAAYzG,GAA1C,8BAIF,KAKN,SAAS0G,IAAa,oBAEpBC,IAKA,MAAOC,EAAWC,IAAgBnf,EAAAA,EAAAA,WAAlC,GACA,OACE,mBACEpG,SADF,EAEEK,QAASme,UACP+G,GAAAA,SACMzC,IACNyC,GAAAA,IALJ,SAQGD,EAAY,YAAb,I,SC3YN,MAAME,GAAS,CAAC,MAAO,MAAO,OAAQ,OAAQ,OCkBvC,SAASC,IAAe,MAAEzjB,IAC/B,OACE,gBAAKtD,UAtBT,UAsBI,UACE,gBAAKA,UAlBX,WAkB0C6I,MAAO,CAAEme,gBAAkB,OAAM1jB,UCW3E,SAAS,GAAT,GACE,OAAOO,EAAP,G,SAGFoe,IAAAA,OAAAA,QAEA,MAAMtY,GAAkC,CAAC,EAEvC,CACE/G,IADF,KAEEC,KAFF,KAGEC,MAHF,GAIEE,WAJF,EAKEE,QAAQ,GAEV,CACEN,IADF,SAEEC,KAFF,SAGEC,MAHF,GAIEE,WAJF,EAKEG,eAAgB,KAAM,aAAgBG,MAAO2e,IAAAA,MAAAA,SAC7Cxe,UAAW,EAAGI,IAAAA,MAAU,aAAgBP,MAAOO,EAAvB,UAE1B,CACEjB,IADF,QAEEC,KAFF,QAGEC,MAHF,IAIEE,WAJF,EAKES,UAAUL,IACD,8BAAGA,EAAAA,IAAV,QAEF+G,OF7DW,UAAwB,IAAEtG,EAAF,YAAOQ,IAC5C,OACE,mBACErE,UAAW+D,EACXT,MAAOO,EAAIke,MACXtgB,SAAWgB,GAAU4B,EAAY,IAAKR,EAAKke,MAAOtf,EAAMpC,OAAOiD,QAAS,GACxEkgB,WAAS,EAJX,SAMGsD,GAAOvS,KAAKwN,IACX,mBAAoBze,MAAOye,EAA3B,SACGA,GADUA,QEqDjBvE,cAAe,CACbiG,aAAa,IAGjB,CACE7gB,IADF,YAEEC,KAFF,aAGEC,MAHF,IAIEE,WAJF,EAKEE,QALF,EAMEiH,OAAQjG,GAEV,CACEtB,IADF,WAEEC,KAFF,YAGEC,MAHF,IAIEE,WAJF,EAKEE,QALF,EAMEiH,OAAQjG,GAEV,CACEtB,IADF,QAEEC,KAFF,QAGEC,MAHF,IAIEE,WAJF,EAKEmH,OAAQjG,GAEV,CACEtB,IADF,SAEEC,KAFF,SAGEC,MAHF,IAIEE,WAJF,EAKEmH,OAAQjG,GAEV,CACEtB,IADF,UAEEC,KAFF,UAGEC,MAHF,IAIEE,WAJF,EAKEmH,OAAQjG,GAEV,CACEtB,IADF,OAEEC,KAFF,OAGEC,MAHF,IAIEE,WAJF,EAKEmH,OAAQjG,GAEV,CACEtB,IADF,KAEEC,KAFF,KAGEC,MAHF,IAIEE,WAJF,EAKEmH,OAAQjG,GAEV,CACEtB,IADF,cAEEC,KAFF,eAGEC,MAHF,IAIEE,WAJF,EAKEmH,OAAQjG,GAEV,CACEtB,IADF,cAEEC,KAFF,eAGEC,MAHF,IAIEE,WAJF,EAKEmH,OAAQjG,GAEV,CACEtB,IADF,WAEEC,KAFF,WAGEC,MAHF,IAIEE,WAJF,EAKEmH,OAAQjG,IAIZ,SAAS,KACP,MAAM8F,EAAN,GAEA,IAAK,IAAI+E,EAAT,EAAgBA,EAAhB,IAA0BA,IACxB/E,EAAAA,KAAU,CACRiC,GAAK,MAAK8C,IACVkY,OAAQhF,IAAAA,MAAAA,SACRiF,MAAOjF,IAAAA,SAAAA,QACPF,MAAOE,IAAAA,KAAAA,SACPkF,UAAWlF,IAAAA,KAAAA,YACXmF,SAAUnF,IAAAA,KAAAA,WACVoF,OAAQpF,IAAAA,QAAAA,aACRqF,QAASrF,IAAAA,QAAAA,UACTsF,KAAMtF,IAAAA,KAAAA,OATE,qBAURuF,GAAIvF,IAAAA,QAAAA,KACJwF,YAAaxF,IAAAA,QAAAA,cACbyF,YAAazF,IAAAA,QAAAA,cACb0F,MAAO1F,IAAAA,MAAAA,QACP2F,SAAU3F,IAAAA,MAAAA,aAId,SAGa,SAAS4F,KACtB,MAAO7d,EAAMkZ,IAAWxb,EAAAA,EAAAA,UAAxB,KACO4I,EAAc8S,IAAmB1b,EAAAA,EAAAA,WAA8B,IAAM,IAA5E,MA0BA,OACE,aACEiC,QADF,GAEEK,KAFF,EAGEgG,aAHF,GAIEb,aAJF,EAKEF,OA9BJ,UAAoB,kCAAwBC,IAC1C,MAAO,MAAgB,IAAaN,EAAUpG,KA8B5CuI,QA3BJ,UAAqB,0DAInB7B,IAEA,MAAM4Y,EAAsB,CAAC,QAAS,UAAtC,QACA,MACEnM,WAAAA,GACA,CAAC,KAAM,UAAUlH,SADjBkH,KAEEmM,EAAAA,SAAAA,IACAA,EAAAA,SADD,KAECnM,IALJ,EAOE,EAGK,MAAgB,IAAmB/M,EAAU+M,KAWlD1L,UAPF,GAQEK,aARF,EASEC,qBATF,EAUEvQ,UAVF,YAWEuL,SAAW1H,GAASA,EAAAA,GAAAA,SAAAA,KA3M1B,eA+LE,I,SCxLF,MAAM8F,GAAyB,CAC7B,CACE/G,IAAK,KACLC,KAAM,KACNC,MAAO,IAET,CACEF,IAAK,OACLC,KAAM,SAER,CACED,IAAK,WACLC,KAAM,YAER,CACED,IAAK,YACLC,KAAM,cAER,CACED,IAAK,WACLC,KAAM,cAER,CACED,IAAK,YACLC,KAAM,cAER,CACED,IAAK,eACLC,KAAM,oBACNC,MAAO,MAIX,SAASilB,GAAc/P,EAAaC,GAClC,OAAO,IAAI6J,KACT9J,EAAMgQ,UAAY5iB,KAAK6iB,UAAYhQ,EAAI+P,UAAYhQ,EAAMgQ,YACzDE,qBAGJ,SAAStG,KACP,MAAM5X,EAAO,GACb,IAAK,IAAI+E,EAAI,EAAGA,EAAI,IAAKA,IACvB/E,EAAK4B,KAAK,CACRK,GAAI8C,EACJoZ,KAAO,QAAOpZ,IACdqZ,SAAUhjB,KAAKL,IAAI,IAAKK,KAAKH,MAAsB,IAAhBG,KAAK6iB,WACxC9f,SAAU,CAAC,WAAY,OAAQ,SAAU,OAAO/C,KAAKF,MAAsB,EAAhBE,KAAK6iB,SAAe,IAC/EI,UAAW,CAAC,MAAO,cAAe,OAAQ,SAASjjB,KAAKF,MAAsB,EAAhBE,KAAK6iB,SAAe,IAClFK,UAAWP,GAAc,IAAIjG,KAAK,KAAM,EAAG,GAAI,IAAIA,MACnDyG,aAAcR,GAAc,IAAIjG,KAAQ,IAAIA,KAAK,KAAM,EAAG,MAI9D,OAAO9X,EAGM,SAASwe,KACtB,MAAOxe,IAAQtC,EAAAA,EAAAA,UAASka,KACjB5Q,EAAoByX,IAAyB/gB,EAAAA,EAAAA,UAA6B,cAEjF,OACE,iCACE,iBAAKmB,MAAO,CAAE6f,aAAc,GAA5B,oCAEE,8BACE,kBACEnnB,KAAK,QACLsB,KAAK,OACLrB,QAAgC,SAAvBwP,EACTvP,SAAU,IAAMgnB,EAAsB,UAL1C,WASA,8BACE,kBACElnB,KAAK,QACLsB,KAAK,OACLrB,QAAgC,eAAvBwP,EACTvP,SAAU,IAAMgnB,EAAsB,gBAL1C,iBASA,8BACE,kBACElnB,KAAK,QACLsB,KAAK,OACLrB,QAAgC,kBAAvBwP,EACTvP,SAAU,IAAMgnB,EAAsB,mBAL1C,uBAUF,SAAC,GAAD,CAAU9e,QAASA,GAASK,KAAMA,EAAMgH,mBAAoBA,OCpGlE,MAAMhH,GAAuB,IAAIqN,MAAAA,KAAjC,QAQA,SAASsR,GAAcvlB,GACrB,OACE,gCACGA,EAAAA,OAAD,IADF,IAC4BA,EAAD,OAKhB,SAASwlB,KACtB,MAAMjf,GAAU+J,EAAAA,EAAAA,UAAQ,KACtB,MAAM/J,EAAN,GAEA,IAAK,IAAIoF,EAAT,EAAgBA,EAAhB,GAAwBA,IAAK,CAC3B,MAAMnM,EAAMimB,OAAZ,GACAlf,EAAAA,KAAa,OAEX9G,KAFW,EAGXK,OAAQ6L,EAHG,EAIX/L,WAJW,EAKXS,UALW,GAMXiC,QAAQoB,GACN,WAAIA,EAAAA,KAAqB,CACvB,GAAIlE,MAAAA,GAAJ,IAAmBkE,EAAAA,IAAgB,OAAO,EAC1C,GAAIlE,MAAAA,GAAJ,IAAmBkE,EAAAA,IAAgB,OAFZ,EAGvB,GAAIlE,MAAAA,GAAJ,IAAmBkE,EAAAA,IAAgB,OAAO,EAC1C,GAAIlE,OAAAA,GAAJ,IAAoBkE,EAAAA,IAAgB,OAAO,EAC3C,GAAIlE,MAAAA,GAAekE,EAAAA,IAAnB,EAAiC,OAAO,EAE1C,GAAIA,WAAAA,EAAAA,MAAJ,MAA8BlE,EAC5B,UAIJ8H,UAAU7G,GACR,GACGjB,MAAAA,GAAD,IAAgBiB,GACfjB,MAAAA,GADD,IACgBiB,GACfjB,OAAAA,GAFD,IAEiBiB,GAChBjB,MAAAA,GAAeiB,EAJlB,EAME,MA9CZ,cAqDI,WAtCF,IAyCA,OAAO,aAAU8F,QAAV,EAA4BK,KAA5B,GAAwCiG,UAAxC,GAAuDjQ,UAA9D,c,4DCxDK,SAAS8oB,IAA2B,iBACzCC,EADyC,OAEzC3kB,EAFyC,cAGzCkD,EAHyC,OAIzCD,EAJyC,SAKzCc,EALyC,eAMzC9E,IAEA,OAAO,WAAE6O,GAAc8W,IAAQC,EAAAA,GAAAA,GAAQ,CACrC1nB,KAAM,cACN2nB,KAAM,CAAEtmB,IAAKwB,EAAOxB,KACpBumB,QAAUC,IAAD,CACPlX,WAAYkX,EAAQlX,mBAIjB,OAAEmX,GAAUC,IAAQC,EAAAA,GAAAA,GAAQ,CACjCC,OAAQ,cACRF,MAAK,IAAE1mB,IACLmmB,EAAiBnmB,EAAKwB,EAAOxB,MAE/BumB,QAAUC,IAAD,CACPC,OAAQD,EAAQC,SAChBI,QAASL,EAAQK,cAIrB,OACE,gBACE5oB,IAAMA,IACJmoB,EAAKnoB,GACLyoB,EAAKzoB,IAEPgI,MAAO,CACL6gB,QAASxX,EAAa,GAAM,EAC5ByX,gBAAiBN,EAAS,eAAYvnB,EACtCyK,OAAQ,QARZ,UAWE,SAACnF,EAAD,CACEE,cAAeA,EACfD,OAAQA,EACRc,SAAUA,EACV9E,eAAgBA,EAJlB,SAMGe,EAAOvB,SCtChB,SAAS+e,KACP,MAAM5X,EAAO,GACb,IAAK,IAAI+E,EAAI,EAAGA,EAAI,IAAKA,IACvB/E,EAAK4B,KAAK,CACRK,GAAI8C,EACJoZ,KAAO,QAAOpZ,IACdqZ,SAAUhjB,KAAKL,IAAI,IAAKK,KAAKH,MAAsB,IAAhBG,KAAK6iB,WACxC9f,SAAU,CAAC,WAAY,OAAQ,SAAU,OAAO/C,KAAKH,MAAsB,EAAhBG,KAAK6iB,WAChEI,UAAW,CAAC,MAAO,cAAe,OAAQ,SAASjjB,KAAKH,MAAsB,EAAhBG,KAAK6iB,aAIvE,OAAOje,EAGT,SAAS4f,KACP,MAAO,CACL,CACEhnB,IAAK,KACLC,KAAM,KACNC,MAAO,IAET,CACEF,IAAK,OACLC,KAAM,QACNG,WAAW,EACXC,UAAU,GAEZ,CACEL,IAAK,WACLC,KAAM,WACNG,WAAW,EACXC,UAAU,GAEZ,CACEL,IAAK,YACLC,KAAM,aACNG,WAAW,EACXC,UAAU,GAEZ,CACEL,IAAK,WACLC,KAAM,aACNG,WAAW,EACXC,UAAU,IAKD,SAAS4mB,KACtB,MAAO7f,IAAQtC,EAAAA,EAAAA,UAASka,KACjBjY,EAASmgB,IAAcpiB,EAAAA,EAAAA,UAASkiB,KAChC5hB,EAAamb,IAAkBzb,EAAAA,EAAAA,UAAgC,IAChEW,GAAsBlB,EAAAA,EAAAA,cAAaa,IACvCmb,EAAenb,EAAYoX,OAAO,MACjC,IAEG2K,GAAmBrW,EAAAA,EAAAA,UAAQ,KAC/B,SAASsW,EAAe5mB,GACtB,OAAO,SAAC0lB,GAAD,IAA6B1lB,EAAO2lB,iBAAkBkB,IAG/D,SAASA,EAAqBC,EAAmBC,GAC/C,MAAMC,EAAoBzgB,EAAQ6V,WAAWC,GAAMA,EAAE7c,MAAQsnB,IACvDG,EAAoB1gB,EAAQ6V,WAAWC,GAAMA,EAAE7c,MAAQunB,IACvDG,EAAmB,IAAI3gB,GAE7B2gB,EAAiBC,OACfF,EACA,EACAC,EAAiBC,OAAOH,EAAmB,GAAG,IAGhDN,EAAWQ,GAGb,OAAO3gB,EAAQ4K,KAAKkL,GACJ,OAAVA,EAAE7c,IAAqB6c,EACpB,IAAKA,EAAGtc,eAAgB6mB,OAEhC,CAACrgB,IAEEsa,GAAavQ,EAAAA,EAAAA,UAAQ,KACzB,GAA2B,IAAvB1L,EAAYwC,OAAc,OAAOR,EACrC,MAAM,UAAExB,EAAF,UAAaC,GAAcT,EAAY,GAE7C,IAAIic,EAAoB,IAAIja,GAE5B,OAAQxB,GACN,IAAK,OACL,IAAK,WACL,IAAK,YACHyb,EAAaA,EAAWhc,MAAK,CAAC8a,EAAGC,IAAMD,EAAEva,GAAWgiB,cAAcxH,EAAExa,MACpE,MACF,IAAK,WACHyb,EAAaA,EAAWhc,MAAK,CAAC8a,EAAGC,IAAMD,EAAEva,GAAawa,EAAExa,KAI5D,MAAqB,SAAdC,EAAuBwb,EAAWwG,UAAYxG,IACpD,CAACja,EAAMhC,IAEV,OACE,SAAC0iB,GAAA,EAAD,CAAaC,QAASC,GAAAA,GAAtB,UACE,SAAC,GAAD,CACEjhB,QAASogB,EACT/f,KAAMia,EACNjc,YAAaA,EACbK,oBAAqBA,M,gBCxB7B,SAAS,KACP,MAAM2B,EAAN,GACA,IAAK,IAAI+E,EAAT,EAAgBA,EAAhB,IAA0BA,IACxB/E,EAAAA,KAAU,CACRiC,GADQ,EAER4e,QAAS5I,IAAAA,SAAAA,cACT6I,MAAO7I,IAAAA,SAAAA,UAGX,SAGF,MAAMtY,GAAkC,CACtC,CAAE/G,IAAF,KAAaC,KAAM,MACnB,CAAED,IAAF,UAAkBC,KAAM,WACxB,CAAED,IAAF,QAAgBC,KAAM,UAGxB,SAAS,GAAT,GACE,OAAOgB,EAAP,GAGF,SAAS2N,GAAYpO,GACnB,OACE,gBAAoB6I,GAApB,oBAA2Ckd,QAAS,KAAM,CAAG3jB,OAAQpC,EAAMoC,SAA3E,UACE,sBAKS,SAASulB,KACtB,MAAO/gB,EAAMkZ,IAAWxb,EAAAA,EAAAA,UAAxB,KACOsjB,EAAQC,IAAaC,EAAAA,EAAAA,aAAW,GAAgBjf,EAAjB,GAAyBjC,EAAKA,EAAAA,OAALA,GAAAA,GAA/D,GAcA,cACE,MAAM2B,EAAc,CAClBM,GADkB,EAElB4e,QAAS5I,IAAAA,SAAAA,cACT6I,MAAO7I,IAAAA,SAAAA,SAGTiB,EAAQ,IAAIlZ,EAAAA,MAAAA,EAAJ,QAA4CA,EAAAA,MAApDkZ,KACA+H,IAGF,OACE,iCACE,aACEjb,aADF,GAEErG,QAFF,GAGEK,KAHF,EAIEmH,YAJF,GAKEnR,UALF,eAOC0jB,EAAAA,EAAAA,eACC,iBAAazX,GAAb,+BACE,gBAAUtK,QAlClB,YAA0D,OAAE6D,IAC1D0d,EAAQ,IAAIlZ,EAAAA,MAAAA,EAAJ,MAA8BA,EAAAA,MAAWxE,EAAjD0d,MAiCM,yBACA,iBAASnB,MAAT,wBACE,gBAAUpgB,QAhCpB,YAA+D,OAAE6D,IAC/D2lB,EAAAA,IA+BQ,oBACA,gBAAUxpB,QA7BpB,YAA+D,OAAE6D,IAC/D2lB,EAAU3lB,EAAV2lB,IA4BQ,yBAGJhL,SARF,S,yBC9JN,MA4BMiL,GAAS,CAAC,WAAD,sWAAf,iBA+BMzhB,GAAkC,CAAC,EAEvC,CACE/G,IADF,UAEEC,KAAM,WAER,CACED,IADF,OAEEC,KAAM,QAER,CACED,IADF,QAEEC,KAAM,SAER,CACED,IADF,UAEEC,KAAM,WAER,CACED,IADF,OAEEC,KAFF,OAGEiB,eAAc,EAAC,UAAEqI,MACR,8BAAGA,EAAAA,QAAiB,CAACkf,GAAQC,KAAAA,KAAWD,EAArClf,GAAV,MAGJ,CACEvJ,IADF,SAEEC,KAFF,SAGEiB,eAAc,EAAC,UAAEqI,MACR,8BAAGA,EAAAA,QAAiB,CAACkf,GAAQE,OAAAA,KAAaF,EAAvClf,GAAV,MAGJ,CACEvJ,IADF,SAEEC,KAFF,SAGEiB,eAAc,EAAC,UAAEqI,MACR,8BAAGA,EAAAA,QAAiB,CAACkf,GAAQE,OAAAA,KAAaF,EAAvClf,GAAV,MAGJ,CACEvJ,IADF,QAEEC,KAFF,QAGEY,UAAS,EAAC,IAAEI,MACH,8BAAGA,EAAAA,KAAWA,EAAXA,OAAwBA,EAAlC,SAEFC,eAAc,EAAC,UAAEqI,MACR,8BAAGA,EAAAA,QAAiB,CAACkf,EAAMxnB,IAAQwnB,EAAOxnB,EAAPwnB,KAAkBxnB,EAAlBwnB,OAA+BxnB,EAA/DsI,QAAV,OAKN,SAAS,GAAT,GACE,OAAOtI,EAAP,GAGF,SAAS,KACP,MAAMmG,EAAN,GACA,IAAK,IAAI+E,EAAT,EAAgBA,EAAhB,IAA2BA,IACzB/E,EAAAA,KAAU,CACRiC,GADQ,EAERuf,KAAM,KAAOvJ,IAAAA,SAAAA,OAFL,GAGRE,QAASF,IAAAA,QAAAA,UACTwJ,MAAOL,GAAOnJ,IAAAA,SAAAA,OAAsBmJ,GAAAA,OAJ5B,IAKRM,QAASzJ,IAAAA,KAAAA,WACTqJ,KAAMrJ,IAAAA,SAAAA,OANE,GAORsJ,OAAQtJ,IAAAA,SAAAA,OAPA,GAQR0J,OAAQ1J,IAAAA,SAAAA,OAAAA,KAIZ,OAAOjY,EAAAA,MAAU,CAAC4hB,EAAIC,IAAOA,EAAAA,QAAAA,cAAyBD,EAAtD,WAGF,MAAME,GAAU,CAAC,UAAW,OAAQ,QAApC,WAEe,SAASC,KACtB,MAAO/hB,IAAQtC,EAAAA,EAAAA,UAAf,KACO4I,EAAc8S,IAAmB1b,EAAAA,EAAAA,WAA8B,IAAM,IAA5E,OACOskB,EAAiBC,IAAsBvkB,EAAAA,EAAAA,UAA4B,CACxEokB,GADwE,GAExEA,GAFF,MAIOlb,EAAkBsb,IAAuBxkB,EAAAA,EAAAA,WAC9C,IAAM,IAAI0F,IAAa,CAAC,2BAD1B,qCAoBA,OACE,iBAAKpN,UAlKT,WAkKI,WACE,8CACA,gBAAKA,UAzJX,WAyJM,SACG8rB,GAAAA,KAAaK,IACZ,8BACE,kBACE5qB,KADF,WAEEC,QAASwqB,EAAAA,SAFX,GAGEvqB,SAAWgB,GAzBvB,cACE,MAAMiH,EAAQsiB,EAAAA,QAAd,GACA,GACE,IAAItiB,GACFuiB,GAAoBH,GAAY,MAAhCG,MAEG,IAAIviB,GACTuiB,GAAoBH,IAClB,MAAMM,EAAa,IAAnB,GAEA,OADAA,EAAAA,OAAAA,EAAAA,GACA,KAGJF,EAAoB,IAApBA,KAY+BG,CAAaF,EAAQ1pB,EAAAA,OAH5C,WAIE,IACF,IANF,QAWJ,aACEkH,QADF,GAEEK,KAFF,EAGEgG,aAHF,GAIEM,aAJF,EAKEC,qBALF,EAMEE,QANF,EAOEE,WAPF,KAQEC,iBARF,EASEC,yBATF,EAUEL,qBAAsB,CAAExN,WAAW,Q,SC1L3C,MAeMspB,GAAN,cAiBMC,GAAN,UAsBMC,IAAgB3qB,EAAAA,EAAAA,oBAAtB,GAEA,SAAS4qB,GAAqBhqB,GACxB,CAAC,YAAa,cAAcgS,SAAShS,EAAzC,MACEA,EAAAA,kBAIJ,SAASiqB,GAAsBjqB,GACzB,CAAC,YAAa,aAAc,UAAW,aAAagS,SAAShS,EAAjE,MACEA,EAAAA,kBAIW,SAASkqB,KACtB,MAAO3iB,IAAQtC,EAAAA,EAAAA,UAAf,KACOklB,EAASC,IAAcnlB,EAAAA,EAAAA,UAAiB,CAC7CygB,KAD6C,GAE7ChgB,SAF6C,WAG7CkgB,UAH6C,MAI7CyE,UAJ6C,GAK7C1E,cAL6C,EAM7C2E,SAAS,IAGLC,GAAmBtZ,EAAAA,EAAAA,UACvB,IACE2D,MAAA,KAAW,IAAIjK,IAAIpD,EAAAA,KAAUsZ,GAAMA,EAAnC,mBAAuD5e,IAAD,CACpDuoB,MAD4D,EAE5D3pB,MAAOoB,OAEX,CANF,IASMiF,GAAU+J,EAAAA,EAAAA,UAAQ,IACf,CACL,CACE9Q,IADF,KAEEC,KAFF,KAGEC,MAAO,IAET,CACEF,IADF,OAEEC,KAFF,QAGEqqB,gBAHF,GAIE/pB,eAAiBogB,IACf,2BACG,EAAC,aAAc4J,MACd,uBAEEntB,UAFF,GAGEsD,MAAOspB,EAHT,KAIEnrB,SAAWC,GACTmrB,EAAW,MAET1E,KAAMzmB,EAAAA,OAAS4B,QAGnBsB,UAXJ,QAiBN,CACEhC,IADF,WAEEC,KAFF,WAGEqqB,gBAHF,GAIE/pB,eAAiBogB,IACf,2BACG,EAAC,aAAc4J,MACd,yBAEEntB,UAFF,GAGEsD,MAAOspB,EAHT,SAIEnrB,SAAWC,GACTmrB,EAAW,MAET1kB,SAAUzG,EAAAA,OAAS4B,QAGvBsB,UAVF,cAYE,mBAAQtB,MAAR,wBACA,mBAAQA,MAAR,kCACA,mBAAQA,MAAR,0BACA,mBAAQA,MAAR,8BACA,mBAAQA,MAAR,6BAMV,CACEV,IADF,YAEEC,KAFF,aAGEqqB,gBAHF,GAIE/pB,eAAiBogB,IACf,2BACG,EAAC,aAAc4J,MACd,yBAEEntB,UAFF,GAGEsD,MAAOspB,EAHT,UAIEnrB,SAAWC,GACTmrB,EAAW,MAETxE,UAAW3mB,EAAAA,OAAS4B,QAGxBsB,UAVF,cAYE,mBAAQtB,MAAR,wBACA,mBAAQA,MAAR,wBACA,mBAAQA,MAAR,wCACA,mBAAQA,MAAR,0BACA,mBAAQA,MAAR,iCAMV,CACEV,IADF,YAEEC,KAFF,YAGEqqB,gBAHF,GAIE/pB,eAAiBogB,IACf,2BACG,EAAC,aAAc4J,MACd,uBAEEntB,UAFF,GAGEsD,MAAOspB,EAHT,UAIEnrB,SAAWC,GACTmrB,EAAW,MAETC,UAAWprB,EAAAA,OAAS4B,QAGxBsB,UAVF,GAWEwoB,KAZJ,kBAkBN,CACExqB,IADF,WAEEC,KAFF,aAGEqqB,gBAHF,GAIE/pB,eAAiBogB,IACf,2BACG,EAAC,aAAc4J,MACd,uBAEE5rB,KAFF,SAGEvB,UAHF,GAIEsD,MAAOspB,EAJT,SAKEnrB,SAAWC,GACTmrB,EAAW,MAETzE,SAAUrhB,OAAAA,SAAgBrF,EAAAA,OAAhBqF,eACNrF,EAAAA,OADMqF,mBAENjF,IAGR8C,UAdJ,UAtHV,IA6IMyoB,GAAe3Z,EAAAA,EAAAA,UAAQ,IACpB1J,EAAA,QAAasZ,KAEfsJ,EAAAA,MAAetJ,EAAAA,KAAAA,SAAgBsJ,EAA/BA,SACAA,QAAAA,EAAAA,UAA6BtJ,EAAAA,WAAesJ,EAA5CA,YACAA,QAAAA,EAAAA,WAA8BtJ,EAAAA,YAAgBsJ,EAA9CA,cACAA,EAAAA,WACGtJ,EAAAA,UAAAA,cAAAA,WAAqCsJ,EAAAA,UADxCA,uBAGAA,IAAAA,EAAAA,UAAiCtJ,EAAAA,UAAcsJ,EAA/CA,aAGJ,CAAC5iB,EAZJ,IAgCA,OACE,iBAAKhK,UAtQT,WAsQI,WACE,iBAAKA,UA5PX,WA4PM,WACE,mBAAQuB,KAAR,SAAsBI,QAV5B,WACEkrB,GAAYD,IAAD,IAAc,EAEvBG,SAAUH,EAAQG,aAOhB,4BAES,KACT,mBAAQxrB,KAAR,SAAsBI,QAxB5B,WACEkrB,EAAW,CACT1E,KADS,GAEThgB,SAFS,MAGTkgB,UAHS,MAITyE,UAJS,GAKT1E,cALS,EAMT2E,SAAS,KAiBP,+BAIF,SAACP,GAAD,UAAwBlpB,MAAxB,YACE,aACEtD,UAAW4sB,EAAAA,QAhQrB,eA+PQ,EAEEjjB,QAFF,EAGEK,KAHF,EAIEkG,gBAAiB0c,EAAAA,QAAAA,QAJnB,OAOF,qBAAU3gB,GAAV,sBACG+gB,EAAAA,KAAqB,EAAC,QAAS1pB,MAAAA,MAC9B,mBAAoBA,MAApB,WACE,GADF,UASV,SAASgqB,IAAkD,mCAGzD3G,IAQA,MAAMiG,GAAUvqB,EAAAA,EAAAA,YAAhB,KACM,eAAOnB,GAAaP,EAA1B,GAEA,OACE,iCACE,yBAAMyD,EAAD,OACJwoB,EAAAA,UAAmB,yBAAMjG,EAAS,kBAAiBiG,QAAAA,SAK1D,SAAS,KACP,MAAM5iB,EAAN,GACA,IAAK,IAAI+E,EAAT,EAAgBA,EAAhB,IAAyBA,IACvB/E,EAAAA,KAAU,CACRiC,GADQ,EAERkc,KAAO,QAAOpZ,IACdqZ,SAAUhjB,KAAAA,IAAAA,IAAcA,KAAAA,MAHhB,IAG2BA,KAAAA,WACnC+C,SAAU,CAAC,WAAY,OAAQ,SAAU,OAAO/C,KAAAA,MAJxC,EAImDA,KAAAA,WAC3DijB,UAAW,CAAC,MAAO,cAAe,OAAQ,SAASjjB,KAAAA,MAL3C,EAKsDA,KAAAA,WAC9D0nB,UAAW7K,IAAAA,KAAAA,aAGf,SCpTF,SAAS,GAAT,GACE,OAAOpe,EAAP,G,SAGF,MAAM8F,GAAkC,CACtC,CACE/G,IADF,KAEEC,KAAM,MAER,CACED,IADF,QAEEC,KAAM,SAER,CACED,IADF,YAEEC,KAAM,cAER,CACED,IADF,WAEEC,KAAM,aAER,CACED,IADF,QAEEC,KAAM,UAIV,SAAS0qB,GAAwB7jB,GAC/B,MAAO,CACLuC,GAAK,MAAKvC,IACVwd,MAAOjF,IAAAA,SAAAA,QACPF,MAAOE,IAAAA,KAAAA,SACPkF,UAAWlF,IAAAA,KAAAA,YACXmF,SAAUnF,IAAAA,KAAAA,YA8BC,SAASuL,KACtB,MAAOxjB,EAAMkZ,IAAWxb,EAAAA,EAAAA,WAAS,IA3BnC,YACE,MAAMsC,EAAN,GAEA,IAAK,IAAI+E,EAAT,EAAgBA,EAwBhB,GAxBkCA,IAChC/E,EAAAA,GAAUujB,GAAVvjB,GAGF,SAoBuC4X,MAChC6L,EAAWC,IAAgBhmB,EAAAA,EAAAA,WAAlC,GAaA,OACE,iCACE,aACEiC,QADF,GAEEK,KAFF,EAGEgG,aAHF,GAIEb,aAJF,EAKEc,UALF,GAMEa,SAnBNgP,eAAA,GACE,GAAI2N,IArBR,UAAoB,cAAErkB,IACpB,OAAOA,EAAAA,UAAAA,IAAgCA,EAAAA,aAA6BA,EAApE,aAoBoBukB,CAAlB,GAAqC,OAErCD,GAAAA,GAEA,MAAME,QAA6B,GArBvC,EAqB2C5jB,EAAvC,OApBK,IAAIob,SAASyI,IAClB,MAAMD,EAAN,GAEA,IAAK,IAAI7e,EAAT,EAAgBA,EAiBmB,GAjBDA,IAChC6e,EAAAA,GAAaL,GAAwBxe,EAArC6e,GAGFE,YAAW,IAAMD,EAAP,IAAVC,SARJ,MAuBI5K,EAAQ,SAARA,IACAwK,GAAAA,IAYI1tB,UAPF,cASCytB,IAAa,gBAAKztB,UA5GzB,UA4GoB,qCC7Fb,SAAS+tB,IAAsB,yCAGpCC,IAEA,MAAM,eAAO9sB,GAAaP,EAA1B,GASA,OACE,gBAAKX,UAjCT,UAiCI,UACE,iBAAM2B,QAAN,EAA6BiD,UATjC,YACMlD,MAAAA,EAAAA,KAAJ,UAAqBA,EAAAA,MACnBA,EAAAA,iBACAssB,MAMA,UACE,iBAAMntB,IAAN,EAAgBK,SAAhB,WACG+sB,EAAW,IAAZ,UCXV,SAASC,KACP,MAAMC,EAAN,GACA,IAAK,IAAIpf,EAAT,EAAgBA,EAAhB,GAAwBA,IACtBof,EAAAA,KAAiB,CACf5sB,KADe,SAEf0K,GAFe,EAGfmiB,WAAYnM,IAAAA,SAAAA,aACZgM,UAAU,IAGd,S,iBAGF,MAAMI,GAAc,IAApB,IAgBMC,GAAgD,CACpD,CAAE1rB,IAAF,KAAaC,KAAb,KAAyBC,MAAO,IAChC,CAAEF,IAAF,UAAkBC,KAAM,WACxB,CAAED,IAAF,cAAsBC,KAAM,eAC5B,CAAED,IAAF,QAAgBC,KAAM,UAGlB0rB,GAAsD,CAC1D,CACE3rB,IADF,WAEEC,KAFF,GAGE6D,SAHF,GAIE5D,MAJF,GAKE4C,QAAQoB,GACCA,QAAAA,EAAAA,MAAAA,WAAuBA,EAAAA,IAAAA,KAAvBA,OAAP,EAEF4D,UAAU7G,GACDA,WAAAA,EAAAA,KAAAA,eAAP,EAMFJ,UAAS,EAAC,mCAAuBY,KAC/B,WAAIR,EAAAA,MACK,aAAaR,eAAb,EAA6C8T,SAAUtT,EAA9D,YAIA,aACEoqB,SAAUpqB,EADZ,SAEER,eAFF,EAGE2qB,aAAc,KACZ3pB,EAAY,MAAU4pB,UAAWpqB,EAAIoqB,eAM/C,CAAErrB,IAAF,KAAaC,KAAb,KAAyBC,MAAO,IAChC,CAAEF,IAAF,aAAqBC,KAAM,eAGd,SAAS2rB,KACtB,MAAOxkB,EAAMkZ,IAAWxb,EAAAA,EAAAA,UAAxB,IAkBA,OACE,aACEsI,aADF,GAEErG,QAFF,GAGEK,KAHF,EAIEmF,aArBJ,YAA6C,QAAEL,IAC7C,MAAMjL,EAAMmG,EAAK8E,EAAjB,IACA,WAAIjL,EAAAA,OACGA,EAAL,SAGEmG,EAAAA,OAAY8E,EAAAA,GAAZ9E,EAAAA,EAA+B,CAC7BzI,KAD6B,SAE7B0K,GAAIpI,EAAAA,GAFyB,IAG7BsT,SAAUtT,EAAIoI,KALhBjC,EAAAA,OAAY8E,EAAAA,GAAZ9E,EAAAA,GAQFkZ,EAAAA,KAUAhT,gBALF,GAMED,UAAYnJ,GAAUA,QAAAA,EAAAA,MAAAA,WAAuBA,EAAAA,IAAAA,KAAvBA,IANxB,GAOE9G,UAPF,YAQEkR,sBATJ,IAcF,SAASud,IAAY,0BAAYprB,IAC/B,MAAMqP,GAAU5R,EAAAA,EAAAA,QAAhB,OACAL,EAAAA,EAAAA,YAAU,KACR,GACAiS,EAAAA,QAAAA,QAAAA,cAAAA,kBAAAA,MAES,CAAEzR,eAAe,MACzB,CALHR,IAMA,MAAMiuB,EAnGR,SAAqBvX,GACnB,GAAIkX,GAAAA,IAAJ,GAA+B,OAAOA,GAAAA,IAAP,GAC/B,MAAMK,EAAN,GACA,IAAK,IAAI3f,EAAT,EAAgBA,EAAhB,GAAwBA,IACtB2f,EAAAA,KAAc,CACZziB,GADY,EAEZ4e,QAAS5I,IAAAA,SAAAA,cACT0M,YAAa1M,IAAAA,SAAAA,qBACb6I,MAAO7I,IAAAA,SAAAA,UAIX,OADAoM,GAAAA,IAAAA,EAAAA,GACA,EAuFiBO,CAAjB,GAQA,OACE,gBAAKhqB,UAPP,YACMnC,EAAJ,sBACEA,EAAAA,mBAKF,UACE,aACE5B,IADF,EAEEmJ,KAFF,EAGEL,QAHF,GAIEqG,aAJF,GAKEnH,MAAO,CAAE/D,OAAQ,SAMzB,SAAS,GAAT,GACE,OAAOjB,EAAP,G,SC9JF,MAAMmG,GAAuB,IAAIqN,MAAM,KAAME,QAE7C,SAASoR,GAAcvlB,GACrB,OACE,gCACGA,EAAMgB,OAAOxB,IADhB,IAC4BQ,EAAMS,OAKvB,SAASgrB,KACtB,MAAMllB,GAAU+J,EAAAA,EAAAA,UAAQ,KACtB,MAAM/J,EAAyB,GAE/B,IAAK,IAAIoF,EAAI,EAAGA,EAAI,IAAMA,IAAK,CAC7B,MAAMnM,EAAMimB,OAAO9Z,GACnBpF,EAAQiC,KAAK,CACXhJ,IAAAA,EACAC,KAAMD,EACNM,OAAQ6L,EAAI,EACZ/L,WAAW,EACXS,UAAWklB,KAIf,OAAOhf,IACN,IAEH,OAAO,SAAC,GAAD,CAAUA,QAASA,EAASK,KAAMA,GAAMiG,UAAW,GAAIjQ,UAAU,cC7B1E,SAAS8uB,KACP,OACE,iBAAKjmB,MAAO,CAAEkmB,UAAW,SAAUC,WAAY,QAA/C,4BACkB,KAChB,iBAAMC,KAAK,KAAKlN,MAAM,QAAtB,wBAaN,MAAMpY,GAAkC,CACtChH,EACA,CAAEC,IAAK,KAAMC,KAAM,MACnB,CAAED,IAAK,QAASC,KAAM,SACtB,CAAED,IAAK,QAASC,KAAM,UAGlBmH,GAAuB,GAE7B,SAASgG,GAAanM,GACpB,OAAOA,EAAIoI,GAGE,SAASijB,KACtB,MAAO5e,EAAcC,IAAwB7I,EAAAA,EAAAA,WAAS,IAA2B,IAAI0F,MAErF,OACE,SAAC,GAAD,CACEzD,QAASA,GACTK,KAAMA,GACNoH,gBAAgB,SAAC0d,GAAD,IAChBxe,aAAcA,EACdC,qBAAsBA,EACtBP,aAAcA,GACdhQ,UAAU,eCzChB,MAAMgK,GAAuB,IAAIqN,MAAM,KAAKE,QAE5C,SAASoR,GAAcvlB,GACrB,OACE,gCACGA,EAAMgB,OAAOxB,IADhB,IAC4BQ,EAAMS,OAKtC,MAAM8F,GAAyB,GAE/B,IAAK,IAAIoF,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMnM,EAAMimB,OAAO9Z,GACnBpF,GAAQiC,KAAK,CACXhJ,IAAAA,EACAC,KAAMD,EACNa,UAAWklB,KAIA,SAASwG,KACtB,OACE,SAAC,GAAD,CAAUxlB,QAASA,GAASK,KAAMA,GAAMhK,UAAU,YAAY6I,MAAO,CAAEumB,OAAQ,UCR5E,SAASC,IAA4B,uDAKvCjsB,IAEH,OAAO,WAAE8O,GAAH,IAAyB+W,EAAAA,GAAAA,GAAQ,CACrC1nB,KADqC,WAErC2nB,KAAM,CAAExf,MAAOlE,GACf2jB,QAAUC,IAAD,CACPlX,WAAYkX,EAAAA,mBAIT,OAAEC,GAAH,IAAqBE,EAAAA,GAAAA,GAAQ,CACjCC,OADiC,WAEjCF,MAAK,MAAE5f,IACL4lB,EAAa5lB,EAAb4lB,IAEFnG,QAAUC,IAAD,CACPC,OAAQD,EADa,SAErBK,QAASL,EAAAA,cASb,OALAppB,GAAYqB,EAAAA,EAAAA,GAAKrB,EAAW,GAtC9B,UAwCwBqpB,GApCxB,WAwCI,aACExoB,IAAMA,IACJ,GACEmoB,EAAKnoB,EAALmoB,mBAEFM,EAAAA,IAEF9jB,OAPF,EAQE9B,cARF,EASE1D,UATF,KADF,IClCF,SAAS4hB,KACP,MAAM5X,EAAO,GACb,IAAK,IAAI+E,EAAI,EAAGA,EAAI,IAAKA,IACvB/E,EAAK4B,KAAK,CACRK,GAAI8C,EACJoZ,KAAO,QAAOpZ,IACdqZ,SAAUhjB,KAAKL,IAAI,IAAKK,KAAKH,MAAsB,IAAhBG,KAAK6iB,WACxC9f,SAAU,CAAC,WAAY,OAAQ,SAAU,OAAO/C,KAAKH,MAAsB,EAAhBG,KAAK6iB,WAChEI,UAAW,CAAC,MAAO,cAAe,OAAQ,SAASjjB,KAAKH,MAAsB,EAAhBG,KAAK6iB,aAIvE,OAAOje,E,QAGT,MAAML,GAAkC,CACtC,CACE/G,IAAK,KACLC,KAAM,KACNC,MAAO,IAET,CACEF,IAAK,OACLC,KAAM,QACNsH,OAAQjG,GAEV,CACEtB,IAAK,WACLC,KAAM,YAER,CACED,IAAK,YACLC,KAAM,cAER,CACED,IAAK,WACLC,KAAM,eAIK,SAAS0sB,KACtB,MAAOvlB,EAAMkZ,IAAWxb,EAAAA,EAAAA,UAASka,IAE3BpQ,GAAcrK,EAAAA,EAAAA,cAAa/D,IASxB,SAACisB,GAAD,IAA0BjsB,EAAOksB,aARxC,SAAsBE,EAAmBC,GACvCvM,GAASlZ,IACP,MAAM4jB,EAAU,IAAI5jB,GAEpB,OADA4jB,EAAQrD,OAAOkF,EAAS,EAAG7B,EAAQrD,OAAOiF,EAAW,GAAG,IACjD5B,SAKV,IAEH,OACE,SAAClD,GAAA,EAAD,CAAaC,QAASC,GAAAA,GAAtB,UACE,SAAC,GAAD,CAAUjhB,QAASA,GAASK,KAAMA,EAAMmF,aAAc+T,EAAS/R,YAAaK,MC/DlF,MAAM7H,GAAkC,CACtC,CAAE/G,IAAK,KAAMC,KAAM,MACnB,CAAED,IAAK,QAASC,KAAM,SACtB,CAAED,IAAK,QAASC,KAAM,UAGT,SAAS6sB,KACtB,MAAO1lB,IAAQtC,EAAAA,EAAAA,WAAS,KACtB,MAAMsC,EAAc,GAEpB,IAAK,IAAI+E,EAAI,EAAGA,EAAI,IAAMA,IACxB/E,EAAK4B,KAAK,CACRK,GAAI8C,EACJgT,MAAQ,SAAQhT,IAChB4gB,MAAW,IAAJ5gB,IAIX,OAAO/E,MAEF1G,EAAOssB,IAAYloB,EAAAA,EAAAA,UAAS,MAC7BgL,GAAU5R,EAAAA,EAAAA,QAAuB,MAEvC,OACE,iCACE,iBAAK+H,MAAO,CAAE6f,aAAc,GAA5B,WACE,iBAAM7f,MAAO,CAAEgnB,YAAa,GAA5B,0BACA,kBACEhnB,MAAO,CAAE/F,MAAO,IAChBvB,KAAK,SACL+B,MAAOA,EACP7B,SAAWgB,GAAUmtB,EAASntB,EAAMpC,OAAOiD,UAE7C,mBAAQ/B,KAAK,SAASI,QAAS,IAAM+Q,EAAQ3R,QAAS0Z,YAAY1T,OAAOzD,IAAzE,+BAIF,SAAC,GAAD,CAAUzC,IAAK6R,EAAS/I,QAASA,GAASK,KAAMA,OCJ/C,SAAS8lB,IAAqB,wDAGnCC,IAEA,MAAM,eAAO7uB,GAAaP,EAA1B,GASA,OACE,iCACE,gBAAKX,UAxDX,aAyDO+vB,IACC,gBAAK/vB,UAhCb,UAgCiD2B,QAAzC,YACE,iBAAMd,IAAN,EAAgBK,SAAhB,EAAoC0D,UAZ5C,YACE,UAAIlD,EAAAA,MACFA,EAAAA,iBACAsuB,MASI,oBCsCV,SAASC,GAAQjmB,GAAa,KAAEzI,EAAF,GAAQ0K,IACpC,OAAQ1K,GACN,IAAK,eACH,OArCN,SAAsByI,EAAaiC,GACjC,MAAMikB,EAAWlmB,EAAKwV,WAAW8D,GAAMA,EAAErX,KAAOA,IAC1CpI,EAAMmG,EAAKkmB,IACX,SAAEvJ,GAAa9iB,EACrB,IAAK8iB,EAAU,OAAO3c,EAEtB,MAAM4jB,EAAU,IAAI5jB,GAOpB,OANA4jB,EAAQsC,GAAY,IAAKrsB,EAAKc,YAAad,EAAIc,YAC1Cd,EAAIc,WAGPipB,EAAQrD,OAAO2F,EAAW,EAAGvJ,EAASnc,QAFtCojB,EAAQrD,OAAO2F,EAAW,EAAG,KAAMvJ,GAI9BiH,EAwBIuC,CAAanmB,EAAMiC,GAC5B,IAAK,eACH,OAvBN,SAAsBjC,EAAaiC,GACjC,MAAMpI,EAAMmG,EAAKomB,MAAM9M,GAAMA,EAAErX,KAAOA,IACtC,IAAKpI,IAAQA,EAAIsT,SAAU,OAAOnN,EAGlC,MAAM4jB,EAAU5jB,EAAKqmB,QAAQ/M,GAAMA,EAAErX,KAAOA,IAGtCqkB,EAAiB1C,EAAQpO,WAAW8D,GAAMA,EAAErX,KAAOpI,EAAIsT,YACvD,SAAEwP,GAAaiH,EAAQ0C,GAC7B,GAAI3J,EAAU,CACZ,MAAM4J,EAAc5J,EAAS0J,QAAQG,GAAOA,EAAGvkB,KAAOA,IACtD2hB,EAAQ0C,GAAkB,IAAK1C,EAAQ0C,GAAiB3J,SAAU4J,GAGpE,OAAO3C,EAQI6C,CAAazmB,EAAMiC,GAC5B,QACE,OAAOjC,G,SAIb,MAAM0mB,GAzFN,WACE,MAAM1mB,EAAO,GACb,IAAK,IAAI+E,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5B,MAAM+b,EAAwB,GAAhB1lB,KAAK6iB,SACbhc,EAAM,MAAK8C,IACXlL,EAAW,CACfoI,GAAAA,EACApJ,KAAO,YAAWkM,IAClB4hB,OAAS,WAAU5hB,IACnB+I,SAAU,cACVgT,MAAAA,EACAnE,SAAU,CACR,CACE1a,GAAK,GAAEA,MACPkL,SAAUlL,EACVpJ,KAAO,YAAWkM,IAClB4hB,OAAQ,SACR7Y,SAAU,cACVgT,MAAOA,EAAQ,GAEjB,CACE7e,GAAK,GAAEA,MACPkL,SAAUlL,EACVpJ,KAAO,YAAWkM,IAClB4hB,OAAQ,UACR7Y,SAAU,cACVgT,MAAe,IAARA,GAET,CACE7e,GAAK,GAAEA,MACPkL,SAAUlL,EACVpJ,KAAO,YAAWkM,IAClB4hB,OAAQ,SACR7Y,SAAU,cACVgT,MAAe,IAARA,IAGXnmB,YAAY,GAEdqF,EAAK4B,KAAK/H,GAEZ,OAAOmG,EAgDW4X,GAEL,SAASgP,KACtB,MAAO5mB,EAAM6mB,IAAY3F,EAAAA,EAAAA,YAAW+E,GAASS,KACtCI,EAAaC,IAAkBrpB,EAAAA,EAAAA,WAAS,GACzCiC,GAAyB+J,EAAAA,EAAAA,UAAQ,IAC9B,CACL,CACE9Q,IAAK,KACLC,KAAM,KACNK,QAAQ,GAEV,CACEN,IAAK,OACLC,KAAM,QAER,CACED,IAAK,SACLC,KAAM,SACNY,WAAU,IAAEI,EAAF,eAAOR,IACf,MAAM2tB,OAA+BlvB,IAAjB+B,EAAI8iB,SAClB9d,EAASmoB,OAAmClvB,EAArB,CAAEmvB,WAAY,IAC3C,OACE,gCACGD,IACC,SAACjD,GAAD,CACE1qB,eAAgBA,EAChB4qB,UAA6B,IAAnBpqB,EAAIc,WACdqpB,aAAc,IAAM6C,EAAS,CAAE5kB,GAAIpI,EAAIoI,GAAI1K,KAAM,oBAGrD,iBAAKvB,UAAU,iBAAf,WACIgxB,IACA,SAAClB,GAAD,CACEzsB,eAAgBA,EAChB0sB,sBAAuBe,EACvBd,eAAgB,IAAMa,EAAS,CAAE5kB,GAAIpI,EAAIoI,GAAI1K,KAAM,oBAGvD,gBAAKsH,MAAOA,EAAZ,SAAoBhF,EAAI8sB,iBAMlC,CACE/tB,IAAK,WACLC,KAAM,YAER,CACED,IAAK,QACLC,KAAM,WAGT,CAACiuB,IAEJ,OACE,iCACE,6CAEE,kBACEvvB,KAAK,WACLC,QAASsvB,EACTrvB,SAAU,IAAMsvB,GAAgBD,SAGpC,SAAC,GAAD,CAAUnnB,QAASA,EAASK,KAAMA,EAAMhK,UAAU,gBC3KxD,MAAMgK,GAAuB,IAAIqN,MAAM,KAAKE,QAE5C,SAASoR,GAAcvlB,GACrB,OACE,gCACGA,EAAMgB,OAAOxB,IADhB,IAC4BQ,EAAMS,OAKvB,SAASqtB,KACtB,MAAMvnB,GAAU+J,EAAAA,EAAAA,UAAQ,KACtB,MAAM/J,EAAyB,GAE/B,IAAK,IAAIoF,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMnM,EAAMimB,OAAO9Z,GACnBpF,EAAQiC,KAAK,CACXhJ,IAAAA,EACAC,KAAMD,EACNM,OAAQ6L,EAAI,EACZ/L,WAAW,EACXS,UAAWklB,KAIf,OAAOhf,IACN,IAEH,OAAO,SAAC,GAAD,CAAUA,QAASA,EAASK,KAAMA,GAAMiG,UAAWA,GAAWjQ,UAAU,cAGjF,SAASiQ,KAEP,OAAO,GAAK7K,KAAKH,MAAsB,GAAhBG,KAAK6iB,UC2C9B,SAASkJ,KACP,OACE,2BACE,gBAEA,iBAAMnxB,UAdZ,UAcM,UACE,2BACE,eAAUE,OAAV,EAAgB0gB,KAAhB,IAAyB3gB,GAAzB,sBACA,eAAOC,OAAP,EAAakxB,KAAb,6BACE,mBAEF,eAAOlxB,OAAP,EAAakxB,KAAb,0BACE,mBAEF,eAAOlxB,OAAP,EAAakxB,KAAb,6BACE,mBAEF,eAAOlxB,OAAP,EAAakxB,KAAb,6BACE,mBAEF,eAAOlxB,OAAP,EAAakxB,KAAb,gCACE,mBAEF,eAAOlxB,OAAP,EAAakxB,KAAb,0BACE,mBAEF,eAAOlxB,OAAP,EAAakxB,KAAb,sBACE,mBAEF,eAAOlxB,OAAP,EAAakxB,KAAb,4BACE,mBAEF,eAAOlxB,OAAP,EAAakxB,KAAb,gCACE,mBAEF,eAAOlxB,OAAP,EAAakxB,KAAb,2BACE,mBAEF,eAAOlxB,OAAP,EAAakxB,KAAb,2BACE,mBAEF,eAAOlxB,OAAP,EAAakxB,KAAb,qBACE,mBAEF,eAAOlxB,OAAP,EAAakxB,KAAb,4BACE,mBAEF,eAAOlxB,OAAP,EAAakxB,KAAb,6BACE,mBAEF,eAAOlxB,OAAP,EAAakxB,KAAb,2BACE,mBAEF,eAAOlxB,OAAP,EAAakxB,KAAb,uBACE,mBAEF,eAAOlxB,OAAP,EAAakxB,KAAb,iCACE,mBAEF,yDAOVC,EAAAA,EAAAA,SACE,iCACE,kBAEFlR,SAAAA,eAJFkR,S,+rBCnJIC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqB1vB,IAAjB2vB,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,IAOV,OAHAE,EAAoBJ,GAAUK,KAAKF,EAAOD,QAASC,EAAQA,EAAOD,QAASH,GAGpEI,EAAOD,QAIfH,EAAoBO,EAAIF,E/DzBpBnyB,EAAW,GACf8xB,EAAoBQ,EAAI,CAACC,EAAQC,EAAU/qB,EAAIiB,KAC9C,IAAG8pB,EAAH,CAMA,IAAIC,EAAeC,EAAAA,EACnB,IAASpjB,EAAI,EAAGA,EAAItP,EAAS+K,OAAQuE,IAAK,CAGzC,IAFA,IAAKkjB,EAAU/qB,EAAIiB,GAAY1I,EAASsP,GACpCqjB,GAAY,EACPC,EAAI,EAAGA,EAAIJ,EAASznB,OAAQ6nB,MACpB,EAAXlqB,GAAsB+pB,GAAgB/pB,IAAayO,OAAOW,KAAKga,EAAoBQ,GAAGne,OAAOhR,GAAS2uB,EAAoBQ,EAAEnvB,GAAKqvB,EAASI,MAC9IJ,EAAS1H,OAAO8H,IAAK,IAErBD,GAAY,EACTjqB,EAAW+pB,IAAcA,EAAe/pB,IAG7C,GAAGiqB,EAAW,CACb3yB,EAAS8qB,OAAOxb,IAAK,GACrB,IAAIuU,EAAIpc,SACEpF,IAANwhB,IAAiB0O,EAAS1O,IAGhC,OAAO0O,EAvBN7pB,EAAWA,GAAY,EACvB,IAAI,IAAI4G,EAAItP,EAAS+K,OAAQuE,EAAI,GAAKtP,EAASsP,EAAI,GAAG,GAAK5G,EAAU4G,IAAKtP,EAASsP,GAAKtP,EAASsP,EAAI,GACrGtP,EAASsP,GAAK,CAACkjB,EAAU/qB,EAAIiB,IgEJ/BopB,EAAoBe,EAAKX,IACxB,IAAIY,EAASZ,GAAUA,EAAOa,WAC7B,IAAOb,EAAiB,QACxB,IAAM,EAEP,OADAJ,EAAoB7sB,EAAE6tB,EAAQ,CAAExP,EAAGwP,IAC5BA,G/DNJ5yB,EAAWiX,OAAO6b,eAAkBC,GAAS9b,OAAO6b,eAAeC,GAASA,GAASA,EAAa,UAQtGnB,EAAoBoB,EAAI,SAASrvB,EAAOsM,GAEvC,GADU,EAAPA,IAAUtM,EAAQsvB,KAAKtvB,IAChB,EAAPsM,EAAU,OAAOtM,EACpB,GAAoB,iBAAVA,GAAsBA,EAAO,CACtC,GAAW,EAAPsM,GAAatM,EAAMkvB,WAAY,OAAOlvB,EAC1C,GAAW,GAAPsM,GAAoC,mBAAftM,EAAMuvB,KAAqB,OAAOvvB,EAE5D,IAAIwvB,EAAKlc,OAAOmc,OAAO,MACvBxB,EAAoBjO,EAAEwP,GACtB,IAAIE,EAAM,GACVtzB,EAAiBA,GAAkB,CAAC,KAAMC,EAAS,IAAKA,EAAS,IAAKA,EAASA,IAC/E,IAAI,IAAIoB,EAAiB,EAAP6O,GAAYtM,EAAyB,iBAAXvC,KAAyBrB,EAAeoV,QAAQ/T,GAAUA,EAAUpB,EAASoB,GACxH6V,OAAOqc,oBAAoBlyB,GAASgU,SAASnS,GAASowB,EAAIpwB,GAAO,IAAOU,EAAMV,KAI/E,OAFAowB,EAAa,QAAI,IAAM,EACvBzB,EAAoB7sB,EAAEouB,EAAIE,GACnBF,GgEvBRvB,EAAoB7sB,EAAI,CAACgtB,EAASwB,KACjC,IAAI,IAAItwB,KAAOswB,EACX3B,EAAoB4B,EAAED,EAAYtwB,KAAS2uB,EAAoB4B,EAAEzB,EAAS9uB,IAC5EgU,OAAOwc,eAAe1B,EAAS9uB,EAAK,CAAEywB,YAAY,EAAM/sB,IAAK4sB,EAAWtwB,MCJ3E2uB,EAAoB+B,EAAI,GAGxB/B,EAAoB7vB,EAAK6xB,GACjBnO,QAAQC,IAAIzO,OAAOW,KAAKga,EAAoB+B,GAAGE,QAAO,CAACC,EAAU7wB,KACvE2uB,EAAoB+B,EAAE1wB,GAAK2wB,EAASE,GAC7BA,IACL,KCNJlC,EAAoBmC,EAAKH,IAEZ,CAAC,IAAM,uBAAuB,IAAM,uBAAuB,IAAM,uBAAuB,IAAM,uBAAuB,IAAM,uBAAuB,IAAM,uBAAuB,IAAM,uBAAuB,IAAM,wBAAwBA,GAAW,OCFlQhC,EAAoBoC,SAAYJ,MCDhChC,EAAoBqC,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOjB,MAAQ,IAAIkB,SAAS,cAAb,GACd,MAAOpyB,GACR,GAAsB,iBAAXlB,OAAqB,OAAOA,QALjB,GCAxB+wB,EAAoB4B,EAAI,CAACT,EAAKqB,IAAUnd,OAAOod,UAAUC,eAAepC,KAAKa,EAAKqB,GpEA9En0B,EAAa,GACbC,EAAoB,mBAExB0xB,EAAoB2C,EAAI,CAACxP,EAAKyP,EAAMvxB,EAAK2wB,KACxC,GAAG3zB,EAAW8kB,GAAQ9kB,EAAW8kB,GAAK9Y,KAAKuoB,OAA3C,CACA,IAAIC,EAAQC,EACZ,QAAWvyB,IAARc,EAEF,IADA,IAAI0xB,EAAUnU,SAASoU,qBAAqB,UACpCxlB,EAAI,EAAGA,EAAIulB,EAAQ9pB,OAAQuE,IAAK,CACvC,IAAIylB,EAAIF,EAAQvlB,GAChB,GAAGylB,EAAEC,aAAa,QAAU/P,GAAO8P,EAAEC,aAAa,iBAAmB50B,EAAoB+C,EAAK,CAAEwxB,EAASI,EAAG,OAG1GJ,IACHC,GAAa,GACbD,EAASjU,SAASC,cAAc,WAEzBsU,QAAU,QACjBN,EAAOO,QAAU,IACbpD,EAAoBqD,IACvBR,EAAOS,aAAa,QAAStD,EAAoBqD,IAElDR,EAAOS,aAAa,eAAgBh1B,EAAoB+C,GACxDwxB,EAAOU,IAAMpQ,GAEd9kB,EAAW8kB,GAAO,CAACyP,GACnB,IAAIY,EAAmB,CAAC1J,EAAM5oB,KAE7B2xB,EAAOY,QAAUZ,EAAOa,OAAS,KACjCC,aAAaP,GACb,IAAIQ,EAAUv1B,EAAW8kB,GAIzB,UAHO9kB,EAAW8kB,GAClB0P,EAAOgB,YAAchB,EAAOgB,WAAWC,YAAYjB,GACnDe,GAAWA,EAAQpgB,SAAS7N,GAAQA,EAAGzE,KACpC4oB,EAAM,OAAOA,EAAK5oB,IAGlBkyB,EAAU7G,WAAWiH,EAAiBO,KAAK,UAAMxzB,EAAW,CAAEP,KAAM,UAAWlB,OAAQ+zB,IAAW,MACtGA,EAAOY,QAAUD,EAAiBO,KAAK,KAAMlB,EAAOY,SACpDZ,EAAOa,OAASF,EAAiBO,KAAK,KAAMlB,EAAOa,QACnDZ,GAAclU,SAASI,KAAKgV,YAAYnB,KqEvCzC7C,EAAoBjO,EAAKoO,IACH,oBAAX8D,QAA0BA,OAAOC,aAC1C7e,OAAOwc,eAAe1B,EAAS8D,OAAOC,YAAa,CAAEnyB,MAAO,WAE7DsT,OAAOwc,eAAe1B,EAAS,aAAc,CAAEpuB,OAAO,K,MCLvD,IAAIoyB,EACAnE,EAAoBqC,EAAE+B,gBAAeD,EAAYnE,EAAoBqC,EAAEgC,SAAW,IACtF,IAAIzV,EAAWoR,EAAoBqC,EAAEzT,SACrC,IAAKuV,GAAavV,IACbA,EAAS0V,gBACZH,EAAYvV,EAAS0V,cAAcf,MAC/BY,GAAW,CACf,IAAIpB,EAAUnU,EAASoU,qBAAqB,UACzCD,EAAQ9pB,SAAQkrB,EAAYpB,EAAQA,EAAQ9pB,OAAS,GAAGsqB,KAK7D,IAAKY,EAAW,MAAM,IAAInzB,MAAM,yDAChCmzB,EAAYA,EAAUvU,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KACpFoQ,EAAoBhO,EAAImS,G,SCVxB,IAAII,EAAkB,CACrB,IAAK,GAGNvE,EAAoB+B,EAAEjB,EAAI,CAACkB,EAASE,KAElC,IAAIsC,EAAqBxE,EAAoB4B,EAAE2C,EAAiBvC,GAAWuC,EAAgBvC,QAAWzxB,EACtG,GAA0B,IAAvBi0B,EAGF,GAAGA,EACFtC,EAAS7nB,KAAKmqB,EAAmB,QAC3B,CAGL,IAAIC,EAAU,IAAI5Q,SAAQ,CAACyI,EAASoI,IAAYF,EAAqBD,EAAgBvC,GAAW,CAAC1F,EAASoI,KAC1GxC,EAAS7nB,KAAKmqB,EAAmB,GAAKC,GAGtC,IAAItR,EAAM6M,EAAoBhO,EAAIgO,EAAoBmC,EAAEH,GAEpD2C,EAAQ,IAAI3zB,MAgBhBgvB,EAAoB2C,EAAExP,GAfFjiB,IACnB,GAAG8uB,EAAoB4B,EAAE2C,EAAiBvC,KAEf,KAD1BwC,EAAqBD,EAAgBvC,MACRuC,EAAgBvC,QAAWzxB,GACrDi0B,GAAoB,CACtB,IAAII,EAAY1zB,IAAyB,SAAfA,EAAMlB,KAAkB,UAAYkB,EAAMlB,MAChE60B,EAAU3zB,GAASA,EAAMpC,QAAUoC,EAAMpC,OAAOy0B,IACpDoB,EAAMG,QAAU,iBAAmB9C,EAAU,cAAgB4C,EAAY,KAAOC,EAAU,IAC1FF,EAAMrzB,KAAO,iBACbqzB,EAAM30B,KAAO40B,EACbD,EAAMI,QAAUF,EAChBL,EAAmB,GAAGG,MAIgB,SAAW3C,EAASA,KAclEhC,EAAoBQ,EAAEM,EAAKkB,GAA0C,IAA7BuC,EAAgBvC,GAGxD,IAAIgD,EAAuB,CAACC,EAA4BjS,KACvD,IAGIiN,EAAU+B,GAHTtB,EAAUwE,EAAaC,GAAWnS,EAGhBxV,EAAI,EAC3B,GAAGkjB,EAAS0E,MAAM1qB,GAAgC,IAAxB6pB,EAAgB7pB,KAAa,CACtD,IAAIulB,KAAYiF,EACZlF,EAAoB4B,EAAEsD,EAAajF,KACrCD,EAAoBO,EAAEN,GAAYiF,EAAYjF,IAGhD,GAAGkF,EAAS,IAAI1E,EAAS0E,EAAQnF,GAGlC,IADGiF,GAA4BA,EAA2BjS,GACrDxV,EAAIkjB,EAASznB,OAAQuE,IACzBwkB,EAAUtB,EAASljB,GAChBwiB,EAAoB4B,EAAE2C,EAAiBvC,IAAYuC,EAAgBvC,IACrEuC,EAAgBvC,GAAS,KAE1BuC,EAAgBvC,GAAW,EAE5B,OAAOhC,EAAoBQ,EAAEC,IAG1B4E,EAAqB/C,WAAwC,4BAAIA,WAAwC,6BAAK,GAClH+C,EAAmB7hB,QAAQwhB,EAAqBjB,KAAK,KAAM,IAC3DsB,EAAmBhrB,KAAO2qB,EAAqBjB,KAAK,KAAMsB,EAAmBhrB,KAAK0pB,KAAKsB,K,GClFvF,IAAIC,EAAsBtF,EAAoBQ,OAAEjwB,EAAW,CAAC,MAAM,IAAOyvB,EAAoB,SAC7FsF,EAAsBtF,EAAoBQ,EAAE8E,I","sources":["webpack://react-data-grid/webpack/runtime/chunk loaded","webpack://react-data-grid/webpack/runtime/create fake namespace object","webpack://react-data-grid/webpack/runtime/load script","webpack://react-data-grid/website/Nav.tsx","webpack://react-data-grid/./src/hooks/useLayoutEffect.ts","webpack://react-data-grid/./src/hooks/useFocusRef.ts","webpack://react-data-grid/src/formatters/SelectCellFormatter.tsx","webpack://react-data-grid/./src/hooks/useRowSelection.ts","webpack://react-data-grid/./src/utils/domUtils.ts","webpack://react-data-grid/./src/Columns.tsx","webpack://react-data-grid/src/editors/TextEditor.tsx","webpack://react-data-grid/./src/formatters/ValueFormatter.tsx","webpack://react-data-grid/src/formatters/ToggleGroupFormatter.tsx","webpack://react-data-grid/./src/utils/index.ts","webpack://react-data-grid/src/style/cell.ts","webpack://react-data-grid/./src/hooks/useCalculatedColumns.ts","webpack://react-data-grid/./src/utils/colSpanUtils.ts","webpack://react-data-grid/./src/hooks/useLatestFunc.ts","webpack://react-data-grid/src/headerCells/SortableHeaderCell.tsx","webpack://react-data-grid/./src/hooks/useRovingCellRef.ts","webpack://react-data-grid/src/HeaderCell.tsx","webpack://react-data-grid/src/style/row.ts","webpack://react-data-grid/src/HeaderRow.tsx","webpack://react-data-grid/./src/utils/selectedCellUtils.ts","webpack://react-data-grid/src/Cell.tsx","webpack://react-data-grid/./src/Row.tsx","webpack://react-data-grid/./src/GroupCell.tsx","webpack://react-data-grid/src/GroupRow.tsx","webpack://react-data-grid/src/SummaryCell.tsx","webpack://react-data-grid/src/SummaryRow.tsx","webpack://react-data-grid/./src/utils/keyboardUtils.ts","webpack://react-data-grid/src/EditCell.tsx","webpack://react-data-grid/src/DragHandle.tsx","webpack://react-data-grid/./src/DataGrid.tsx","webpack://react-data-grid/./src/hooks/useGridDimensions.ts","webpack://react-data-grid/./src/hooks/useViewportRows.ts","webpack://react-data-grid/./src/hooks/useViewportColumns.ts","webpack://react-data-grid/src/style/core.ts","webpack://react-data-grid/./website/demos/exportUtils.tsx","webpack://react-data-grid/website/demos/CommonFeatures.tsx","webpack://react-data-grid/./website/demos/components/Editors/DropDownEditor.tsx","webpack://react-data-grid/website/demos/components/Formatters/ImageFormatter.tsx","webpack://react-data-grid/website/demos/AllFeatures.tsx","webpack://react-data-grid/./website/demos/CellNavigation.tsx","webpack://react-data-grid/website/demos/ColumnSpanning.tsx","webpack://react-data-grid/./website/demos/components/HeaderRenderers/DraggableHeaderRenderer.tsx","webpack://react-data-grid/./website/demos/ColumnsReordering.tsx","webpack://react-data-grid/website/demos/ContextMenu.tsx","webpack://react-data-grid/website/demos/Grouping.tsx","webpack://react-data-grid/website/demos/HeaderFilters.tsx","webpack://react-data-grid/website/demos/InfiniteScrolling.tsx","webpack://react-data-grid/website/demos/components/Formatters/CellExpanderFormatter.tsx","webpack://react-data-grid/website/demos/MasterDetail.tsx","webpack://react-data-grid/./website/demos/MillionCells.tsx","webpack://react-data-grid/./website/demos/NoRows.tsx","webpack://react-data-grid/./website/demos/Resizable.tsx","webpack://react-data-grid/website/demos/components/RowRenderers/DraggableRowRenderer.tsx","webpack://react-data-grid/./website/demos/RowsReordering.tsx","webpack://react-data-grid/./website/demos/ScrollToRow.tsx","webpack://react-data-grid/website/demos/components/Formatters/ChildRowDeleteButton.tsx","webpack://react-data-grid/./website/demos/TreeView.tsx","webpack://react-data-grid/./website/demos/VariableRowHeight.tsx","webpack://react-data-grid/website/root.tsx","webpack://react-data-grid/webpack/bootstrap","webpack://react-data-grid/webpack/runtime/compat get default export","webpack://react-data-grid/webpack/runtime/define property getters","webpack://react-data-grid/webpack/runtime/ensure chunk","webpack://react-data-grid/webpack/runtime/get javascript chunk filename","webpack://react-data-grid/webpack/runtime/get mini-css chunk filename","webpack://react-data-grid/webpack/runtime/global","webpack://react-data-grid/webpack/runtime/hasOwnProperty shorthand","webpack://react-data-grid/webpack/runtime/make namespace object","webpack://react-data-grid/webpack/runtime/publicPath","webpack://react-data-grid/webpack/runtime/jsonp chunk loading","webpack://react-data-grid/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"react-data-grid:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\t;\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","import { NavLink } from 'react-router-dom';\nimport { css } from '@linaria/core';\n\nconst navClassname = css`\n  display: flex;\n  flex-direction: column;\n  white-space: nowrap;\n\n  @media (prefers-color-scheme: light) {\n    border-left: 4px solid hsl(210deg 50% 80%);\n  }\n  @media (prefers-color-scheme: dark) {\n    border-left: 4px solid hsl(210deg 50% 40%);\n  }\n\n  h1,\n  h2 {\n    margin: 8px;\n  }\n\n  a {\n    color: inherit;\n    font-size: 14px;\n    line-height: 22px;\n    text-decoration: none;\n    padding: 0 16px;\n    transition: 0.1s background-color;\n\n    &:hover {\n      @media (prefers-color-scheme: light) {\n        background-color: hsl(210deg 50% 90%);\n      }\n      @media (prefers-color-scheme: dark) {\n        background-color: hsl(210deg 50% 30%);\n      }\n    }\n  }\n`;\n\nconst activeNavClassname = css`\n  font-weight: 500;\n\n  @media (prefers-color-scheme: light) {\n    background-color: hsl(210deg 50% 80%);\n  }\n  @media (prefers-color-scheme: dark) {\n    background-color: hsl(210deg 50% 40%);\n  }\n\n  a&:hover {\n    @media (prefers-color-scheme: light) {\n      background-color: hsl(210deg 50% 70%);\n    }\n    @media (prefers-color-scheme: dark) {\n      background-color: hsl(210deg 50% 50%);\n    }\n  }\n`;\n\nexport default function Nav() {\n  return (\n    <nav className={navClassname}>\n      <h1>react-data-grid</h1>\n\n      <h2>Demos</h2>\n      <NavLink to=\"/common-features\" exact activeClassName={activeNavClassname}>\n        Common Features\n      </NavLink>\n      <NavLink to=\"/all-features\" exact activeClassName={activeNavClassname}>\n        All Features\n      </NavLink>\n      <NavLink to=\"/cell-navigation\" exact activeClassName={activeNavClassname}>\n        Cell Navigation\n      </NavLink>\n      <NavLink to=\"/column-spanning\" exact activeClassName={activeNavClassname}>\n        Column Spanning\n      </NavLink>\n      <NavLink to=\"/columns-reordering\" exact activeClassName={activeNavClassname}>\n        Columns Reordering\n      </NavLink>\n      <NavLink to=\"/context-menu\" exact activeClassName={activeNavClassname}>\n        Context Menu\n      </NavLink>\n      <NavLink to=\"/grouping\" exact activeClassName={activeNavClassname}>\n        Grouping\n      </NavLink>\n      <NavLink to=\"/header-filters\" exact activeClassName={activeNavClassname}>\n        Header Filters\n      </NavLink>\n      <NavLink to=\"/infinite-scrolling\" exact activeClassName={activeNavClassname}>\n        Infinite Scrolling\n      </NavLink>\n      <NavLink to=\"/master-detail\" exact activeClassName={activeNavClassname}>\n        Master Detail\n      </NavLink>\n      <NavLink to=\"/million-cells\" exact activeClassName={activeNavClassname}>\n        A Million Cells\n      </NavLink>\n      <NavLink to=\"/no-rows\" exact activeClassName={activeNavClassname}>\n        No Rows\n      </NavLink>\n      <NavLink to=\"/resizable-grid\" exact activeClassName={activeNavClassname}>\n        Resizable Grid\n      </NavLink>\n      <NavLink to=\"/rows-reordering\" exact activeClassName={activeNavClassname}>\n        Rows Reordering\n      </NavLink>\n      <NavLink to=\"/scroll-to-row\" exact activeClassName={activeNavClassname}>\n        Scroll To Row\n      </NavLink>\n      <NavLink to=\"/tree-view\" exact activeClassName={activeNavClassname}>\n        Tree View\n      </NavLink>\n      <NavLink to=\"/variable-row-height\" exact activeClassName={activeNavClassname}>\n        Variable Row Height\n      </NavLink>\n\n      <h2>Links</h2>\n      <a\n        href=\"https://github.com/adazzle/react-data-grid/blob/main/README.md\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Documentation\n      </a>\n      <a\n        href=\"https://github.com/adazzle/react-data-grid/blob/main/CHANGELOG.md\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Changelog\n      </a>\n      <a\n        href=\"https://github.com/adazzle/react-data-grid/discussions\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Discussions\n      </a>\n      <a href=\"https://github.com/adazzle/react-data-grid/issues\" target=\"_blank\" rel=\"noreferrer\">\n        Issues\n      </a>\n    </nav>\n  );\n}\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isSelected: boolean) {\n  const ref = useRef<T>(null);\n\n  useLayoutEffect(() => {\n    if (!isSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  return {\n    ref,\n    tabIndex: isSelected ? 0 : -1\n  };\n}\n","import clsx from 'clsx';\nimport { css } from '@linaria/core';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst checkboxLabel = css`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  inset: 0;\n  margin-right: 1px; /* align checkbox in row group cell */\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  all: unset;\n  width: 0;\n  margin: 0;\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  content: '';\n  width: 20px;\n  height: 20px;\n  border: 2px solid var(--rdg-border-color);\n  background-color: var(--rdg-background-color);\n\n  .${checkboxInput}:checked + & {\n    background-color: var(--rdg-checkbox-color);\n    box-shadow: inset 0px 0px 0px 4px var(--rdg-background-color);\n  }\n\n  .${checkboxInput}:focus + & {\n    border-color: var(--rdg-checkbox-focus-color);\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  cursor: default;\n\n  .${checkbox} {\n    border-color: var(--rdg-checkbox-disabled-border-color);\n    background-color: var(--rdg-checkbox-disabled-background-color);\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\ntype SharedInputProps = Pick<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  'disabled' | 'onClick' | 'aria-label' | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  isCellSelected,\n  disabled,\n  onClick,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLInputElement>(isCellSelected);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label className={clsx(checkboxLabelClassname, { [checkboxLabelDisabledClassname]: disabled })}>\n      <input\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        ref={ref}\n        type=\"checkbox\"\n        tabIndex={tabIndex}\n        className={checkboxInputClassname}\n        disabled={disabled}\n        checked={value}\n        onChange={handleChange}\n        onClick={onClick}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","import { createContext, useContext } from 'react';\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","export function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n","import { SelectCellFormatter } from './formatters';\nimport { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, FormatterProps, GroupFormatterProps } from './types';\nimport { stopPropagation } from './utils';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction SelectFormatter(props: FormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onClick={stopPropagation}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: GroupFormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n      // Stop propagation to prevent row selection\n      onClick={stopPropagation}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        isCellSelected={props.isCellSelected}\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n        // Stop propagation to prevent row selection\n        onClick={stopPropagation}\n      />\n    );\n  },\n  formatter: SelectFormatter,\n  groupFormatter: SelectGroupFormatter\n};\n","import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditor = css`\n  appearance: none;\n\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  padding: 0px 6px 0 6px;\n  border: 2px solid #ccc;\n  vertical-align: top;\n  color: var(--rdg-color);\n  background-color: var(--rdg-background-color);\n\n  font-family: inherit;\n  font-size: var(--rdg-font-size);\n\n  &:focus {\n    border-color: var(--rdg-selection-color);\n    outline: none;\n  }\n\n  &::placeholder {\n    color: #999;\n    opacity: 1;\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditor}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function TextEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n","import type { FormatterProps } from '../types';\n\nexport function ValueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import { css } from '@linaria/core';\nimport type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst groupCellContent = css`\n  outline: none;\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  margin-left: 4px;\n  stroke: currentColor;\n  stroke-width: 1.5px;\n  fill: transparent;\n  vertical-align: middle;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function ToggleGroupFormatter<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={ref}\n      className={groupCellContentClassname}\n      tabIndex={tabIndex}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './keyboardUtils';\nexport * from './selectedCellUtils';\n\nexport const { min, max, round, floor, sign } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function getRowStyle(rowIdx: number, height?: number): CSSProperties {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    } as unknown as CSSProperties;\n  }\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    left: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  contain: strict;\n  contain: size layout style paint;\n  padding: 0 8px;\n  border-right: 1px solid var(--rdg-border-color);\n  border-bottom: 1px solid var(--rdg-border-color);\n  grid-row-start: var(--rdg-grid-row-start);\n  background-color: inherit;\n\n  white-space: nowrap;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n  outline: none;\n\n  &[aria-selected='true'] {\n    box-shadow: inset 0 0 0 2px var(--rdg-selection-color);\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\n// max-content does not calculate width when contain is set to style or size\nexport const cellAutoResizeClassname = css`\n  .${cell} {\n    contain: content;\n  }\n`;\n\nexport const cellFrozen = css`\n  position: sticky;\n  /* Should have a higher value than 0 to show up above unfrozen cells */\n  z-index: 1;\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  box-shadow: var(--rdg-frozen-cell-box-shadow);\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column, Maybe } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { ValueFormatter, ToggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport { floor, max, min, round } from '../utils';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy: Maybe<readonly string[]>;\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const minColumnWidth = defaultColumnOptions?.minWidth ?? 80;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? ValueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n    groupBy: readonly string[];\n  } => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ??= ToggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [rawColumns, defaultFormatter, defaultResizable, defaultSortable, rawGroupBy]);\n\n  const { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalColumnWidth: number;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalColumnWidth = 0;\n    let totalFrozenColumnWidth = 0;\n    let templateColumns = '';\n    let allocatedWidth = 0;\n    let unassignedColumnsCount = 0;\n\n    for (const column of columns) {\n      let width = getSpecifiedWidth(column, columnWidths, viewportWidth);\n\n      if (width === undefined) {\n        unassignedColumnsCount++;\n      } else {\n        width = clampColumnWidth(width, column, minColumnWidth);\n        allocatedWidth += width;\n        columnMetrics.set(column, { width, left: 0 });\n      }\n    }\n\n    for (const column of columns) {\n      let width: number;\n      if (columnMetrics.has(column)) {\n        const columnMetric = columnMetrics.get(column)!;\n        columnMetric.left = left;\n        ({ width } = columnMetric);\n      } else {\n        // avoid decimals as subpixel positioning can lead to cell borders not being displayed\n        const unallocatedWidth = viewportWidth - allocatedWidth;\n        const unallocatedColumnWidth = round(unallocatedWidth / unassignedColumnsCount);\n        width = clampColumnWidth(unallocatedColumnWidth, column, minColumnWidth);\n        allocatedWidth += width;\n        unassignedColumnsCount--;\n        columnMetrics.set(column, { width, left });\n      }\n      totalColumnWidth += width;\n      left += width;\n      templateColumns += `${width}px `;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {\n      gridTemplateColumns: templateColumns\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics };\n  }, [columnWidths, columns, viewportWidth, minColumnWidth, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n\nfunction getSpecifiedWidth<R, SR>(\n  { key, width }: Column<R, SR>,\n  columnWidths: ReadonlyMap<string, number>,\n  viewportWidth: number\n): number | undefined {\n  if (columnWidths.has(key)) {\n    // Use the resized width if available\n    return columnWidths.get(key);\n  }\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (typeof width === 'string' && /^\\d+%$/.test(width)) {\n    return floor((viewportWidth * parseInt(width, 10)) / 100);\n  }\n  return undefined;\n}\n\nfunction clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: Column<R, SR>,\n  minColumnWidth: number\n): number {\n  width = max(width, minWidth ?? minColumnWidth);\n\n  if (typeof maxWidth === 'number') {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import { useRef, useEffect, useCallback } from 'react';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends (...args: any[]) => any>(fn: T) {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback((...args: Parameters<T>) => {\n    ref.current(...args);\n  }, []);\n}\n","import { css } from '@linaria/core';\nimport { useFocusRef } from '../hooks';\nimport type { HeaderRendererProps } from '../types';\n\nconst headerSortCell = css`\n  cursor: pointer;\n  display: flex;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  flex-grow: 1;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nconst arrow = css`\n  fill: currentColor;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  HeaderRendererProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'isCellSelected'\n>;\n\ninterface Props<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nexport default function SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  isCellSelected\n}: Props<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      ref={ref}\n      tabIndex={tabIndex}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>\n        {sortDirection !== undefined && (\n          <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n            <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n          </svg>\n        )}\n        {priority}\n      </span>\n    </span>\n  );\n}\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingCellRef(isSelected: boolean) {\n  const ref = useRef<HTMLDivElement>(null);\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const isChildFocused = useRef(false);\n  const [, forceRender] = useState<unknown>({});\n\n  useLayoutEffect(() => {\n    if (!isSelected) {\n      isChildFocused.current = false;\n      return;\n    }\n\n    if (isChildFocused.current) {\n      // When the child is focused, we need to rerender\n      // the cell again so tabIndex is updated to -1\n      forceRender({});\n      return;\n    }\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== ref.current) {\n      isChildFocused.current = true;\n    }\n  }\n\n  const isFocused = isSelected && !isChildFocused.current;\n\n  return {\n    ref,\n    tabIndex: isFocused ? 0 : -1,\n    onFocus\n  };\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport SortableHeaderCell from './headerCells/SortableHeaderCell';\nimport { getCellStyle, getCellClassname } from './utils';\nimport { useRovingCellRef } from './hooks';\n\nconst cellResizable = css`\n  touch-action: none;\n\n  &::after {\n    content: '';\n    cursor: col-resize;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 10px;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'allRowsSelected'\n  | 'onAllRowsSelectionChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid\n}: HeaderCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right } = currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      const width = event.clientX + offset - currentTarget.getBoundingClientRect().left;\n      if (width > 0) {\n        onColumnResize(column, width);\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst && sortDirection === 'DESC') ||\n        (!sortDescendingFirst && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function onDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    const { right } = event.currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    onColumnResize(column, 'auto');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell(0);\n    }\n  }\n\n  function getCell() {\n    if (column.headerRenderer) {\n      return (\n        <column.headerRenderer\n          column={column}\n          sortDirection={sortDirection}\n          priority={priority}\n          onSort={onSort}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={onAllRowsSelectionChange}\n          isCellSelected={isCellSelected}\n        />\n      );\n    }\n\n    if (column.sortable) {\n      return (\n        <SortableHeaderCell\n          onSort={onSort}\n          sortDirection={sortDirection}\n          priority={priority}\n          isCellSelected={isCellSelected}\n        >\n          {column.name}\n        </SortableHeaderCell>\n      );\n    }\n\n    return column.name;\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      ref={ref}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={{\n        ...getCellStyle(column, colSpan),\n        minWidth: column.minWidth ?? undefined,\n        maxWidth: column.maxWidth ?? undefined\n      }}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onDoubleClick={column.resizable ? onDoubleClick : undefined}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {getCell()}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport { cell, cellFrozenLast } from '../style';\n\nexport const row = css`\n  display: contents;\n  line-height: var(--rdg-row-height);\n  background-color: var(--rdg-background-color);\n\n  &:hover {\n    background-color: var(--rdg-row-hover-background-color);\n  }\n\n  &[aria-selected='true'] {\n    background-color: var(--rdg-row-selected-background-color);\n\n    &:hover {\n      background-color: var(--row-selected-hover-background-color);\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nconst topBoxShadow = 'inset 0 2px 0 0 var(--rdg-selection-color)';\nconst rightBoxShadow = 'inset -2px 0 0 0 var(--rdg-selection-color)';\nconst bottomBoxShadow = 'inset 0 -2px 0 0 var(--rdg-selection-color)';\nconst leftBoxShadow = 'inset 2px 0 0 0 var(--rdg-selection-color)';\n\nconst rowSelected = css`\n  outline: none;\n\n  > .${cell} {\n    box-shadow: ${topBoxShadow}, ${bottomBoxShadow};\n    &:first-child {\n      box-shadow: ${topBoxShadow}, ${bottomBoxShadow}, ${leftBoxShadow};\n    }\n    &:last-child {\n      box-shadow: ${topBoxShadow}, ${bottomBoxShadow}, ${rightBoxShadow};\n    }\n  }\n\n  > .${cellFrozenLast} {\n    box-shadow: ${topBoxShadow}, ${bottomBoxShadow}, var(--rdg-frozen-cell-box-shadow);\n  }\n`;\n\nexport const rowSelectedClassname = `rdg-row-selected ${rowSelected}`;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn } from './types';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { DataGridProps } from './DataGrid';\nimport { cell, cellFrozen, rowSelectedClassname } from './style';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'auto') => void;\n  selectCell: (columnIdx: number) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n}\n\nconst headerRow = css`\n  display: contents;\n  line-height: var(--rdg-header-row-height);\n  background-color: var(--rdg-header-background-color);\n  font-weight: bold;\n\n  > .${cell} {\n    /* Should have a higher value than 1 to show up above frozen cells */\n    z-index: 2;\n    position: sticky;\n    top: 0;\n  }\n\n  > .${cellFrozen} {\n    z-index: 3;\n  }\n`;\n\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid\n}: HeaderRowProps<R, SR, K>) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n      style={getRowStyle(1)}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import type { CalculatedColumn, Position, GroupRow, CellNavigationMode, Maybe } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.editor != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function getSelectedCellColSpan<R, SR>({\n  rows,\n  summaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column,\n  isGroupRow\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'summaryRows' | 'isGroupRow' | 'lastFrozenColumnIndex'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  if (rowIdx === -1) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    }\n    return undefined;\n  }\n\n  if (summaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: summaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        summaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode !== 'NONE') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = nextRowIdx === maxRowIdx;\n        if (!isLastRow) {\n          nextIdx = 0;\n          nextRowIdx += 1;\n        }\n      } else {\n        nextIdx = 0;\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = nextRowIdx === minRowIdx;\n        if (!isFirstRow) {\n          nextRowIdx -= 1;\n          nextIdx = columnsCount - 1;\n        }\n      } else {\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  cellNavigationMode: CellNavigationMode;\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  cellNavigationMode,\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === maxColIdx;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === maxRowIdx;\n    const atFirstRow = rowIdx === minRowIdx;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname, isCellEditable } from './utils';\nimport type { CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nconst cellCopied = css`\n  background-color: #ccccff;\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  background-color: #ccccff;\n\n  &.${cellCopied} {\n    background-color: #9999ff;\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  dragHandle,\n  onRowClick,\n  onRowDoubleClick,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  function selectCellWrapper(openEditor?: boolean | null) {\n    selectCell(row, column, openEditor);\n  }\n\n  function handleClick() {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(row, column);\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n    onRowDoubleClick?.(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isCellEditable(column, row) || undefined}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          <column.formatter\n            column={column}\n            row={row}\n            isCellSelected={isCellSelected}\n            onRowChange={onRowChange}\n          />\n          {dragHandle}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { memo, forwardRef } from 'react';\nimport type { RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport { rowClassname, rowSelectedClassname } from './style';\nimport type { RowRendererProps } from './types';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onRowClick,\n    onRowDoubleClick,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RowRendererProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((newRow: R) => {\n    onRowChange(rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(forwardRef(Row)) as <R, SR>(\n  props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\nimport { useRovingCellRef } from './hooks';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) && column.groupFormatter && (\n        <column.groupFormatter\n          groupKey={groupKey}\n          childRows={childRows}\n          column={column}\n          row={row}\n          isExpanded={isExpanded}\n          isCellSelected={isCellSelected}\n          toggleGroup={toggleGroup}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozenLast, rowClassname, rowSelectedClassname } from './style';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport type { CalculatedColumn, GroupRow, Omit } from './types';\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  row: GroupRow<R>;\n  gridRowStart: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectGroup: (rowIdx: number) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nconst groupRow = css`\n  &:not([aria-selected='true']) {\n    background-color: var(--rdg-header-background-color);\n  }\n\n  > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n    border-right: none;\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  gridRowStart,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          {\n            [rowSelectedClassname]: selectedCellIdx === -1\n          }\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nexport const summaryCellClassname = css`\n  top: var(--rdg-summary-row-top);\n  bottom: var(--rdg-summary-row-bottom);\n`;\n\ninterface SharedCellRendererProps<R, SR>\n  extends Pick<CellRendererProps<R, SR>, 'column' | 'colSpan' | 'isCellSelected'> {\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const { summaryFormatter: SummaryFormatter, summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {SummaryFormatter && (\n        <SummaryFormatter column={column} row={row} isCellSelected={isCellSelected} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, row, rowClassname, rowSelectedClassname } from './style';\nimport { getColSpan, getRowStyle } from './utils';\nimport SummaryCell from './SummaryCell';\nimport type { CalculatedColumn, RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<RowRendererProps<R, SR>, 'viewportColumns' | 'rowIdx'>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\nconst summaryRow = css`\n  line-height: var(--rdg-summary-row-height);\n\n  &.${row} > .${cell} {\n    position: sticky;\n  }\n`;\n\nconst summaryRowBorderClassname = css`\n  & > .${cell} {\n    border-top: 2px solid var(--rdg-summary-border-color);\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        { [summaryRowBorderClassname]: rowIdx === 0 },\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(ariaRowIndex),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return target.matches(\n      '.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child'\n    );\n  }\n  return false;\n}\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { getCellStyle, getCellClassname, onEditorNavigation } from './utils';\nimport type { CellRendererProps, EditorProps, Omit } from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  &.rdg-cell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<EditorProps<R, SR>, 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  closeEditor: () => void;\n  scrollToCell: () => void;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  onRowChange,\n  closeEditor,\n  scrollToCell\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (event.key === 'Escape') {\n      event.stopPropagation();\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      event.stopPropagation();\n      onClose(true);\n      scrollToCell();\n    } else {\n      const onNavigation = column.editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) {\n        event.stopPropagation();\n      }\n    }\n  }\n\n  function onClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      onRowChange(row, true);\n    } else {\n      closeEditor();\n    }\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.renderFormatter && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={onKeyDown}\n      onMouseDownCapture={commitOnOutsideClick ? cancelFrameRequest : undefined}\n    >\n      {column.editor != null && (\n        <>\n          <column.editor column={column} row={row} onRowChange={onRowChange} onClose={onClose} />\n          {column.editorOptions?.renderFormatter && (\n            <column.formatter column={column} row={row} isCellSelected onRowChange={onRowChange} />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  cursor: move;\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  width: 8px;\n  height: 8px;\n  background-color: var(--rdg-selection-color);\n\n  &:hover {\n    width: 16px;\n    height: 16px;\n    border: 2px solid var(--rdg-selection-color);\n    background-color: var(--rdg-background-color);\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { forwardRef, useState, useRef, useImperativeHandle, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport {\n  rootClassname,\n  viewportDraggingClassname,\n  focusSinkClassname,\n  cellAutoResizeClassname\n} from './style';\nimport {\n  useLayoutEffect,\n  useGridDimensions,\n  useCalculatedColumns,\n  useViewportColumns,\n  useViewportRows,\n  useLatestFunc,\n  RowSelectionChangeProvider\n} from './hooks';\nimport HeaderRow from './HeaderRow';\nimport Row from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport EditCell from './EditCell';\nimport DragHandle from './DragHandle';\nimport {\n  assertIsValidKeyGetter,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  getColSpan,\n  max,\n  sign,\n  getSelectedCellColSpan\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Position,\n  RowRendererProps,\n  RowsChangeData,\n  SelectRowEvent,\n  FillEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortColumn,\n  RowHeightArgs,\n  Maybe\n} from './types';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'formatter' | 'minWidth' | 'resizable' | 'sortable'\n>;\n\nconst initialPosition: SelectCellState = {\n  idx: -1,\n  rowIdx: -2,\n  mode: 'SELECT'\n};\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  groupBy?: Maybe<readonly string[]>;\n  rowGrouper?: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds?: Maybe<ReadonlySet<unknown>>;\n  onExpandedGroupIdsChange?: Maybe<(expandedGroupIds: Set<unknown>) => void>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Function called whenever a row is double clicked */\n  onRowDoubleClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default 'NONE' */\n  cellNavigationMode?: Maybe<CellNavigationMode>;\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  rowRenderer?: Maybe<React.ComponentType<RowRendererProps<R, SR>>>;\n  noRowsFallback?: React.ReactNode;\n  rowClass?: Maybe<(row: R) => Maybe<string>>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    summaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Event props\n    onRowClick,\n    onRowDoubleClick,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onPaste,\n    // Toggles and modes\n    cellNavigationMode: rawCellNavigationMode,\n    enableVirtualization,\n    // Miscellaneous\n    rowRenderer,\n    noRowsFallback,\n    className,\n    style,\n    rowClass,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  }: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  /**\n   * defaults\n   */\n  rowHeight ??= 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const RowRenderer = rowRenderer ?? Row;\n  const cellNavigationMode = rawCellNavigationMode ?? 'NONE';\n  enableVirtualization ??= true;\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>(\n    initialPosition\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [autoResizeColumn, setAutoResizeColumn] = useState<CalculatedColumn<R, SR> | null>(null);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const rowRef = useRef<HTMLDivElement>(null);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = 1;\n  const summaryRowsCount = summaryRows?.length ?? 0;\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isHeaderRowSelected = selectedPosition.rowIdx === -1;\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    isGroupRow\n  });\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const minRowIdx = -1; // change it to 0?\n  const maxRowIdx = headerRowsCount + rows.length + summaryRowsCount - 2;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const selectRowLatest = useLatestFunc(selectRow);\n  const selectAllRowsLatest = useLatestFunc(selectAllRows);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectViewportCellLatest = useLatestFunc(\n    (row: R, column: CalculatedColumn<R, SR>, enableEditor: Maybe<boolean>) => {\n      const rowIdx = rows.indexOf(row);\n      selectCell({ rowIdx, idx: column.idx }, enableEditor);\n    }\n  );\n  const selectGroupLatest = useLatestFunc((rowIdx: number) => {\n    selectCell({ rowIdx, idx: -1 });\n  });\n  const selectHeaderCellLatest = useLatestFunc((idx: number) => {\n    selectCell({ rowIdx: -1, idx });\n  });\n  const selectSummaryCellLatest = useLatestFunc(\n    (summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n      const rowIdx = summaryRows!.indexOf(summaryRow) + headerRowsCount + rows.length - 1;\n      selectCell({ rowIdx, idx: column.idx });\n    }\n  );\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n\n    if (selectedPosition.idx === -1) {\n      rowRef.current!.focus({ preventScroll: true });\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (autoResizeColumn === null) return;\n    const columnElement = gridRef.current!.querySelector(\n      `[aria-colindex=\"${autoResizeColumn.idx + 1}\"]`\n    )!;\n    const width = columnElement.clientWidth + 2;\n    setColumnWidths((columnWidths) => {\n      const newColumnWidths = new Map(columnWidths);\n      newColumnWidths.set(autoResizeColumn.key, width);\n      return newColumnWidths;\n    });\n    setAutoResizeColumn(null);\n    onColumnResize?.(autoResizeColumn.idx, width);\n  }, [autoResizeColumn, gridRef, onColumnResize]);\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: getRowTop(rowIdx),\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const handleColumnResize = useCallback(\n    (column: CalculatedColumn<R, SR>, width: number | 'auto') => {\n      if (width === 'auto') {\n        setAutoResizeColumn(column);\n        return;\n      }\n      setColumnWidths((columnWidths) => {\n        const newColumnWidths = new Map(columnWidths);\n        newColumnWidths.set(column.key, width);\n        return newColumnWidths;\n      });\n\n      onColumnResize?.(column.idx, width);\n    },\n    [onColumnResize]\n  );\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow({ row, checked, isShiftClick }: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked: boolean) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = hasGroups && event.target === rowRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { key, keyCode } = event;\n    const { rowIdx } = selectedPosition;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      onPaste != null &&\n      isCtrlKeyHeldDown(event) &&\n      !isGroupRow(rows[rowIdx]) &&\n      selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n\n      if (\n        isGroupRow(row) &&\n        selectedPosition.idx === -1 &&\n        // Collapse the current group row if it is focused and is in expanded state\n        ((key === 'ArrowLeft' && row.isExpanded) ||\n          // Expand the current group row if it is focused and is in collapsed state\n          (key === 'ArrowRight' && !row.isExpanded))\n      ) {\n        event.preventDefault(); // Prevents scrolling\n        toggleGroup(row.id);\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    setScrollLeft(scrollLeft);\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column: columns[selectedPosition.idx]\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    setCopiedCell({ row: rawRows[getRawRowIdx(rowIdx)], columnKey: columns[idx].key });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: columns[idx].key\n    });\n\n    updateRow(rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    const column = columns[selectedPosition.idx];\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (isSamePosition(selectedPosition, position)) {\n      // Avoid re-renders if the selected cell state is the same\n      // TODO: replace with a #record? https://github.com/microsoft/TypeScript/issues/39831\n      scrollToCell(position);\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      rowIdx ??= selectedPosition.rowIdx;\n      if (!isCellWithinSelectionBounds({ rowIdx, idx })) return;\n      const { clientWidth } = current;\n      const column = columns[idx];\n      const { left, width } = columnMetrics.get(column)!;\n      let right = left + width;\n\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        summaryRows,\n        rowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan !== undefined) {\n        const { left, width } = columnMetrics.get(columns[column.idx + colSpan - 1])!;\n        right = left + width;\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = left - totalFrozenColumnWidth;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = right - clientWidth;\n      }\n    }\n\n    if (typeof rowIdx === 'number' && isRowIdxWithinViewportBounds(rowIdx)) {\n      const rowTop = getRowTop(rowIdx);\n      const rowHeight = getRowHeight(rowIdx);\n      if (rowTop < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowTop;\n      } else if (rowTop + rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = rowTop + rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (\n      key === 'ArrowLeft' &&\n      isRowSelected &&\n      isGroupRow(row) &&\n      !row.isExpanded &&\n      row.level !== 0\n    ) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case 'ArrowLeft':\n        return { idx: idx - 1, rowIdx };\n      case 'ArrowRight':\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          cellNavigationMode,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE' ? 'CHANGE_ROW' : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      summaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode: mode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getLayoutCssVars() {\n    if (autoResizeColumn === null) return layoutCssVars;\n    const { gridTemplateColumns } = layoutCssVars;\n    const newSizes = gridTemplateColumns.split(' ');\n    newSizes[autoResizeColumn.idx] = 'max-content';\n    return {\n      ...layoutCssVars,\n      gridTemplateColumns: newSizes.join(' ')\n    };\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (\n      selectedPosition.rowIdx !== rowIdx ||\n      selectedPosition.mode === 'EDIT' ||\n      hasGroups || // drag fill is not supported when grouping is enabled\n      onFill == null\n    ) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rawRows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = () => {\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges?: boolean) => {\n      if (commitChanges) {\n        updateRow(selectedPosition.rowIdx, row);\n        closeEditor();\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor();\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        scrollToCell={() => {\n          scrollToCell(selectedPosition);\n        }}\n      />\n    );\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      // selectedIdx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else if (selectedRowIdx === rowIdx && !viewportColumns.includes(selectedColumn)) {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns =\n            selectedIdx > viewportColumns[viewportColumns.length - 1].idx\n              ? [...viewportColumns, selectedColumn]\n              : [\n                  ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n                  selectedColumn,\n                  ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n                ];\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerRowsCount + rowIdx + 1;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        const isGroupRowSelected =\n          isSelectable && row.childRows.every((cr) => selectedRows.has(rowKeyGetter!(cr)));\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={rowColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            row={row}\n            gridRowStart={gridRowStart}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n            isRowSelected={isGroupRowSelected}\n            selectGroup={selectGroupLatest}\n            toggleGroup={toggleGroupLatest}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(\n        <RowRenderer\n          aria-rowindex={headerRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1} // aria-rowindex is 1 based\n          aria-selected={isSelectable ? isRowSelected : undefined}\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          viewportColumns={rowColumns}\n          isRowSelected={isRowSelected}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          rowClass={rowClass}\n          gridRowStart={gridRowStart}\n          height={getRowHeight(rowIdx)}\n          copiedCellIdx={\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined\n          }\n          selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n          draggedOverCellIdx={getDraggedOverCellIdx(rowIdx)}\n          setDraggedOverRowIdx={isDragging ? setDraggedOverRowIdx : undefined}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          onRowChange={handleFormatterRowChangeLatest}\n          selectCell={selectViewportCellLatest}\n          selectedCellDragHandle={getDragHandle(rowIdx)}\n          selectedCellEditor={getCellEditor(rowIdx)}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition(initialPosition);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `${headerRowHeight}px`;\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (summaryRowsCount > 0) {\n    templateRows += ` repeat(${summaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging,\n          [cellAutoResizeClassname]: autoResizeColumn !== null\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-row-width': `${totalColumnWidth}px`,\n          '--rdg-summary-row-height': `${summaryRowHeight}px`,\n          '--rdg-grid-height': `${\n            max(totalRowHeight, clientHeight) +\n            headerRowHeight +\n            summaryRowsCount * summaryRowHeight\n          }px`,\n          ...getLayoutCssVars()\n        } as unknown as React.CSSProperties\n      }\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      {/* extra div is needed for row navigation in a treegrid */}\n      {hasGroups && (\n        <div\n          ref={rowRef}\n          tabIndex={selectedPosition.idx === -1 && selectedPosition.rowIdx !== -2 ? 0 : -1}\n          className={focusSinkClassname}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + 2\n          }}\n          onKeyDown={handleKeyDown}\n        />\n      )}\n      <HeaderRow\n        columns={viewportColumns}\n        onColumnResize={handleColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={selectAllRowsLatest}\n        sortColumns={sortColumns}\n        onSortColumnsChange={onSortColumnsChange}\n        lastFrozenColumnIndex={lastFrozenColumnIndex}\n        selectedCellIdx={isHeaderRowSelected ? selectedPosition.idx : undefined}\n        selectCell={selectHeaderCellLatest}\n        shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n      />\n      {rows.length === 0 && noRowsFallback ? (\n        noRowsFallback\n      ) : (\n        <>\n          <RowSelectionChangeProvider value={selectRowLatest}>\n            {getViewportRows()}\n          </RowSelectionChangeProvider>\n          {summaryRows?.map((row, rowIdx) => {\n            const isSummaryRowSelected =\n              selectedPosition.rowIdx === headerRowsCount + rows.length + rowIdx - 1;\n            const top =\n              clientHeight > totalRowHeight\n                ? gridHeight - summaryRowHeight * (summaryRows.length - rowIdx)\n                : undefined;\n            const bottom =\n              top === undefined ? summaryRowHeight * (summaryRows.length - 1 - rowIdx) : undefined;\n\n            return (\n              <SummaryRow\n                aria-rowindex={headerRowsCount + rowsCount + rowIdx + 1}\n                key={rowIdx}\n                rowIdx={rowIdx}\n                row={row}\n                top={top}\n                bottom={bottom}\n                viewportColumns={viewportColumns}\n                lastFrozenColumnIndex={lastFrozenColumnIndex}\n                selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                selectCell={selectSummaryCellLatest}\n              />\n            );\n          })}\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions(): [\n  ref: React.RefObject<HTMLDivElement>,\n  width: number,\n  height: number\n] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [gridWidth, setGridWidth] = useState(1);\n  const [gridHeight, setGridHeight] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jest/jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const resizeObserver = new ResizeObserver(() => {\n      // Get dimensions without scrollbars.\n      // The dimensions given by the callback entries in Firefox do not substract the scrollbar sizes.\n      const { clientWidth, clientHeight } = gridRef.current!;\n      // TODO: remove once fixed upstream\n      // we reduce width by 1px here to avoid layout issues in Chrome\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=1206298\n      setGridWidth(clientWidth - (devicePixelRatio % 1 === 0 ? 0 : 1));\n      setGridHeight(clientHeight);\n    });\n\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, gridWidth, gridHeight];\n}\n","import { useMemo } from 'react';\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, Maybe, RowHeightArgs } from '../types';\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds: Maybe<ReadonlySet<unknown>>;\n  enableVirtualization: boolean;\n}\n\n// TODO: https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (summaryRows != null) {\n        for (const row of summaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { css } from '@linaria/core';\nimport { row } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  ${lightTheme}\n  --rdg-selection-color: #66afe9;\n  --rdg-frozen-cell-box-shadow: 2px 0 5px -2px rgba(136, 136, 136, 0.3);\n  --rdg-font-size: 14px;\n\n  display: grid;\n\n  color-scheme: var(--rdg-color-scheme, light dark);\n\n  /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n  /* We set a stacking context so internal elements don't render on top of external components. */\n  contain: strict;\n  contain: size layout style paint;\n  content-visibility: auto;\n  height: 350px;\n  border: 1px solid var(--rdg-border-color);\n  box-sizing: border-box;\n  overflow: auto;\n  user-select: none;\n  background-color: var(--rdg-background-color);\n  color: var(--rdg-color);\n  font-size: var(--rdg-font-size);\n  direction: ltr;\n\n  /* set stacking context in safari */\n  @supports not (contain: strict) {\n    position: relative;\n    z-index: 0;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n\n  /* needed on Firefox */\n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    height: var(--rdg-grid-height);\n    width: var(--rdg-row-width);\n  }\n\n  &.rdg-dark {\n    --rdg-color-scheme: dark;\n    ${darkTheme}\n  }\n\n  &.rdg-light {\n    --rdg-color-scheme: light;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    &:not(.rdg-light) {\n      ${darkTheme}\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  &.${row} {\n    cursor: move;\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  position: sticky;\n  left: 0;\n  grid-column-start: 1;\n`;\n","import { cloneElement } from 'react';\nimport type { ReactElement } from 'react';\n\nimport type { DataGridProps } from '../../src';\n\nexport async function exportToCsv<R, SR>(\n  gridElement: ReactElement<DataGridProps<R, SR>>,\n  fileName: string\n) {\n  const { head, body, foot } = await getGridContent(gridElement);\n  const content = [...head, ...body, ...foot]\n    .map((cells) => cells.map(serialiseCellValue).join(','))\n    .join('\\n');\n\n  downloadFile(fileName, new Blob([content], { type: 'text/csv;charset=utf-8;' }));\n}\n\nexport async function exportToXlsx<R, SR>(\n  gridElement: ReactElement<DataGridProps<R, SR>>,\n  fileName: string\n) {\n  const [{ utils, writeFile }, { head, body, foot }] = await Promise.all([\n    import('xlsx'),\n    getGridContent(gridElement)\n  ]);\n  const wb = utils.book_new();\n  const ws = utils.aoa_to_sheet([...head, ...body, ...foot]);\n  utils.book_append_sheet(wb, ws, 'Sheet 1');\n  writeFile(wb, fileName);\n}\n\nexport async function exportToPdf<R, SR>(\n  gridElement: ReactElement<DataGridProps<R, SR>>,\n  fileName: string\n) {\n  const [{ jsPDF }, autoTable, { head, body, foot }] = await Promise.all([\n    import('jspdf'),\n    (await import('jspdf-autotable')).default,\n    await getGridContent(gridElement)\n  ]);\n  const doc = new jsPDF({\n    orientation: 'l',\n    unit: 'px'\n  });\n\n  autoTable(doc, {\n    head,\n    body,\n    foot,\n    horizontalPageBreak: true,\n    styles: { cellPadding: 1.5, fontSize: 8, cellWidth: 'wrap' },\n    tableWidth: 'wrap'\n  });\n  doc.save(fileName);\n}\n\nasync function getGridContent<R, SR>(gridElement: ReactElement<DataGridProps<R, SR>>) {\n  const { renderToStaticMarkup } = await import('react-dom/server');\n  const grid = document.createElement('div');\n  grid.innerHTML = renderToStaticMarkup(\n    cloneElement(gridElement, {\n      enableVirtualization: false\n    })\n  );\n\n  return {\n    head: getRows('.rdg-header-row'),\n    body: getRows('.rdg-row:not(.rdg-summary-row)'),\n    foot: getRows('.rdg-summary-row')\n  };\n\n  function getRows(selector: string) {\n    return Array.from(grid.querySelectorAll<HTMLDivElement>(selector)).map((gridRow) => {\n      return Array.from(gridRow.querySelectorAll<HTMLDivElement>('.rdg-cell')).map(\n        (gridCell) => gridCell.innerText\n      );\n    });\n  }\n}\n\nfunction serialiseCellValue(value: unknown) {\n  if (typeof value === 'string') {\n    const formattedValue = value.replace(/\"/g, '\"\"');\n    return formattedValue.includes(',') ? `\"${formattedValue}\"` : formattedValue;\n  }\n  return value;\n}\n\nfunction downloadFile(fileName: string, data: Blob) {\n  const downloadLink = document.createElement('a');\n  downloadLink.download = fileName;\n  const url = URL.createObjectURL(data);\n  downloadLink.href = url;\n  downloadLink.click();\n  URL.revokeObjectURL(url);\n}\n","import { useState, useMemo } from 'react';\nimport { createPortal } from 'react-dom';\nimport { css } from '@linaria/core';\nimport faker from 'faker';\n\nimport DataGrid, { SelectColumn, TextEditor, SelectCellFormatter } from '../../src';\nimport type { Column, SortColumn } from '../../src';\nimport { stopPropagation } from '../../src/utils';\nimport { exportToCsv, exportToXlsx, exportToPdf } from './exportUtils';\nimport { textEditorClassname } from '../../src/editors/TextEditor';\n\nconst toolbarClassname = css`\n  text-align: right;\n  margin-bottom: 8px;\n`;\n\nconst dialogContainerClassname = css`\n  position: absolute;\n  inset: 0;\n  display: flex;\n  place-items: center;\n  background: rgba(0, 0, 0, 0.1);\n\n  > dialog {\n    width: 300px;\n    > input {\n      width: 100%;\n    }\n\n    > menu {\n      text-align: right;\n    }\n  }\n`;\n\nconst dateFormatter = new Intl.DateTimeFormat(navigator.language);\nconst currencyFormatter = new Intl.NumberFormat(navigator.language, {\n  style: 'currency',\n  currency: 'eur'\n});\n\nfunction TimestampFormatter({ timestamp }: { timestamp: number }) {\n  return <>{dateFormatter.format(timestamp)}</>;\n}\n\nfunction CurrencyFormatter({ value }: { value: number }) {\n  return <>{currencyFormatter.format(value)}</>;\n}\n\ninterface SummaryRow {\n  id: string;\n  totalCount: number;\n  yesCount: number;\n}\n\ninterface Row {\n  id: number;\n  title: string;\n  client: string;\n  area: string;\n  country: string;\n  contact: string;\n  assignee: string;\n  progress: number;\n  startTimestamp: number;\n  endTimestamp: number;\n  budget: number;\n  transaction: string;\n  account: string;\n  version: string;\n  available: boolean;\n}\n\nfunction getColumns(countries: string[]): readonly Column<Row, SummaryRow>[] {\n  return [\n    SelectColumn,\n    {\n      key: 'id',\n      name: 'ID',\n      width: 60,\n      frozen: true,\n      resizable: false,\n      summaryFormatter() {\n        return <strong>Total</strong>;\n      }\n    },\n    {\n      key: 'title',\n      name: 'Task',\n      width: 120,\n      frozen: true,\n      editor: TextEditor,\n      summaryFormatter({ row }) {\n        return <>{row.totalCount} records</>;\n      }\n    },\n    {\n      key: 'client',\n      name: 'Client',\n      width: 220,\n      editor: TextEditor\n    },\n    {\n      key: 'area',\n      name: 'Area',\n      width: 120,\n      editor: TextEditor\n    },\n    {\n      key: 'country',\n      name: 'Country',\n      width: 180,\n      editor: (p) => (\n        <select\n          autoFocus\n          className={textEditorClassname}\n          value={p.row.country}\n          onChange={(e) => p.onRowChange({ ...p.row, country: e.target.value }, true)}\n        >\n          {countries.map((country) => (\n            <option key={country}>{country}</option>\n          ))}\n        </select>\n      ),\n      editorOptions: {\n        editOnClick: true\n      }\n    },\n    {\n      key: 'contact',\n      name: 'Contact',\n      width: 160,\n      editor: TextEditor\n    },\n    {\n      key: 'assignee',\n      name: 'Assignee',\n      width: 150,\n      editor: TextEditor\n    },\n    {\n      key: 'progress',\n      name: 'Completion',\n      width: 110,\n      formatter(props) {\n        const value = props.row.progress;\n        return (\n          <>\n            <progress max={100} value={value} style={{ width: 50 }} /> {Math.round(value)}%\n          </>\n        );\n      },\n      editor({ row, onRowChange, onClose }) {\n        return createPortal(\n          <div\n            className={dialogContainerClassname}\n            onKeyDown={(event) => {\n              if (event.key === 'Escape') {\n                onClose();\n              }\n            }}\n          >\n            <dialog open>\n              <input\n                autoFocus\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                value={row.progress}\n                onChange={(e) => onRowChange({ ...row, progress: e.target.valueAsNumber })}\n              />\n              <menu>\n                <button onClick={() => onClose()}>Cancel</button>\n                <button onClick={() => onClose(true)}>Save</button>\n              </menu>\n            </dialog>\n          </div>,\n          document.body\n        );\n      },\n      editorOptions: {\n        renderFormatter: true\n      }\n    },\n    {\n      key: 'startTimestamp',\n      name: 'Start date',\n      width: 100,\n      formatter(props) {\n        return <TimestampFormatter timestamp={props.row.startTimestamp} />;\n      }\n    },\n    {\n      key: 'endTimestamp',\n      name: 'Deadline',\n      width: 100,\n      formatter(props) {\n        return <TimestampFormatter timestamp={props.row.endTimestamp} />;\n      }\n    },\n    {\n      key: 'budget',\n      name: 'Budget',\n      width: 100,\n      formatter(props) {\n        return <CurrencyFormatter value={props.row.budget} />;\n      }\n    },\n    {\n      key: 'transaction',\n      name: 'Transaction type'\n    },\n    {\n      key: 'account',\n      name: 'Account',\n      width: 150\n    },\n    {\n      key: 'version',\n      name: 'Version',\n      editor: TextEditor\n    },\n    {\n      key: 'available',\n      name: 'Available',\n      width: 80,\n      formatter({ row, onRowChange, isCellSelected }) {\n        return (\n          <SelectCellFormatter\n            value={row.available}\n            onChange={() => {\n              onRowChange({ ...row, available: !row.available });\n            }}\n            onClick={stopPropagation}\n            isCellSelected={isCellSelected}\n          />\n        );\n      },\n      summaryFormatter({ row: { yesCount, totalCount } }) {\n        return <>{`${Math.floor((100 * yesCount) / totalCount)}% ✔️`}</>;\n      }\n    }\n  ];\n}\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nfunction createRows(): readonly Row[] {\n  const now = Date.now();\n  const rows: Row[] = [];\n\n  for (let i = 0; i < 1000; i++) {\n    rows.push({\n      id: i,\n      title: `Task #${i + 1}`,\n      client: faker.company.companyName(),\n      area: faker.name.jobArea(),\n      country: faker.address.country(),\n      contact: faker.internet.exampleEmail(),\n      assignee: faker.name.findName(),\n      progress: Math.random() * 100,\n      startTimestamp: now - Math.round(Math.random() * 1e10),\n      endTimestamp: now + Math.round(Math.random() * 1e10),\n      budget: 500 + Math.random() * 10500,\n      transaction: faker.finance.transactionType(),\n      account: faker.finance.iban(),\n      version: faker.system.semver(),\n      available: Math.random() > 0.5\n    });\n  }\n\n  return rows;\n}\n\ntype Comparator = (a: Row, b: Row) => number;\nfunction getComparator(sortColumn: string): Comparator {\n  switch (sortColumn) {\n    case 'assignee':\n    case 'title':\n    case 'client':\n    case 'area':\n    case 'country':\n    case 'contact':\n    case 'transaction':\n    case 'account':\n    case 'version':\n      return (a, b) => {\n        return a[sortColumn].localeCompare(b[sortColumn]);\n      };\n    case 'available':\n      return (a, b) => {\n        return a[sortColumn] === b[sortColumn] ? 0 : a[sortColumn] ? 1 : -1;\n      };\n    case 'id':\n    case 'progress':\n    case 'startTimestamp':\n    case 'endTimestamp':\n    case 'budget':\n      return (a, b) => {\n        return a[sortColumn] - b[sortColumn];\n      };\n    default:\n      throw new Error(`unsupported sortColumn: \"${sortColumn}\"`);\n  }\n}\n\nexport default function CommonFeatures() {\n  const [rows, setRows] = useState(createRows);\n  const [sortColumns, setSortColumns] = useState<readonly SortColumn[]>([]);\n  const [selectedRows, setSelectedRows] = useState<ReadonlySet<number>>(() => new Set());\n\n  const countries = useMemo(() => {\n    return [...new Set(rows.map((r) => r.country))].sort(new Intl.Collator().compare);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const columns = useMemo(() => getColumns(countries), [countries]);\n\n  const summaryRows = useMemo(() => {\n    const summaryRow: SummaryRow = {\n      id: 'total_0',\n      totalCount: rows.length,\n      yesCount: rows.filter((r) => r.available).length\n    };\n    return [summaryRow];\n  }, [rows]);\n\n  const sortedRows = useMemo((): readonly Row[] => {\n    if (sortColumns.length === 0) return rows;\n\n    const sortedRows = [...rows];\n    sortedRows.sort((a, b) => {\n      for (const sort of sortColumns) {\n        const comparator = getComparator(sort.columnKey);\n        const compResult = comparator(a, b);\n        if (compResult !== 0) {\n          return sort.direction === 'ASC' ? compResult : -compResult;\n        }\n      }\n      return 0;\n    });\n    return sortedRows;\n  }, [rows, sortColumns]);\n\n  const gridElement = (\n    <DataGrid\n      rowKeyGetter={rowKeyGetter}\n      columns={columns}\n      rows={sortedRows}\n      defaultColumnOptions={{\n        sortable: true,\n        resizable: true\n      }}\n      selectedRows={selectedRows}\n      onSelectedRowsChange={setSelectedRows}\n      onRowsChange={setRows}\n      sortColumns={sortColumns}\n      onSortColumnsChange={setSortColumns}\n      summaryRows={summaryRows}\n      className=\"fill-grid\"\n    />\n  );\n\n  return (\n    <>\n      <div className={toolbarClassname}>\n        <ExportButton onExport={() => exportToCsv(gridElement, 'CommonFeatures.csv')}>\n          Export to CSV\n        </ExportButton>\n        <ExportButton onExport={() => exportToXlsx(gridElement, 'CommonFeatures.xlsx')}>\n          Export to XSLX\n        </ExportButton>\n        <ExportButton onExport={() => exportToPdf(gridElement, 'CommonFeatures.pdf')}>\n          Export to PDF\n        </ExportButton>\n      </div>\n      {gridElement}\n    </>\n  );\n}\n\nfunction ExportButton({\n  onExport,\n  children\n}: {\n  onExport: () => Promise<unknown>;\n  children: React.ReactChild;\n}) {\n  const [exporting, setExporting] = useState(false);\n  return (\n    <button\n      disabled={exporting}\n      onClick={async () => {\n        setExporting(true);\n        await onExport();\n        setExporting(false);\n      }}\n    >\n      {exporting ? 'Exporting' : children}\n    </button>\n  );\n}\n","import { textEditorClassname } from '../../../../src/editors/TextEditor';\nimport type { EditorProps } from '../../../../src';\nimport type { Row } from '../../AllFeatures';\n\nconst titles = ['Dr.', 'Mr.', 'Mrs.', 'Miss', 'Ms.'] as const;\n\nexport default function DropDownEditor({ row, onRowChange }: EditorProps<Row>) {\n  return (\n    <select\n      className={textEditorClassname}\n      value={row.title}\n      onChange={(event) => onRowChange({ ...row, title: event.target.value }, true)}\n      autoFocus\n    >\n      {titles.map((title) => (\n        <option key={title} value={title}>\n          {title}\n        </option>\n      ))}\n    </select>\n  );\n}\n","import { css } from '@linaria/core';\n\nconst wrapperClassname = css`\n  display: flex;\n  justify-content: space-around;\n`;\n\nconst imageCellClassname = css`\n  background: #efefef;\n  background-size: 100%;\n  display: inline-block;\n  height: 28px;\n  width: 28px;\n  vertical-align: middle;\n  background-position: center;\n`;\n\ninterface Props {\n  /** image url, used as background-image */\n  value: string;\n}\n\nexport function ImageFormatter({ value }: Props) {\n  return (\n    <div className={wrapperClassname}>\n      <div className={imageCellClassname} style={{ backgroundImage: `url(${value})` }} />\n    </div>\n  );\n}\n","import faker from 'faker';\nimport { useState } from 'react';\nimport { css } from '@linaria/core';\nimport DataGrid, { SelectColumn, TextEditor } from '../../src';\nimport type { Column, FillEvent, PasteEvent } from '../../src';\nimport DropDownEditor from './components/Editors/DropDownEditor';\nimport { ImageFormatter } from './components/Formatters';\n\nconst highlightClassname = css`\n  .rdg-cell {\n    background-color: #9370db;\n    color: white;\n  }\n\n  &:hover .rdg-cell {\n    background-color: #800080;\n  }\n`;\n\nexport interface Row {\n  id: string;\n  avatar: string;\n  email: string;\n  title: string;\n  firstName: string;\n  lastName: string;\n  street: string;\n  zipCode: string;\n  date: string;\n  bs: string;\n  catchPhrase: string;\n  companyName: string;\n  words: string;\n  sentence: string;\n}\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nfaker.locale = 'en_GB';\n\nconst columns: readonly Column<Row>[] = [\n  SelectColumn,\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80,\n    resizable: true,\n    frozen: true\n  },\n  {\n    key: 'avatar',\n    name: 'Avatar',\n    width: 40,\n    resizable: true,\n    headerRenderer: () => <ImageFormatter value={faker.image.cats()} />,\n    formatter: ({ row }) => <ImageFormatter value={row.avatar} />\n  },\n  {\n    key: 'title',\n    name: 'Title',\n    width: 200,\n    resizable: true,\n    formatter(props) {\n      return <>{props.row.title}</>;\n    },\n    editor: DropDownEditor,\n    editorOptions: {\n      editOnClick: true\n    }\n  },\n  {\n    key: 'firstName',\n    name: 'First Name',\n    width: 200,\n    resizable: true,\n    frozen: true,\n    editor: TextEditor\n  },\n  {\n    key: 'lastName',\n    name: 'Last Name',\n    width: 200,\n    resizable: true,\n    frozen: true,\n    editor: TextEditor\n  },\n  {\n    key: 'email',\n    name: 'Email',\n    width: 200,\n    resizable: true,\n    editor: TextEditor\n  },\n  {\n    key: 'street',\n    name: 'Street',\n    width: 200,\n    resizable: true,\n    editor: TextEditor\n  },\n  {\n    key: 'zipCode',\n    name: 'ZipCode',\n    width: 200,\n    resizable: true,\n    editor: TextEditor\n  },\n  {\n    key: 'date',\n    name: 'Date',\n    width: 200,\n    resizable: true,\n    editor: TextEditor\n  },\n  {\n    key: 'bs',\n    name: 'bs',\n    width: 200,\n    resizable: true,\n    editor: TextEditor\n  },\n  {\n    key: 'catchPhrase',\n    name: 'Catch Phrase',\n    width: 200,\n    resizable: true,\n    editor: TextEditor\n  },\n  {\n    key: 'companyName',\n    name: 'Company Name',\n    width: 200,\n    resizable: true,\n    editor: TextEditor\n  },\n  {\n    key: 'sentence',\n    name: 'Sentence',\n    width: 200,\n    resizable: true,\n    editor: TextEditor\n  }\n];\n\nfunction createRows(): Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 0; i < 2000; i++) {\n    rows.push({\n      id: `id_${i}`,\n      avatar: faker.image.avatar(),\n      email: faker.internet.email(),\n      title: faker.name.prefix(),\n      firstName: faker.name.firstName(),\n      lastName: faker.name.lastName(),\n      street: faker.address.streetName(),\n      zipCode: faker.address.zipCode(),\n      date: faker.date.past().toLocaleDateString(),\n      bs: faker.company.bs(),\n      catchPhrase: faker.company.catchPhrase(),\n      companyName: faker.company.companyName(),\n      words: faker.lorem.words(),\n      sentence: faker.lorem.sentence()\n    });\n  }\n\n  return rows;\n}\n\nexport default function AllFeatures() {\n  const [rows, setRows] = useState(createRows);\n  const [selectedRows, setSelectedRows] = useState<ReadonlySet<string>>(() => new Set());\n\n  function handleFill({ columnKey, sourceRow, targetRow }: FillEvent<Row>): Row {\n    return { ...targetRow, [columnKey]: sourceRow[columnKey as keyof Row] };\n  }\n\n  function handlePaste({\n    sourceColumnKey,\n    sourceRow,\n    targetColumnKey,\n    targetRow\n  }: PasteEvent<Row>): Row {\n    const incompatibleColumns = ['email', 'zipCode', 'date'];\n    if (\n      sourceColumnKey === 'avatar' ||\n      ['id', 'avatar'].includes(targetColumnKey) ||\n      ((incompatibleColumns.includes(targetColumnKey) ||\n        incompatibleColumns.includes(sourceColumnKey)) &&\n        sourceColumnKey !== targetColumnKey)\n    ) {\n      return targetRow;\n    }\n\n    return { ...targetRow, [targetColumnKey]: sourceRow[sourceColumnKey as keyof Row] };\n  }\n\n  return (\n    <DataGrid\n      columns={columns}\n      rows={rows}\n      rowKeyGetter={rowKeyGetter}\n      onRowsChange={setRows}\n      onFill={handleFill}\n      onPaste={handlePaste}\n      rowHeight={30}\n      selectedRows={selectedRows}\n      onSelectedRowsChange={setSelectedRows}\n      className=\"fill-grid\"\n      rowClass={(row) => (row.id.includes('7') ? highlightClassname : undefined)}\n    />\n  );\n}\n","import { useState } from 'react';\n\nimport DataGrid from '../../src';\nimport type { Column, CellNavigationMode } from '../../src';\n\ninterface Row {\n  id: number;\n  task: string;\n  complete: number;\n  priority: string;\n  issueType: string;\n  startDate: string;\n  completeDate: string;\n}\n\nconst columns: Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80\n  },\n  {\n    key: 'task',\n    name: 'Title'\n  },\n  {\n    key: 'priority',\n    name: 'Priority'\n  },\n  {\n    key: 'issueType',\n    name: 'Issue Type'\n  },\n  {\n    key: 'complete',\n    name: '% Complete'\n  },\n  {\n    key: 'startDate',\n    name: 'Start Date'\n  },\n  {\n    key: 'completeDate',\n    name: 'Expected Complete',\n    width: 200\n  }\n];\n\nfunction getRandomDate(start: Date, end: Date) {\n  return new Date(\n    start.getTime() + Math.random() * (end.getTime() - start.getTime())\n  ).toLocaleDateString();\n}\n\nfunction createRows(): Row[] {\n  const rows = [];\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.floor(Math.random() * 3 + 1)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.floor(Math.random() * 3 + 1)],\n      startDate: getRandomDate(new Date(2015, 3, 1), new Date()),\n      completeDate: getRandomDate(new Date(), new Date(2016, 0, 1))\n    });\n  }\n\n  return rows;\n}\n\nexport default function CellNavigation() {\n  const [rows] = useState(createRows);\n  const [cellNavigationMode, setCellNavigationMode] = useState<CellNavigationMode>('CHANGE_ROW');\n\n  return (\n    <>\n      <div style={{ marginBottom: 5 }}>\n        Cell Navigation Modes:\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'NONE'}\n            onChange={() => setCellNavigationMode('NONE')}\n          />\n          None\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'CHANGE_ROW'}\n            onChange={() => setCellNavigationMode('CHANGE_ROW')}\n          />\n          Change Row\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'LOOP_OVER_ROW'}\n            onChange={() => setCellNavigationMode('LOOP_OVER_ROW')}\n          />\n          Loop Over Row\n        </label>\n      </div>\n      <DataGrid columns={columns} rows={rows} cellNavigationMode={cellNavigationMode} />\n    </>\n  );\n}\n","import { useMemo } from 'react';\nimport { css } from '@linaria/core';\n\nimport DataGrid from '../../src';\nimport type { Column, FormatterProps } from '../../src';\n\ntype Row = number;\nconst rows: readonly Row[] = [...Array(100).keys()];\n\nconst colSpanClassname = css`\n  background-color: #ffb300;\n  color: black;\n  text-align: center;\n`;\n\nfunction CellFormatter(props: FormatterProps<Row>) {\n  return (\n    <>\n      {props.column.key}&times;{props.row}\n    </>\n  );\n}\n\nexport default function ColumnSpanning() {\n  const columns = useMemo((): readonly Column<Row>[] => {\n    const columns: Column<Row>[] = [];\n\n    for (let i = 0; i < 30; i++) {\n      const key = String(i);\n      columns.push({\n        key,\n        name: key,\n        frozen: i < 5,\n        resizable: true,\n        formatter: CellFormatter,\n        colSpan(args) {\n          if (args.type === 'ROW') {\n            if (key === '2' && args.row === 2) return 3;\n            if (key === '4' && args.row === 4) return 6; // Will not work as colspan includes both frozen and regular columns\n            if (key === '0' && args.row === 5) return 5;\n            if (key === '27' && args.row === 8) return 3;\n            if (key === '6' && args.row < 8) return 2;\n          }\n          if (args.type === 'HEADER' && key === '8') {\n            return 3;\n          }\n          return undefined;\n        },\n        cellClass(row) {\n          if (\n            (key === '0' && row === 5) ||\n            (key === '2' && row === 2) ||\n            (key === '27' && row === 8) ||\n            (key === '6' && row < 8)\n          ) {\n            return colSpanClassname;\n          }\n          return undefined;\n        }\n      });\n    }\n\n    return columns;\n  }, []);\n\n  return <DataGrid columns={columns} rows={rows} rowHeight={22} className=\"fill-grid\" />;\n}\n","import { useDrag, useDrop } from 'react-dnd';\n\nimport { SortableHeaderCell } from '../../../../src';\nimport type { HeaderRendererProps } from '../../../../src';\n\ninterface DraggableHeaderRendererProps<R> extends HeaderRendererProps<R> {\n  onColumnsReorder: (sourceKey: string, targetKey: string) => void;\n}\n\nexport function DraggableHeaderRenderer<R>({\n  onColumnsReorder,\n  column,\n  sortDirection,\n  onSort,\n  priority,\n  isCellSelected\n}: DraggableHeaderRendererProps<R>) {\n  const [{ isDragging }, drag] = useDrag({\n    type: 'COLUMN_DRAG',\n    item: { key: column.key },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n\n  const [{ isOver }, drop] = useDrop({\n    accept: 'COLUMN_DRAG',\n    drop({ key }: { key: string }) {\n      onColumnsReorder(key, column.key);\n    },\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  });\n\n  return (\n    <div\n      ref={(ref) => {\n        drag(ref);\n        drop(ref);\n      }}\n      style={{\n        opacity: isDragging ? 0.5 : 1,\n        backgroundColor: isOver ? '#ececec' : undefined,\n        cursor: 'move'\n      }}\n    >\n      <SortableHeaderCell\n        sortDirection={sortDirection}\n        onSort={onSort}\n        priority={priority}\n        isCellSelected={isCellSelected}\n      >\n        {column.name}\n      </SortableHeaderCell>\n    </div>\n  );\n}\n","import { useState, useMemo, useCallback } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nimport { DraggableHeaderRenderer } from './components/HeaderRenderers';\nimport DataGrid from '../../src';\nimport type { Column, HeaderRendererProps, SortColumn } from '../../src';\n\ninterface Row {\n  id: number;\n  task: string;\n  complete: number;\n  priority: string;\n  issueType: string;\n}\n\nfunction createRows(): Row[] {\n  const rows = [];\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.round(Math.random() * 3)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.round(Math.random() * 3)]\n    });\n  }\n\n  return rows;\n}\n\nfunction createColumns(): Column<Row>[] {\n  return [\n    {\n      key: 'id',\n      name: 'ID',\n      width: 80\n    },\n    {\n      key: 'task',\n      name: 'Title',\n      resizable: true,\n      sortable: true\n    },\n    {\n      key: 'priority',\n      name: 'Priority',\n      resizable: true,\n      sortable: true\n    },\n    {\n      key: 'issueType',\n      name: 'Issue Type',\n      resizable: true,\n      sortable: true\n    },\n    {\n      key: 'complete',\n      name: '% Complete',\n      resizable: true,\n      sortable: true\n    }\n  ];\n}\n\nexport default function ColumnsReordering() {\n  const [rows] = useState(createRows);\n  const [columns, setColumns] = useState(createColumns);\n  const [sortColumns, setSortColumns] = useState<readonly SortColumn[]>([]);\n  const onSortColumnsChange = useCallback((sortColumns: SortColumn[]) => {\n    setSortColumns(sortColumns.slice(-1));\n  }, []);\n\n  const draggableColumns = useMemo(() => {\n    function HeaderRenderer(props: HeaderRendererProps<Row>) {\n      return <DraggableHeaderRenderer {...props} onColumnsReorder={handleColumnsReorder} />;\n    }\n\n    function handleColumnsReorder(sourceKey: string, targetKey: string) {\n      const sourceColumnIndex = columns.findIndex((c) => c.key === sourceKey);\n      const targetColumnIndex = columns.findIndex((c) => c.key === targetKey);\n      const reorderedColumns = [...columns];\n\n      reorderedColumns.splice(\n        targetColumnIndex,\n        0,\n        reorderedColumns.splice(sourceColumnIndex, 1)[0]\n      );\n\n      setColumns(reorderedColumns);\n    }\n\n    return columns.map((c) => {\n      if (c.key === 'id') return c;\n      return { ...c, headerRenderer: HeaderRenderer };\n    });\n  }, [columns]);\n\n  const sortedRows = useMemo((): readonly Row[] => {\n    if (sortColumns.length === 0) return rows;\n    const { columnKey, direction } = sortColumns[0];\n\n    let sortedRows: Row[] = [...rows];\n\n    switch (columnKey) {\n      case 'task':\n      case 'priority':\n      case 'issueType':\n        sortedRows = sortedRows.sort((a, b) => a[columnKey].localeCompare(b[columnKey]));\n        break;\n      case 'complete':\n        sortedRows = sortedRows.sort((a, b) => a[columnKey] - b[columnKey]);\n        break;\n      default:\n    }\n    return direction === 'DESC' ? sortedRows.reverse() : sortedRows;\n  }, [rows, sortColumns]);\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <DataGrid\n        columns={draggableColumns}\n        rows={sortedRows}\n        sortColumns={sortColumns}\n        onSortColumnsChange={onSortColumnsChange}\n      />\n    </DndProvider>\n  );\n}\n","import { useState, useReducer } from 'react';\nimport { createPortal } from 'react-dom';\nimport faker from 'faker';\nimport { ContextMenu, MenuItem, SubMenu, ContextMenuTrigger } from 'react-contextmenu';\nimport { css } from '@linaria/core';\n\nimport DataGrid, { Row as GridRow } from '../../src';\nimport type { Column, RowRendererProps } from '../../src';\n\ncss`\n  @at-root {\n    .react-contextmenu-wrapper {\n      display: contents;\n    }\n\n    .react-contextmenu {\n      background-color: #fff;\n      background-clip: padding-box;\n      border: 1px solid rgba(0, 0, 0, 0.15);\n      border-radius: 0.25rem;\n      color: #373a3c;\n      font-size: 16px;\n      margin: 2px 0 0;\n      min-width: 160px;\n      outline: none;\n      opacity: 0;\n      padding: 5px 0;\n      pointer-events: none;\n      text-align: left;\n      transition: opacity 250ms ease !important;\n    }\n\n    .react-contextmenu.react-contextmenu--visible {\n      opacity: 1;\n      pointer-events: auto;\n    }\n\n    .react-contextmenu-item {\n      background: 0 0;\n      border: 0;\n      color: #373a3c;\n      cursor: pointer;\n      font-weight: 400;\n      line-height: 1.5;\n      padding: 3px 20px;\n      text-align: inherit;\n      white-space: nowrap;\n    }\n\n    .react-contextmenu-item.react-contextmenu-item--active,\n    .react-contextmenu-item.react-contextmenu-item--selected {\n      color: #fff;\n      background-color: #20a0ff;\n      border-color: #20a0ff;\n      text-decoration: none;\n    }\n\n    .react-contextmenu-item.react-contextmenu-item--disabled,\n    .react-contextmenu-item.react-contextmenu-item--disabled:hover {\n      background-color: transparent;\n      border-color: rgba(0, 0, 0, 0.15);\n      color: #878a8c;\n    }\n\n    .react-contextmenu-item--divider {\n      border-bottom: 1px solid rgba(0, 0, 0, 0.15);\n      cursor: inherit;\n      margin-bottom: 3px;\n      padding: 2px 0;\n    }\n\n    .react-contextmenu-item--divider:hover {\n      background-color: transparent;\n      border-color: rgba(0, 0, 0, 0.15);\n    }\n\n    .react-contextmenu-item.react-contextmenu-submenu {\n      padding: 0;\n    }\n\n    .react-contextmenu-item.react-contextmenu-submenu > .react-contextmenu-item::after {\n      content: '▶';\n      display: inline-block;\n      position: absolute;\n      right: 7px;\n    }\n\n    .example-multiple-targets::after {\n      content: attr(data-count);\n      display: block;\n    }\n  }\n`;\n\ninterface Row {\n  id: number;\n  product: string;\n  price: string;\n}\n\nfunction createRows(): Row[] {\n  const rows = [];\n  for (let i = 1; i < 1000; i++) {\n    rows.push({\n      id: i,\n      product: faker.commerce.productName(),\n      price: faker.commerce.price()\n    });\n  }\n  return rows;\n}\n\nconst columns: readonly Column<Row>[] = [\n  { key: 'id', name: 'ID' },\n  { key: 'product', name: 'Product' },\n  { key: 'price', name: 'Price' }\n];\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nfunction RowRenderer(props: RowRendererProps<Row>) {\n  return (\n    <ContextMenuTrigger id=\"grid-context-menu\" collect={() => ({ rowIdx: props.rowIdx })}>\n      <GridRow {...props} />\n    </ContextMenuTrigger>\n  );\n}\n\nexport default function ContextMenuDemo() {\n  const [rows, setRows] = useState(createRows);\n  const [nextId, setNextId] = useReducer((id: number) => id + 1, rows[rows.length - 1].id + 1);\n\n  function onRowDelete(e: React.MouseEvent<HTMLDivElement>, { rowIdx }: { rowIdx: number }) {\n    setRows([...rows.slice(0, rowIdx), ...rows.slice(rowIdx + 1)]);\n  }\n\n  function onRowInsertAbove(e: React.MouseEvent<HTMLDivElement>, { rowIdx }: { rowIdx: number }) {\n    insertRow(rowIdx);\n  }\n\n  function onRowInsertBelow(e: React.MouseEvent<HTMLDivElement>, { rowIdx }: { rowIdx: number }) {\n    insertRow(rowIdx + 1);\n  }\n\n  function insertRow(insertRowIdx: number) {\n    const newRow: Row = {\n      id: nextId,\n      product: faker.commerce.productName(),\n      price: faker.commerce.price()\n    };\n\n    setRows([...rows.slice(0, insertRowIdx), newRow, ...rows.slice(insertRowIdx)]);\n    setNextId();\n  }\n\n  return (\n    <>\n      <DataGrid\n        rowKeyGetter={rowKeyGetter}\n        columns={columns}\n        rows={rows}\n        rowRenderer={RowRenderer}\n        className=\"fill-grid\"\n      />\n      {createPortal(\n        <ContextMenu id=\"grid-context-menu\">\n          <MenuItem onClick={onRowDelete}>Delete Row</MenuItem>\n          <SubMenu title=\"Insert Row\">\n            <MenuItem onClick={onRowInsertAbove}>Above</MenuItem>\n            <MenuItem onClick={onRowInsertBelow}>Below</MenuItem>\n          </SubMenu>\n        </ContextMenu>,\n        document.body\n      )}\n    </>\n  );\n}\n","import { useState } from 'react';\nimport { groupBy as rowGrouper } from 'lodash';\nimport faker from 'faker';\nimport { css } from '@linaria/core';\n\nimport DataGrid, { SelectColumn } from '../../src';\nimport type { Column } from '../../src';\n\nconst groupingClassname = css`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  gap: 8px;\n\n  > .rdg {\n    flex: 1;\n  }\n`;\n\nconst optionsClassname = css`\n  display: flex;\n  gap: 8px;\n  text-transform: capitalize;\n`;\n\ninterface Row {\n  id: number;\n  country: string;\n  year: number;\n  sport: string;\n  athlete: string;\n  gold: number;\n  silver: number;\n  bronze: number;\n}\n\nconst sports = [\n  'Swimming',\n  'Gymnastics',\n  'Speed Skating',\n  'Cross Country Skiing',\n  'Short-Track Speed Skating',\n  'Diving',\n  'Cycling',\n  'Biathlon',\n  'Alpine Skiing',\n  'Ski Jumping',\n  'Nordic Combined',\n  'Athletics',\n  'Table Tennis',\n  'Tennis',\n  'Synchronized Swimming',\n  'Shooting',\n  'Rowing',\n  'Fencing',\n  'Equestrian',\n  'Canoeing',\n  'Bobsleigh',\n  'Badminton',\n  'Archery',\n  'Wrestling',\n  'Weightlifting',\n  'Waterpolo',\n  'Wrestling',\n  'Weightlifting'\n];\n\nconst columns: readonly Column<Row>[] = [\n  SelectColumn,\n  {\n    key: 'country',\n    name: 'Country'\n  },\n  {\n    key: 'year',\n    name: 'Year'\n  },\n  {\n    key: 'sport',\n    name: 'Sport'\n  },\n  {\n    key: 'athlete',\n    name: 'Athlete'\n  },\n  {\n    key: 'gold',\n    name: 'Gold',\n    groupFormatter({ childRows }) {\n      return <>{childRows.reduce((prev, { gold }) => prev + gold, 0)}</>;\n    }\n  },\n  {\n    key: 'silver',\n    name: 'Silver',\n    groupFormatter({ childRows }) {\n      return <>{childRows.reduce((prev, { silver }) => prev + silver, 0)}</>;\n    }\n  },\n  {\n    key: 'bronze',\n    name: 'Bronze',\n    groupFormatter({ childRows }) {\n      return <>{childRows.reduce((prev, { silver }) => prev + silver, 0)}</>;\n    }\n  },\n  {\n    key: 'total',\n    name: 'Total',\n    formatter({ row }) {\n      return <>{row.gold + row.silver + row.bronze}</>;\n    },\n    groupFormatter({ childRows }) {\n      return <>{childRows.reduce((prev, row) => prev + row.gold + row.silver + row.bronze, 0)}</>;\n    }\n  }\n];\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nfunction createRows(): readonly Row[] {\n  const rows: Row[] = [];\n  for (let i = 1; i < 10000; i++) {\n    rows.push({\n      id: i,\n      year: 2015 + faker.datatype.number(3),\n      country: faker.address.country(),\n      sport: sports[faker.datatype.number(sports.length - 1)],\n      athlete: faker.name.findName(),\n      gold: faker.datatype.number(5),\n      silver: faker.datatype.number(5),\n      bronze: faker.datatype.number(5)\n    });\n  }\n\n  return rows.sort((r1, r2) => r2.country.localeCompare(r1.country));\n}\n\nconst options = ['country', 'year', 'sport', 'athlete'] as const;\n\nexport default function Grouping() {\n  const [rows] = useState(createRows);\n  const [selectedRows, setSelectedRows] = useState<ReadonlySet<number>>(() => new Set());\n  const [selectedOptions, setSelectedOptions] = useState<readonly string[]>([\n    options[0],\n    options[1]\n  ]);\n  const [expandedGroupIds, setExpandedGroupIds] = useState<ReadonlySet<unknown>>(\n    () => new Set<unknown>(['United States of America', 'United States of America__2015'])\n  );\n\n  function toggleOption(option: string, enabled: boolean) {\n    const index = selectedOptions.indexOf(option);\n    if (enabled) {\n      if (index === -1) {\n        setSelectedOptions((options) => [...options, option]);\n      }\n    } else if (index !== -1) {\n      setSelectedOptions((options) => {\n        const newOptions = [...options];\n        newOptions.splice(index, 1);\n        return newOptions;\n      });\n    }\n    setExpandedGroupIds(new Set());\n  }\n\n  return (\n    <div className={groupingClassname}>\n      <b>Group by columns:</b>\n      <div className={optionsClassname}>\n        {options.map((option) => (\n          <label key={option}>\n            <input\n              type=\"checkbox\"\n              checked={selectedOptions.includes(option)}\n              onChange={(event) => toggleOption(option, event.target.checked)}\n            />{' '}\n            {option}\n          </label>\n        ))}\n      </div>\n\n      <DataGrid\n        columns={columns}\n        rows={rows}\n        rowKeyGetter={rowKeyGetter}\n        selectedRows={selectedRows}\n        onSelectedRowsChange={setSelectedRows}\n        groupBy={selectedOptions}\n        rowGrouper={rowGrouper}\n        expandedGroupIds={expandedGroupIds}\n        onExpandedGroupIdsChange={setExpandedGroupIds}\n        defaultColumnOptions={{ resizable: true }}\n      />\n    </div>\n  );\n}\n","import { createContext, useContext, useMemo, useState } from 'react';\nimport faker from 'faker';\nimport { css } from '@linaria/core';\n\nimport DataGrid from '../../src';\nimport type { Column } from '../../src';\nimport type { HeaderRendererProps, Omit } from '../../src/types';\nimport { useFocusRef } from '../../src/hooks';\n\nconst rootClassname = css`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  gap: 10px;\n\n  > .rdg {\n    flex: 1;\n  }\n`;\n\nconst toolbarClassname = css`\n  text-align: end;\n`;\n\nconst filterColumnClassName = 'filter-cell';\n\nconst filterContainerClassname = css`\n  .${filterColumnClassName} {\n    line-height: 35px;\n    padding: 0;\n\n    > div {\n      padding: 0 8px;\n\n      &:first-child {\n        border-bottom: 1px solid var(--rdg-border-color);\n      }\n    }\n  }\n`;\n\nconst filterClassname = css`\n  width: 100%;\n  padding: 4px;\n  font-size: 14px;\n`;\n\ninterface Row {\n  id: number;\n  task: string;\n  priority: string;\n  issueType: string;\n  developer: string;\n  complete: number;\n}\n\ninterface Filter extends Omit<Row, 'id' | 'complete'> {\n  complete: number | undefined;\n  enabled: boolean;\n}\n\n// Context is needed to read filter values otherwise columns are\n// re-created when filters are changed and filter loses focus\nconst FilterContext = createContext<Filter | undefined>(undefined);\n\nfunction inputStopPropagation(event: React.KeyboardEvent<HTMLInputElement>) {\n  if (['ArrowLeft', 'ArrowRight'].includes(event.key)) {\n    event.stopPropagation();\n  }\n}\n\nfunction selectStopPropagation(event: React.KeyboardEvent<HTMLSelectElement>) {\n  if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n    event.stopPropagation();\n  }\n}\n\nexport default function HeaderFilters() {\n  const [rows] = useState(createRows);\n  const [filters, setFilters] = useState<Filter>({\n    task: '',\n    priority: 'Critical',\n    issueType: 'All',\n    developer: '',\n    complete: undefined,\n    enabled: true\n  });\n\n  const developerOptions = useMemo(\n    () =>\n      Array.from(new Set(rows.map((r) => r.developer))).map((d) => ({\n        label: d,\n        value: d\n      })),\n    [rows]\n  );\n\n  const columns = useMemo((): readonly Column<Row>[] => {\n    return [\n      {\n        key: 'id',\n        name: 'ID',\n        width: 50\n      },\n      {\n        key: 'task',\n        name: 'Title',\n        headerCellClass: filterColumnClassName,\n        headerRenderer: (p) => (\n          <FilterRenderer<Row, unknown, HTMLInputElement> {...p}>\n            {({ filters, ...rest }) => (\n              <input\n                {...rest}\n                className={filterClassname}\n                value={filters.task}\n                onChange={(e) =>\n                  setFilters({\n                    ...filters,\n                    task: e.target.value\n                  })\n                }\n                onKeyDown={inputStopPropagation}\n              />\n            )}\n          </FilterRenderer>\n        )\n      },\n      {\n        key: 'priority',\n        name: 'Priority',\n        headerCellClass: filterColumnClassName,\n        headerRenderer: (p) => (\n          <FilterRenderer<Row, unknown, HTMLSelectElement> {...p}>\n            {({ filters, ...rest }) => (\n              <select\n                {...rest}\n                className={filterClassname}\n                value={filters.priority}\n                onChange={(e) =>\n                  setFilters({\n                    ...filters,\n                    priority: e.target.value\n                  })\n                }\n                onKeyDown={selectStopPropagation}\n              >\n                <option value=\"All\">All</option>\n                <option value=\"Critical\">Critical</option>\n                <option value=\"High\">High</option>\n                <option value=\"Medium\">Medium</option>\n                <option value=\"Low\">Low</option>\n              </select>\n            )}\n          </FilterRenderer>\n        )\n      },\n      {\n        key: 'issueType',\n        name: 'Issue Type',\n        headerCellClass: filterColumnClassName,\n        headerRenderer: (p) => (\n          <FilterRenderer<Row, unknown, HTMLSelectElement> {...p}>\n            {({ filters, ...rest }) => (\n              <select\n                {...rest}\n                className={filterClassname}\n                value={filters.issueType}\n                onChange={(e) =>\n                  setFilters({\n                    ...filters,\n                    issueType: e.target.value\n                  })\n                }\n                onKeyDown={selectStopPropagation}\n              >\n                <option value=\"All\">All</option>\n                <option value=\"Bug\">Bug</option>\n                <option value=\"Improvement\">Improvement</option>\n                <option value=\"Epic\">Epic</option>\n                <option value=\"Story\">Story</option>\n              </select>\n            )}\n          </FilterRenderer>\n        )\n      },\n      {\n        key: 'developer',\n        name: 'Developer',\n        headerCellClass: filterColumnClassName,\n        headerRenderer: (p) => (\n          <FilterRenderer<Row, unknown, HTMLInputElement> {...p}>\n            {({ filters, ...rest }) => (\n              <input\n                {...rest}\n                className={filterClassname}\n                value={filters.developer}\n                onChange={(e) =>\n                  setFilters({\n                    ...filters,\n                    developer: e.target.value\n                  })\n                }\n                onKeyDown={inputStopPropagation}\n                list=\"developers\"\n              />\n            )}\n          </FilterRenderer>\n        )\n      },\n      {\n        key: 'complete',\n        name: '% Complete',\n        headerCellClass: filterColumnClassName,\n        headerRenderer: (p) => (\n          <FilterRenderer<Row, unknown, HTMLInputElement> {...p}>\n            {({ filters, ...rest }) => (\n              <input\n                {...rest}\n                type=\"number\"\n                className={filterClassname}\n                value={filters.complete}\n                onChange={(e) =>\n                  setFilters({\n                    ...filters,\n                    complete: Number.isFinite(e.target.valueAsNumber)\n                      ? e.target.valueAsNumber\n                      : undefined\n                  })\n                }\n                onKeyDown={inputStopPropagation}\n              />\n            )}\n          </FilterRenderer>\n        )\n      }\n    ];\n  }, []);\n\n  const filteredRows = useMemo(() => {\n    return rows.filter((r) => {\n      return (\n        (filters.task ? r.task.includes(filters.task) : true) &&\n        (filters.priority !== 'All' ? r.priority === filters.priority : true) &&\n        (filters.issueType !== 'All' ? r.issueType === filters.issueType : true) &&\n        (filters.developer\n          ? r.developer.toLowerCase().startsWith(filters.developer.toLowerCase())\n          : true) &&\n        (filters.complete !== undefined ? r.complete >= filters.complete : true)\n      );\n    });\n  }, [rows, filters]);\n\n  function clearFilters() {\n    setFilters({\n      task: '',\n      priority: 'All',\n      issueType: 'All',\n      developer: '',\n      complete: undefined,\n      enabled: true\n    });\n  }\n\n  function toggleFilters() {\n    setFilters((filters) => ({\n      ...filters,\n      enabled: !filters.enabled\n    }));\n  }\n\n  return (\n    <div className={rootClassname}>\n      <div className={toolbarClassname}>\n        <button type=\"button\" onClick={toggleFilters}>\n          Toggle Filters\n        </button>{' '}\n        <button type=\"button\" onClick={clearFilters}>\n          Clear Filters\n        </button>\n      </div>\n      <FilterContext.Provider value={filters}>\n        <DataGrid\n          className={filters.enabled ? filterContainerClassname : undefined}\n          columns={columns}\n          rows={filteredRows}\n          headerRowHeight={filters.enabled ? 70 : undefined}\n        />\n      </FilterContext.Provider>\n      <datalist id=\"developers\">\n        {developerOptions.map(({ label, value }) => (\n          <option key={value} value={value}>\n            {label}\n          </option>\n        ))}\n      </datalist>\n    </div>\n  );\n}\n\nfunction FilterRenderer<R, SR, T extends HTMLOrSVGElement>({\n  isCellSelected,\n  column,\n  children\n}: HeaderRendererProps<R, SR> & {\n  children: (args: {\n    ref: React.RefObject<T>;\n    tabIndex: number;\n    filters: Filter;\n  }) => React.ReactElement;\n}) {\n  const filters = useContext(FilterContext)!;\n  const { ref, tabIndex } = useFocusRef<T>(isCellSelected);\n\n  return (\n    <>\n      <div>{column.name}</div>\n      {filters.enabled && <div>{children({ ref, tabIndex, filters })}</div>}\n    </>\n  );\n}\n\nfunction createRows() {\n  const rows: Row[] = [];\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.floor(Math.random() * 4)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.floor(Math.random() * 4)],\n      developer: faker.name.findName()\n    });\n  }\n  return rows;\n}\n","import faker from 'faker';\nimport { useState } from 'react';\nimport { css } from '@linaria/core';\nimport DataGrid from '../../src';\nimport type { Column } from '../../src';\n\nconst loadMoreRowsClassname = css`\n  width: 180px;\n  padding: 8px 16px;\n  position: absolute;\n  bottom: 8px;\n  right: 8px;\n  color: white;\n  line-height: 35px;\n  background: rgb(0 0 0 / 0.6);\n`;\n\ninterface Row {\n  id: string;\n  email: string;\n  title: string;\n  firstName: string;\n  lastName: string;\n}\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nconst columns: readonly Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID'\n  },\n  {\n    key: 'title',\n    name: 'Title'\n  },\n  {\n    key: 'firstName',\n    name: 'First Name'\n  },\n  {\n    key: 'lastName',\n    name: 'Last Name'\n  },\n  {\n    key: 'email',\n    name: 'Email'\n  }\n];\n\nfunction createFakeRowObjectData(index: number): Row {\n  return {\n    id: `id_${index}`,\n    email: faker.internet.email(),\n    title: faker.name.prefix(),\n    firstName: faker.name.firstName(),\n    lastName: faker.name.lastName()\n  };\n}\n\nfunction createRows(numberOfRows: number): Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 0; i < numberOfRows; i++) {\n    rows[i] = createFakeRowObjectData(i);\n  }\n\n  return rows;\n}\n\nfunction isAtBottom({ currentTarget }: React.UIEvent<HTMLDivElement>): boolean {\n  return currentTarget.scrollTop + 10 >= currentTarget.scrollHeight - currentTarget.clientHeight;\n}\n\nfunction loadMoreRows(newRowsCount: number, length: number): Promise<Row[]> {\n  return new Promise((resolve) => {\n    const newRows: Row[] = [];\n\n    for (let i = 0; i < newRowsCount; i++) {\n      newRows[i] = createFakeRowObjectData(i + length);\n    }\n\n    setTimeout(() => resolve(newRows), 1000);\n  });\n}\n\nexport default function InfiniteScrolling() {\n  const [rows, setRows] = useState(() => createRows(50));\n  const [isLoading, setIsLoading] = useState(false);\n\n  async function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    if (isLoading || !isAtBottom(event)) return;\n\n    setIsLoading(true);\n\n    const newRows = await loadMoreRows(50, rows.length);\n\n    setRows([...rows, ...newRows]);\n    setIsLoading(false);\n  }\n\n  return (\n    <>\n      <DataGrid\n        columns={columns}\n        rows={rows}\n        rowKeyGetter={rowKeyGetter}\n        onRowsChange={setRows}\n        rowHeight={30}\n        onScroll={handleScroll}\n        className=\"fill-grid\"\n      />\n      {isLoading && <div className={loadMoreRowsClassname}>Loading more rows...</div>}\n    </>\n  );\n}\n","import { css } from '@linaria/core';\nimport { useFocusRef } from '../../../../src/hooks';\n\nconst cellExpandClassname = css`\n  float: right;\n  display: table;\n  height: 100%;\n\n  > span {\n    display: table-cell;\n    vertical-align: middle;\n    cursor: pointer;\n  }\n`;\n\ninterface CellExpanderFormatterProps {\n  isCellSelected: boolean;\n  expanded: boolean;\n  onCellExpand: () => void;\n}\n\nexport function CellExpanderFormatter({\n  isCellSelected,\n  expanded,\n  onCellExpand\n}: CellExpanderFormatterProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(e: React.KeyboardEvent<HTMLSpanElement>) {\n    if (e.key === ' ' || e.key === 'Enter') {\n      e.preventDefault();\n      onCellExpand();\n    }\n  }\n\n  return (\n    <div className={cellExpandClassname}>\n      <span onClick={onCellExpand} onKeyDown={handleKeyDown}>\n        <span ref={ref} tabIndex={tabIndex}>\n          {expanded ? '\\u25BC' : '\\u25B6'}\n        </span>\n      </span>\n    </div>\n  );\n}\n","import { useEffect, useRef, useState } from 'react';\nimport { css } from '@linaria/core';\nimport faker from 'faker';\n\nimport DataGrid from '../../src';\nimport type { Column, RowsChangeData, DataGridHandle } from '../../src';\nimport { CellExpanderFormatter } from './components/Formatters';\n\ntype DepartmentRow =\n  | {\n      type: 'MASTER';\n      id: number;\n      department: string;\n      expanded: boolean;\n    }\n  | {\n      type: 'DETAIL';\n      id: number;\n      parentId: number;\n    };\n\ninterface ProductRow {\n  id: number;\n  product: string;\n  description: string;\n  price: string;\n}\n\nfunction createDepartments(): readonly DepartmentRow[] {\n  const departments: DepartmentRow[] = [];\n  for (let i = 1; i < 30; i++) {\n    departments.push({\n      type: 'MASTER',\n      id: i,\n      department: faker.commerce.department(),\n      expanded: false\n    });\n  }\n  return departments;\n}\n\nconst productsMap = new Map<number, readonly ProductRow[]>();\nfunction getProducts(parentId: number): readonly ProductRow[] {\n  if (productsMap.has(parentId)) return productsMap.get(parentId)!;\n  const products: ProductRow[] = [];\n  for (let i = 0; i < 20; i++) {\n    products.push({\n      id: i,\n      product: faker.commerce.productName(),\n      description: faker.commerce.productDescription(),\n      price: faker.commerce.price()\n    });\n  }\n  productsMap.set(parentId, products);\n  return products;\n}\n\nconst productColumns: readonly Column<ProductRow>[] = [\n  { key: 'id', name: 'ID', width: 35 },\n  { key: 'product', name: 'Product' },\n  { key: 'description', name: 'Description' },\n  { key: 'price', name: 'Price' }\n];\n\nconst departmentColumns: readonly Column<DepartmentRow>[] = [\n  {\n    key: 'expanded',\n    name: '',\n    minWidth: 30,\n    width: 30,\n    colSpan(args) {\n      return args.type === 'ROW' && args.row.type === 'DETAIL' ? 3 : undefined;\n    },\n    cellClass(row) {\n      return row.type === 'DETAIL'\n        ? css`\n            padding: 24px;\n          `\n        : undefined;\n    },\n    formatter({ row, isCellSelected, onRowChange }) {\n      if (row.type === 'DETAIL') {\n        return <ProductGrid isCellSelected={isCellSelected} parentId={row.parentId} />;\n      }\n\n      return (\n        <CellExpanderFormatter\n          expanded={row.expanded}\n          isCellSelected={isCellSelected}\n          onCellExpand={() => {\n            onRowChange({ ...row, expanded: !row.expanded });\n          }}\n        />\n      );\n    }\n  },\n  { key: 'id', name: 'ID', width: 35 },\n  { key: 'department', name: 'Department' }\n];\n\nexport default function MasterDetail() {\n  const [rows, setRows] = useState(createDepartments);\n\n  function onRowsChange(rows: DepartmentRow[], { indexes }: RowsChangeData<DepartmentRow>) {\n    const row = rows[indexes[0]];\n    if (row.type === 'MASTER') {\n      if (!row.expanded) {\n        rows.splice(indexes[0] + 1, 1);\n      } else {\n        rows.splice(indexes[0] + 1, 0, {\n          type: 'DETAIL',\n          id: row.id + 100,\n          parentId: row.id\n        });\n      }\n      setRows(rows);\n    }\n  }\n\n  return (\n    <DataGrid\n      rowKeyGetter={rowKeyGetter}\n      columns={departmentColumns}\n      rows={rows}\n      onRowsChange={onRowsChange}\n      headerRowHeight={45}\n      rowHeight={(args) => (args.type === 'ROW' && args.row.type === 'DETAIL' ? 300 : 45)}\n      className=\"fill-grid\"\n      enableVirtualization={false}\n    />\n  );\n}\n\nfunction ProductGrid({ parentId, isCellSelected }: { parentId: number; isCellSelected: boolean }) {\n  const gridRef = useRef<DataGridHandle>(null);\n  useEffect(() => {\n    if (!isCellSelected) return;\n    gridRef\n      .current!.element!.querySelector<HTMLDivElement>('[tabindex=\"0\"]')!\n      .focus({ preventScroll: true });\n  }, [isCellSelected]);\n  const products = getProducts(parentId);\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (event.isDefaultPrevented()) {\n      event.stopPropagation();\n    }\n  }\n\n  return (\n    <div onKeyDown={onKeyDown}>\n      <DataGrid\n        ref={gridRef}\n        rows={products}\n        columns={productColumns}\n        rowKeyGetter={rowKeyGetter}\n        style={{ height: 250 }}\n      />\n    </div>\n  );\n}\n\nfunction rowKeyGetter(row: DepartmentRow | ProductRow) {\n  return row.id;\n}\n","import { useMemo } from 'react';\nimport DataGrid from '../../src';\nimport type { Column, FormatterProps } from '../../src';\n\ntype Row = number;\nconst rows: readonly Row[] = [...Array(1000).keys()];\n\nfunction CellFormatter(props: FormatterProps<Row>) {\n  return (\n    <>\n      {props.column.key}&times;{props.row}\n    </>\n  );\n}\n\nexport default function MillionCells() {\n  const columns = useMemo((): readonly Column<Row>[] => {\n    const columns: Column<Row>[] = [];\n\n    for (let i = 0; i < 1000; i++) {\n      const key = String(i);\n      columns.push({\n        key,\n        name: key,\n        frozen: i < 5,\n        resizable: true,\n        formatter: CellFormatter\n      });\n    }\n\n    return columns;\n  }, []);\n\n  return <DataGrid columns={columns} rows={rows} rowHeight={22} className=\"fill-grid\" />;\n}\n","import { useState } from 'react';\nimport DataGrid, { SelectColumn } from '../../src';\nimport type { Column } from '../../src';\n\nfunction EmptyRowsRenderer() {\n  return (\n    <div style={{ textAlign: 'center', gridColumn: '1/-1' }}>\n      Nothing to show{' '}\n      <span lang=\"ja\" title=\"ショボーン\">\n        (´・ω・`)\n      </span>\n    </div>\n  );\n}\n\ninterface Row {\n  id: number;\n  title: string;\n  count: number;\n}\n\nconst columns: readonly Column<Row>[] = [\n  SelectColumn,\n  { key: 'id', name: 'ID' },\n  { key: 'title', name: 'Title' },\n  { key: 'count', name: 'Count' }\n];\n\nconst rows: readonly Row[] = [];\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nexport default function NoRows() {\n  const [selectedRows, onSelectedRowsChange] = useState((): ReadonlySet<number> => new Set());\n\n  return (\n    <DataGrid\n      columns={columns}\n      rows={rows}\n      noRowsFallback={<EmptyRowsRenderer />}\n      selectedRows={selectedRows}\n      onSelectedRowsChange={onSelectedRowsChange}\n      rowKeyGetter={rowKeyGetter}\n      className=\"small-grid\"\n    />\n  );\n}\n","import DataGrid from '../../src';\nimport type { Column, FormatterProps } from '../../src';\n\ntype Row = number;\nconst rows: readonly Row[] = [...Array(100).keys()];\n\nfunction CellFormatter(props: FormatterProps<Row>) {\n  return (\n    <>\n      {props.column.key}&times;{props.row}\n    </>\n  );\n}\n\nconst columns: Column<Row>[] = [];\n\nfor (let i = 0; i < 50; i++) {\n  const key = String(i);\n  columns.push({\n    key,\n    name: key,\n    formatter: CellFormatter\n  });\n}\n\nexport default function ResizableGrid() {\n  return (\n    <DataGrid columns={columns} rows={rows} className=\"fill-grid\" style={{ resize: 'both' }} />\n  );\n}\n","import { useDrag, useDrop } from 'react-dnd';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { Row } from '../../../../src';\nimport type { RowRendererProps } from '../../../../src';\n\nconst rowDraggingClassname = css`\n  opacity: 0.5;\n`;\n\nconst rowOverClassname = css`\n  background-color: #ececec;\n`;\n\ninterface DraggableRowRenderProps<R, SR> extends RowRendererProps<R, SR> {\n  onRowReorder: (sourceIndex: number, targetIndex: number) => void;\n}\n\nexport function DraggableRowRenderer<R, SR>({\n  rowIdx,\n  isRowSelected,\n  className,\n  onRowReorder,\n  ...props\n}: DraggableRowRenderProps<R, SR>) {\n  const [{ isDragging }, drag] = useDrag({\n    type: 'ROW_DRAG',\n    item: { index: rowIdx },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n\n  const [{ isOver }, drop] = useDrop({\n    accept: 'ROW_DRAG',\n    drop({ index }: { index: number }) {\n      onRowReorder(index, rowIdx);\n    },\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  });\n\n  className = clsx(className, {\n    [rowDraggingClassname]: isDragging,\n    [rowOverClassname]: isOver\n  });\n\n  return (\n    <Row\n      ref={(ref) => {\n        if (ref) {\n          drag(ref.firstElementChild);\n        }\n        drop(ref);\n      }}\n      rowIdx={rowIdx}\n      isRowSelected={isRowSelected}\n      className={className}\n      {...props}\n    />\n  );\n}\n","import { useCallback, useState } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nimport { DraggableRowRenderer } from './components/RowRenderers';\nimport DataGrid, { TextEditor } from '../../src';\nimport type { Column, RowRendererProps } from '../../src';\n\ninterface Row {\n  id: number;\n  task: string;\n  complete: number;\n  priority: string;\n  issueType: string;\n}\n\nfunction createRows(): readonly Row[] {\n  const rows = [];\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.round(Math.random() * 3)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.round(Math.random() * 3)]\n    });\n  }\n\n  return rows;\n}\n\nconst columns: readonly Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80\n  },\n  {\n    key: 'task',\n    name: 'Title',\n    editor: TextEditor\n  },\n  {\n    key: 'priority',\n    name: 'Priority'\n  },\n  {\n    key: 'issueType',\n    name: 'Issue Type'\n  },\n  {\n    key: 'complete',\n    name: '% Complete'\n  }\n];\n\nexport default function RowsReordering() {\n  const [rows, setRows] = useState(createRows);\n\n  const RowRenderer = useCallback((props: RowRendererProps<Row>) => {\n    function onRowReorder(fromIndex: number, toIndex: number) {\n      setRows((rows) => {\n        const newRows = [...rows];\n        newRows.splice(toIndex, 0, newRows.splice(fromIndex, 1)[0]);\n        return newRows;\n      });\n    }\n\n    return <DraggableRowRenderer {...props} onRowReorder={onRowReorder} />;\n  }, []);\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <DataGrid columns={columns} rows={rows} onRowsChange={setRows} rowRenderer={RowRenderer} />\n    </DndProvider>\n  );\n}\n","import { useState, useRef } from 'react';\nimport DataGrid from '../../src';\nimport type { Column, DataGridHandle } from '../../src';\n\ninterface Row {\n  id: number;\n  title: string;\n  count: number;\n}\n\nconst columns: readonly Column<Row>[] = [\n  { key: 'id', name: 'ID' },\n  { key: 'title', name: 'Title' },\n  { key: 'count', name: 'Count' }\n];\n\nexport default function ScrollToRow() {\n  const [rows] = useState(() => {\n    const rows: Row[] = [];\n\n    for (let i = 0; i < 1000; i++) {\n      rows.push({\n        id: i,\n        title: `Title ${i}`,\n        count: i * 1000\n      });\n    }\n\n    return rows;\n  });\n  const [value, setValue] = useState('10');\n  const gridRef = useRef<DataGridHandle>(null);\n\n  return (\n    <>\n      <div style={{ marginBottom: 5 }}>\n        <span style={{ marginRight: 5 }}>Row index: </span>\n        <input\n          style={{ width: 50 }}\n          type=\"number\"\n          value={value}\n          onChange={(event) => setValue(event.target.value)}\n        />\n        <button type=\"button\" onClick={() => gridRef.current!.scrollToRow(Number(value))}>\n          Scroll to row\n        </button>\n      </div>\n      <DataGrid ref={gridRef} columns={columns} rows={rows} />\n    </>\n  );\n}\n","import { css } from '@linaria/core';\nimport { useFocusRef } from '../../../../src/hooks';\n\nconst childRowActionCrossClassname = css`\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    background: grey;\n  }\n\n  &::before {\n    left: 21px;\n    width: 1px;\n    height: 100%;\n  }\n\n  &::after {\n    top: 50%;\n    left: 20px;\n    height: 1px;\n    width: 15px;\n  }\n\n  &:hover {\n    background: red;\n  }\n`;\n\nconst childRowButtonClassname = css`\n  cursor: pointer;\n  position: absolute;\n  left: 21px;\n  transform: translateX(-50%);\n  filter: grayscale(1);\n`;\n\ninterface ChildRowDeleteButtonProps {\n  isCellSelected: boolean;\n  isDeleteSubRowEnabled: boolean;\n  onDeleteSubRow: () => void;\n}\n\nexport function ChildRowDeleteButton({\n  isCellSelected,\n  onDeleteSubRow,\n  isDeleteSubRowEnabled\n}: ChildRowDeleteButtonProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(e: React.KeyboardEvent<HTMLSpanElement>) {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      onDeleteSubRow();\n    }\n  }\n\n  return (\n    <>\n      <div className={childRowActionCrossClassname} />\n      {isDeleteSubRowEnabled && (\n        <div className={childRowButtonClassname} onClick={onDeleteSubRow}>\n          <span ref={ref} tabIndex={tabIndex} onKeyDown={handleKeyDown}>\n            ❌\n          </span>\n        </div>\n      )}\n    </>\n  );\n}\n","import { useState, useReducer, useMemo } from 'react';\n\nimport DataGrid from '../../src';\nimport type { Column } from '../../src';\nimport { CellExpanderFormatter, ChildRowDeleteButton } from './components/Formatters';\n\ninterface Row {\n  id: string;\n  name: string;\n  format: string;\n  position: string;\n  price: number;\n  children?: Row[];\n  parentId?: string;\n  isExpanded?: boolean;\n}\n\ninterface Action {\n  type: 'toggleSubRow' | 'deleteSubRow';\n  id: string;\n}\n\nfunction createRows(): Row[] {\n  const rows = [];\n  for (let i = 0; i < 100; i++) {\n    const price = Math.random() * 30;\n    const id = `row${i}`;\n    const row: Row = {\n      id,\n      name: `supplier ${i}`,\n      format: `package ${i}`,\n      position: 'Run of site',\n      price,\n      children: [\n        {\n          id: `${id}-0`,\n          parentId: id,\n          name: `supplier ${i}`,\n          format: '728x90',\n          position: 'run of site',\n          price: price / 2\n        },\n        {\n          id: `${id}-1`,\n          parentId: id,\n          name: `supplier ${i}`,\n          format: '480x600',\n          position: 'run of site',\n          price: price * 0.25\n        },\n        {\n          id: `${id}-2`,\n          parentId: id,\n          name: `supplier ${i}`,\n          format: '328x70',\n          position: 'run of site',\n          price: price * 0.25\n        }\n      ],\n      isExpanded: false\n    };\n    rows.push(row);\n  }\n  return rows;\n}\n\nfunction toggleSubRow(rows: Row[], id: string): Row[] {\n  const rowIndex = rows.findIndex((r) => r.id === id);\n  const row = rows[rowIndex];\n  const { children } = row;\n  if (!children) return rows;\n\n  const newRows = [...rows];\n  newRows[rowIndex] = { ...row, isExpanded: !row.isExpanded };\n  if (!row.isExpanded) {\n    newRows.splice(rowIndex + 1, 0, ...children);\n  } else {\n    newRows.splice(rowIndex + 1, children.length);\n  }\n  return newRows;\n}\n\nfunction deleteSubRow(rows: Row[], id: string): Row[] {\n  const row = rows.find((r) => r.id === id);\n  if (!row || !row.parentId) return rows;\n\n  // Remove sub row from flattened rows.\n  const newRows = rows.filter((r) => r.id !== id);\n\n  // Remove sub row from parent row.\n  const parentRowIndex = newRows.findIndex((r) => r.id === row.parentId);\n  const { children } = newRows[parentRowIndex];\n  if (children) {\n    const newChildren = children.filter((sr) => sr.id !== id);\n    newRows[parentRowIndex] = { ...newRows[parentRowIndex], children: newChildren };\n  }\n\n  return newRows;\n}\n\nfunction reducer(rows: Row[], { type, id }: Action): Row[] {\n  switch (type) {\n    case 'toggleSubRow':\n      return toggleSubRow(rows, id);\n    case 'deleteSubRow':\n      return deleteSubRow(rows, id);\n    default:\n      return rows;\n  }\n}\n\nconst defaultRows = createRows();\n\nexport default function TreeView() {\n  const [rows, dispatch] = useReducer(reducer, defaultRows);\n  const [allowDelete, setAllowDelete] = useState(true);\n  const columns: Column<Row>[] = useMemo(() => {\n    return [\n      {\n        key: 'id',\n        name: 'id',\n        frozen: true\n      },\n      {\n        key: 'name',\n        name: 'Name'\n      },\n      {\n        key: 'format',\n        name: 'format',\n        formatter({ row, isCellSelected }) {\n          const hasChildren = row.children !== undefined;\n          const style = !hasChildren ? { marginLeft: 30 } : undefined;\n          return (\n            <>\n              {hasChildren && (\n                <CellExpanderFormatter\n                  isCellSelected={isCellSelected}\n                  expanded={row.isExpanded === true}\n                  onCellExpand={() => dispatch({ id: row.id, type: 'toggleSubRow' })}\n                />\n              )}\n              <div className=\"rdg-cell-value\">\n                {!hasChildren && (\n                  <ChildRowDeleteButton\n                    isCellSelected={isCellSelected}\n                    isDeleteSubRowEnabled={allowDelete}\n                    onDeleteSubRow={() => dispatch({ id: row.id, type: 'deleteSubRow' })}\n                  />\n                )}\n                <div style={style}>{row.format}</div>\n              </div>\n            </>\n          );\n        }\n      },\n      {\n        key: 'position',\n        name: 'position'\n      },\n      {\n        key: 'price',\n        name: 'price'\n      }\n    ];\n  }, [allowDelete]);\n\n  return (\n    <>\n      <label>\n        Allow Delete\n        <input\n          type=\"checkbox\"\n          checked={allowDelete}\n          onChange={() => setAllowDelete(!allowDelete)}\n        />\n      </label>\n      <DataGrid columns={columns} rows={rows} className=\"big-grid\" />\n    </>\n  );\n}\n","import { useMemo } from 'react';\n\nimport DataGrid from '../../src';\nimport type { Column, FormatterProps } from '../../src';\n\ntype Row = number;\nconst rows: readonly Row[] = [...Array(500).keys()];\n\nfunction CellFormatter(props: FormatterProps<Row>) {\n  return (\n    <>\n      {props.column.key}&times;{props.row}\n    </>\n  );\n}\n\nexport default function VariableRowHeight() {\n  const columns = useMemo((): readonly Column<Row>[] => {\n    const columns: Column<Row>[] = [];\n\n    for (let i = 0; i < 30; i++) {\n      const key = String(i);\n      columns.push({\n        key,\n        name: key,\n        frozen: i < 5,\n        resizable: true,\n        formatter: CellFormatter\n      });\n    }\n\n    return columns;\n  }, []);\n\n  return <DataGrid columns={columns} rows={rows} rowHeight={rowHeight} className=\"fill-grid\" />;\n}\n\nfunction rowHeight() {\n  // should be based on the content of the row\n  return 25 + Math.round(Math.random() * 75);\n}\n","import { StrictMode } from 'react';\nimport { render } from 'react-dom';\nimport { css } from '@linaria/core';\nimport { HashRouter as Router, Switch, Redirect, Route } from 'react-router-dom';\n\nimport Nav from './Nav';\n\nimport CommonFeatures from './demos/CommonFeatures';\nimport AllFeatures from './demos/AllFeatures';\nimport CellNavigation from './demos/CellNavigation';\nimport ColumnSpanning from './demos/ColumnSpanning';\nimport ColumnsReordering from './demos/ColumnsReordering';\nimport ContextMenuDemo from './demos/ContextMenu';\nimport Grouping from './demos/Grouping';\nimport HeaderFilters from './demos/HeaderFilters';\nimport InfiniteScrolling from './demos/InfiniteScrolling';\nimport MasterDetail from './demos/MasterDetail';\nimport MillionCells from './demos/MillionCells';\nimport NoRows from './demos/NoRows';\nimport ResizableGrid from './demos/Resizable';\nimport RowsReordering from './demos/RowsReordering';\nimport ScrollToRow from './demos/ScrollToRow';\nimport TreeView from './demos/TreeView';\nimport VariableRowHeight from './demos/VariableRowHeight';\n\ncss`\n  @at-root {\n    :root,\n    body {\n      padding: 0;\n      margin: 0;\n      font-family: sans-serif;\n    }\n\n    :root {\n      color-scheme: light dark;\n\n      @media (prefers-color-scheme: light) {\n        background-color: #fff;\n        color: #111;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        background-color: hsl(0deg 0% 10%);\n        color: #fff;\n      }\n    }\n\n    #root {\n      display: grid;\n      grid-template-columns: auto 1fr;\n    }\n\n    .rdg.fill-grid {\n      height: 100%;\n    }\n\n    .rdg.small-grid {\n      height: 300px;\n    }\n\n    .rdg.big-grid {\n      height: 600px;\n    }\n\n    .rdg-cell .Select {\n      max-height: 30px;\n      font-size: 12px;\n      font-weight: normal;\n    }\n  }\n`;\n\nconst mainClassname = css`\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  height: 100vh;\n  padding: 8px;\n  overflow: hidden;\n`;\n\nfunction Root() {\n  return (\n    <Router>\n      <Nav />\n\n      <main className={mainClassname}>\n        <Switch>\n          <Redirect exact from=\"/\" to=\"/common-features\" />\n          <Route exact path=\"/common-features\">\n            <CommonFeatures />\n          </Route>\n          <Route exact path=\"/all-features\">\n            <AllFeatures />\n          </Route>\n          <Route exact path=\"/cell-navigation\">\n            <CellNavigation />\n          </Route>\n          <Route exact path=\"/column-spanning\">\n            <ColumnSpanning />\n          </Route>\n          <Route exact path=\"/columns-reordering\">\n            <ColumnsReordering />\n          </Route>\n          <Route exact path=\"/context-menu\">\n            <ContextMenuDemo />\n          </Route>\n          <Route exact path=\"/grouping\">\n            <Grouping />\n          </Route>\n          <Route exact path=\"/header-filters\">\n            <HeaderFilters />\n          </Route>\n          <Route exact path=\"/infinite-scrolling\">\n            <InfiniteScrolling />\n          </Route>\n          <Route exact path=\"/master-detail\">\n            <MasterDetail />\n          </Route>\n          <Route exact path=\"/million-cells\">\n            <MillionCells />\n          </Route>\n          <Route exact path=\"/no-rows\">\n            <NoRows />\n          </Route>\n          <Route exact path=\"/resizable-grid\">\n            <ResizableGrid />\n          </Route>\n          <Route exact path=\"/rows-reordering\">\n            <RowsReordering />\n          </Route>\n          <Route exact path=\"/scroll-to-row\">\n            <ScrollToRow />\n          </Route>\n          <Route exact path=\"/tree-view\">\n            <TreeView />\n          </Route>\n          <Route exact path=\"/variable-row-height\">\n            <VariableRowHeight />\n          </Route>\n          <Route>Nothing to see here</Route>\n        </Switch>\n      </main>\n    </Router>\n  );\n}\n\nrender(\n  <StrictMode>\n    <Root />\n  </StrictMode>,\n  document.getElementById('root')\n);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + {\"120\":\"33f33f487d3f2726323f\",\"159\":\"52a57a9c4aebb980aeb6\",\"576\":\"f0b1dc80b26735e42ccb\",\"762\":\"803375217ba26e853fc6\",\"820\":\"4249782437cf52bd0b72\",\"851\":\"415ddf7529b6f92d85a6\",\"856\":\"9f45c9eef328e69fe7e3\",\"869\":\"d046523cc0ea08cd5184\"}[chunkId] + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = globalThis[\"webpackChunkreact_data_grid\"] = globalThis[\"webpackChunkreact_data_grid\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [652], () => (__webpack_require__(18811)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","inProgress","dataWebpackPrefix","activeNavClassname","Nav","className","to","exact","activeClassName","href","target","rel","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","useFocusRef","isSelected","ref","useRef","current","focus","preventScroll","tabIndex","SelectCellFormatter","ariaLabelledBy","clsx","disabled","type","checked","onChange","e","onClick","RowSelectionContext","createContext","undefined","RowSelectionProvider","Provider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","useContext","rowSelectionChangeContext","Error","stopPropagation","event","SELECT_COLUMN_KEY","SelectColumn","key","name","width","maxWidth","resizable","sortable","frozen","headerRenderer","props","isCellSelected","value","allRowsSelected","onAllRowsSelectionChange","formatter","isRowSelected","onRowSelectionChange","isShiftClick","row","groupFormatter","textEditorClassname","autoFocusAndSelect","input","TextEditor","onClose","column","onRowChange","onBlur","ValueFormatter","ToggleGroupFormatter","toggleGroup","d","isExpanded","onKeyDown","viewBox","height","min","max","round","floor","sign","Math","assertIsValidKeyGetter","keyGetter","getRowStyle","rowIdx","getCellStyle","colSpan","gridColumnStart","idx","gridColumnEnd","left","getCellClassname","extraClasses","isLastFrozenColumn","getSpecifiedWidth","columnWidths","viewportWidth","has","get","test","parseInt","clampColumnWidth","minWidth","minColumnWidth","getColSpan","lastFrozenColumnIndex","args","Number","isInteger","useLatestFunc","fn","useCallback","SortableHeaderCell","onSort","sortDirection","useRovingCellRef","isChildFocused","forceRender","useState","isFocused","onFocus","HeaderCell","shouldFocusGrid","sortIndex","sortColumns","sort","sortColumn","priority","ariaSort","onSortColumnsChange","sortDescendingFirst","nextSort","columnKey","direction","nextSortColumn","nextSortColumns","role","style","selectCell","onDoubleClick","right","onColumnResize","onPointerDown","pointerId","currentTarget","offset","rowClassname","rowSelectedClassname","HeaderRow","cells","index","columns","selectedCellIdx","memo","isSelectedCellEditable","selectedPosition","rows","isGroupRow","isCellEditable","editor","rowGroup","editable","getSelectedCellColSpan","summaryRows","length","Cell","cellClass","isDraggedOver","selectCellWrapper","onRowClick","onRowDoubleClick","onContextMenu","Row","gridRowStart","copiedCellIdx","draggedOverCellIdx","viewportColumns","selectedCellEditor","selectedCellDragHandle","rowClass","setDraggedOverRowIdx","onMouseEnter","handleRowChange","newRow","push","isCopied","dragHandle","forwardRef","GroupCell","id","groupKey","childRows","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","GroupedRow","level","selectGroup","SummaryCell","summaryFormatter","summaryCellClass","SummaryFormatter","SummaryRow","ariaRowIndex","top","bottom","nonInputKeys","Set","isCtrlKeyHeldDown","ctrlKey","metaKey","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","EditCell","scrollToCell","frameRequestRef","commitOnOutsideClick","commitOnOutsideMouseDown","cancelAnimationFrame","closeEditor","addEventListener","onWindowCaptureMouseDown","capture","removeEventListener","cancelFrameRequest","requestAnimationFrame","onMouseDownCapture","DragHandle","sourceRow","updatedRows","indexes","i","updatedRow","onFill","targetRow","onRowsChange","onMouseDown","onMouseUp","setDragging","overRowIdx","latestDraggedOverRowIdx","updateRows","handleDragEnd","initialPosition","mode","DataGrid","rawColumns","rawRows","rowKeyGetter","rowHeight","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","defaultColumnOptions","groupBy","rawGroupBy","rowGrouper","expandedGroupIds","onExpandedGroupIdsChange","onScroll","onPaste","cellNavigationMode","rawCellNavigationMode","enableVirtualization","rowRenderer","noRowsFallback","ariaLabel","ariaDescribedBy","testId","RowRenderer","scrollTop","setScrollTop","scrollLeft","setScrollLeft","setColumnWidths","Map","setSelectedPosition","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","autoResizeColumn","setAutoResizeColumn","prevSelectedPosition","lastSelectedRowIdx","rowRef","gridRef","gridWidth","gridHeight","setGridWidth","setGridHeight","ResizeObserver","resizeObserver","clientWidth","clientHeight","devicePixelRatio","observe","disconnect","useGridDimensions","summaryRowsCount","isSelectable","isHeaderRowSelected","useMemo","size","every","colSpanColumns","colOverscanStartIdx","colOverscanEndIdx","layoutCssVars","columnMetrics","totalColumnWidth","totalFrozenColumnWidth","defaultFormatter","defaultSortable","defaultResizable","map","rawColumn","includes","aKey","frozenA","bKey","frozenB","indexOf","forEach","templateColumns","allocatedWidth","unassignedColumnsCount","set","columnMetric","gridTemplateColumns","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useCalculatedColumns","rowOverscanStartIdx","rowOverscanEndIdx","rowsCount","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","groupedRows","groupRows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","Object","entries","childGroups","childRowsCount","allGroupRows","flattenedRows","expandGroup","parentId","arr","Array","isArray","keys","posInSet","groupRow","setSize","add","rowPositions","currentRowHeight","position","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","useViewportRows","startIdx","updateStartIdx","colIdx","useViewportColumns","hasGroups","minColIdx","maxColIdx","maxRowIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","selectRowLatest","selectRow","selectAllRowsLatest","newSelectedRows","rowKey","delete","handleFormatterRowChangeLatest","updateRow","selectViewportCellLatest","enableEditor","selectGroupLatest","selectHeaderCellLatest","selectSummaryCellLatest","summaryRow","toggleGroupLatest","isSamePosition","querySelector","newColumnWidths","useImperativeHandle","element","scrollToColumn","scrollToRow","scrollTo","behavior","handleColumnResize","childRow","previousRowIdx","step","expandedGroupId","newExpandedGroupIds","handleKeyDown","Element","isCellEvent","closest","isRowEvent","keyCode","vKey","getRawRowIdx","handleCopy","sourceColumnKey","targetColumnKey","handlePaste","isRowIdxWithinViewportBounds","preventDefault","shiftKey","minRowIdx","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","canExitGrid","commitEditorChanges","nextPosition","parentRowIdx","parentRow","nextRowY","getNextPosition","currentPosition","currentIdx","isCellWithinBounds","nextIdx","nextRowIdx","setColSpan","moveRight","columnsCount","isBeforeFirstColumn","getNextSelectedCellPosition","navigate","editorOptions","onCellKeyDown","isDefaultPrevented","isDefaultCellInput","originalRow","handleCellInput","rawRowIdx","isColIdxWithinSelectionBounds","isCellAtRightBoundary","rowTop","getDraggedOverCellIdx","currentRowIdx","getDragHandle","getCellEditor","commitChanges","templateRows","newSizes","split","join","getLayoutCssVars","rowElements","selectedIdx","selectedRowIdx","endRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","selectedColumn","slice","isGroupRowSelected","cr","GroupRow","findIndex","c","getViewportRows","isSummaryRowSelected","p1","p2","async","getGridContent","gridElement","renderToStaticMarkup","grid","document","createElement","innerHTML","cloneElement","head","getRows","body","foot","selector","from","querySelectorAll","gridRow","gridCell","innerText","serialiseCellValue","formattedValue","replace","dateFormatter","Intl","navigator","currencyFormatter","currency","TimestampFormatter","timestamp","CurrencyFormatter","createRows","now","Date","title","client","faker","area","country","contact","assignee","progress","startTimestamp","endTimestamp","budget","transaction","account","version","available","getComparator","a","b","CommonFeatures","setRows","setSortColumns","setSelectedRows","countries","r","p","autoFocus","editOnClick","createPortal","open","valueAsNumber","renderFormatter","totalCount","getColumns","yesCount","sortedRows","compResult","comparator","onExport","fileName","content","data","downloadLink","download","url","URL","createObjectURL","click","revokeObjectURL","downloadFile","Blob","exportToCsv","utils","writeFile","Promise","all","wb","book_new","ws","aoa_to_sheet","book_append_sheet","exportToXlsx","jsPDF","autoTable","default","doc","orientation","unit","horizontalPageBreak","styles","cellPadding","fontSize","cellWidth","tableWidth","save","exportToPdf","ExportButton","children","exporting","setExporting","titles","ImageFormatter","backgroundImage","avatar","email","firstName","lastName","street","zipCode","date","bs","catchPhrase","companyName","words","sentence","AllFeatures","incompatibleColumns","getRandomDate","getTime","random","toLocaleDateString","task","complete","issueType","startDate","completeDate","CellNavigation","setCellNavigationMode","marginBottom","CellFormatter","ColumnSpanning","String","DraggableHeaderRenderer","onColumnsReorder","drag","useDrag","item","collect","monitor","isOver","drop","useDrop","accept","canDrop","opacity","backgroundColor","createColumns","ColumnsReordering","setColumns","draggableColumns","HeaderRenderer","handleColumnsReorder","sourceKey","targetKey","sourceColumnIndex","targetColumnIndex","reorderedColumns","splice","localeCompare","reverse","DndProvider","backend","HTML5Backend","product","price","ContextMenuDemo","nextId","setNextId","useReducer","insertRow","sports","prev","gold","silver","year","sport","athlete","bronze","r1","r2","options","Grouping","selectedOptions","setSelectedOptions","setExpandedGroupIds","option","newOptions","toggleOption","filterColumnClassName","filterClassname","FilterContext","inputStopPropagation","selectStopPropagation","HeaderFilters","filters","setFilters","developer","enabled","developerOptions","label","headerCellClass","rest","list","filteredRows","FilterRenderer","createFakeRowObjectData","InfiniteScrolling","isLoading","setIsLoading","isAtBottom","newRows","resolve","setTimeout","CellExpanderFormatter","onCellExpand","expanded","createDepartments","departments","department","productsMap","productColumns","departmentColumns","MasterDetail","ProductGrid","products","description","getProducts","MillionCells","EmptyRowsRenderer","textAlign","gridColumn","lang","NoRows","ResizableGrid","resize","DraggableRowRenderer","onRowReorder","RowsReordering","fromIndex","toIndex","ScrollToRow","count","setValue","marginRight","ChildRowDeleteButton","isDeleteSubRowEnabled","onDeleteSubRow","reducer","rowIndex","toggleSubRow","find","filter","parentRowIndex","newChildren","sr","deleteSubRow","defaultRows","format","TreeView","dispatch","allowDelete","setAllowDelete","hasChildren","marginLeft","VariableRowHeight","Root","path","render","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","m","O","result","chunkIds","notFulfilled","Infinity","fulfilled","j","n","getter","__esModule","getPrototypeOf","obj","t","this","then","ns","create","def","getOwnPropertyNames","definition","o","defineProperty","enumerable","f","chunkId","reduce","promises","u","miniCssF","g","globalThis","Function","prop","prototype","hasOwnProperty","l","done","script","needAttach","scripts","getElementsByTagName","s","getAttribute","charset","timeout","nc","setAttribute","src","onScriptComplete","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","bind","appendChild","Symbol","toStringTag","scriptUrl","importScripts","location","currentScript","installedChunks","installedChunkData","promise","reject","error","errorType","realSrc","message","request","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}