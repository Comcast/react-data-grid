{"version":3,"file":"bundle.js","sources":["../src/hooks/useCombinedRefs.ts","../src/hooks/useClickOutside.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useFocusRef.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/ValueFormatter.tsx","../src/formatters/ToggleGroupFormatter.tsx","../src/utils/domUtils.ts","../src/Columns.tsx","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/hooks/useLatestFunc.ts","../src/headerCells/SortableHeaderCell.tsx","../src/utils/keyboardUtils.ts","../src/utils/selectedCellUtils.ts","../src/utils/index.ts","../src/HeaderCell.tsx","../src/HeaderRow.tsx","../src/FilterRow.tsx","../src/Cell.tsx","../src/editors/EditorContainer.tsx","../src/EditCell.tsx","../src/Row.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/DataGrid.tsx","../src/editors/TextEditor.tsx"],"sourcesContent":["import { useCallback } from 'react';\n\nexport function useCombinedRefs<T>(...refs: readonly React.Ref<T>[]) {\n  return useCallback(\n    (handle: T | null) => {\n      for (const ref of refs) {\n        if (typeof ref === 'function') {\n          ref(handle);\n        } else if (ref !== null) {\n          // @ts-expect-error: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065\n          ref.current = handle;\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    refs\n  );\n}\n","import { useRef, useEffect } from 'react';\n\n/**\n * Detecting outside click on a react component is surprisingly hard.\n * A general approach is to have a global click handler on the document\n * which checks if the click target is inside the editor container or\n * not using editorContainer.contains(e.target). This approach works well\n * until portals are used for editors. Portals render children into a DOM\n * node that exists outside the DOM hierarchy of the parent component so\n * editorContainer.contains(e.target) does not work. Here are some examples\n * of the DOM structure with different types of editors\n *\n *\n * SimpleEditor for example Texbox (No Portals)\n *   <div data-grid>..</div>\n *   <div portal-created-by-the-grid-for-editors>\n *      <div editor-container>\n *        <div simple-editor>..</div>\n *      </div>\n *   </div>\n *\n * ComplexEditor for example Modals (using Portals)\n *   <div data-grid>..</div>\n *   <div portal-created-by-the-grid-for-editors>\n *      <div editor-container>\n *        // Nothing here\n *      </div>\n *   </div>\n *   <div portal-created-by-the-editor>\n *     <div complex-editor>..</div>\n *   </div>\n *\n *\n * One approach to detect outside click is to use synthetic event bubbling through\n * portals. An event fired from inside a portal will propagate to ancestors\n * in the containing React tree, even if those elements are not ancestors\n * in the DOM tree. This means a click handler can be attached on the window\n * and on the editor container. The editor container can set a flag to notify\n * that the click was inside the editor and the window click handler can use\n * this flag to call onClickOutside. This approach however has a few caveats\n * - Click handler on the window is set using window.addEventListener\n * - Click handler on the editor container is set using onClick prop\n *\n * This means if a child component inside the editor calls e.stopPropagation\n * then the click handler on the editor container will not be called whereas\n * the document click handler will be called.\n * https://github.com/facebook/react/issues/12518\n *\n * To solve this issue onClickCapture event is used.\n */\n\nexport function useClickOutside(onClick: () => void) {\n  const frameRequestRef = useRef<number | undefined>();\n\n  function cancelAnimationFrameRequest() {\n    if (typeof frameRequestRef.current === 'number') {\n      cancelAnimationFrame(frameRequestRef.current);\n      frameRequestRef.current = undefined;\n    }\n  }\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `handleDocumentClick` might otherwise miss valid click events.\n  // To that end we instead access the latest `onClick` prop via a ref.\n  const onClickRef = useRef((): void => {\n    throw new Error('Cannot call an event handler while rendering.');\n  });\n\n  useEffect(() => {\n    onClickRef.current = onClick;\n  });\n\n  useEffect(() => {\n    function onOutsideClick() {\n      frameRequestRef.current = undefined;\n      onClickRef.current();\n    }\n\n    function onWindowCaptureClick() {\n      cancelAnimationFrameRequest();\n      frameRequestRef.current = requestAnimationFrame(onOutsideClick);\n    }\n\n    window.addEventListener('click', onWindowCaptureClick, { capture: true });\n\n    return () => {\n      window.removeEventListener('click', onWindowCaptureClick, { capture: true });\n      cancelAnimationFrameRequest();\n    };\n  }, []);\n\n  return cancelAnimationFrameRequest;\n}\n","import { useRef, useState, useLayoutEffect } from 'react';\n\n// https://github.com/microsoft/TypeScript/issues/37861\ninterface ResizeObserverEntry {\n  contentRect: {\n    width: number;\n    height: number;\n  };\n}\n\ntype ResizeObserver = new (callback: (entries: readonly ResizeObserverEntry[]) => void) => {\n  observe: (target: Element) => void;\n  disconnect: () => void;\n};\n\nexport function useGridDimensions(): [React.RefObject<HTMLDivElement>, number, number] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [gridWidth, setGridWidth] = useState(1);\n  const [gridHeight, setGridHeight] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window as typeof window & { ResizeObserver: ResizeObserver };\n\n    // don't break in jest/jsdom and browsers that don't support ResizeObserver\n    if (ResizeObserver == null) return;\n\n    const resizeObserver = new ResizeObserver(() => {\n      // Get dimensions without scrollbars.\n      // The dimensions given by the callback entries in Firefox do not substract the scrollbar sizes.\n      const { clientWidth, clientHeight } = gridRef.current!;\n      setGridWidth(clientWidth);\n      setGridHeight(clientHeight);\n    });\n\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, gridWidth, gridHeight];\n}\n","import { useRef, useLayoutEffect } from 'react';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isCellSelected: boolean | undefined) {\n  const ref = useRef<T>(null);\n  useLayoutEffect(() => {\n    if (!isCellSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isCellSelected]);\n\n  return ref;\n}\n","import clsx from 'clsx';\n\nimport { useFocusRef } from '../hooks/useFocusRef';\n\ntype SharedInputProps = Pick<React.InputHTMLAttributes<HTMLInputElement>,\n  | 'disabled'\n  | 'tabIndex'\n  | 'onClick'\n  | 'aria-label'\n  | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected?: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  isCellSelected,\n  disabled,\n  onClick,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const inputRef = useFocusRef<HTMLInputElement>(isCellSelected);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label className={clsx('rdg-checkbox-label', { 'rdg-checkbox-label-disabled': disabled })}>\n      <input\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        tabIndex={tabIndex}\n        ref={inputRef}\n        type=\"checkbox\"\n        className=\"rdg-checkbox-input\"\n        disabled={disabled}\n        checked={value}\n        onChange={handleChange}\n        onClick={onClick}\n      />\n      <div className=\"rdg-checkbox\" />\n    </label>\n  );\n}\n","import type { FormatterProps } from '../types';\n\nexport function ValueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nexport function ToggleGroupFormatter<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const cellRef = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={cellRef}\n      className=\"rdg-group-cell-content\"\n      tabIndex={-1}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className=\"rdg-caret\">\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","export function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function wrapEvent<E extends React.SyntheticEvent>(ourHandler: React.EventHandler<E>, theirHandler: React.EventHandler<E> | undefined) {\n  if (theirHandler === undefined) return ourHandler;\n\n  return function(event: E) {\n    ourHandler(event);\n    theirHandler(event);\n  };\n}\n","import { SelectCellFormatter } from './formatters';\nimport type { Column } from './types';\nimport { stopPropagation } from './utils/domUtils';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n      />\n    );\n  },\n  formatter(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select\"\n        tabIndex={-1}\n        isCellSelected={props.isCellSelected}\n        value={props.isRowSelected}\n        onClick={stopPropagation}\n        onChange={props.onRowSelectionChange}\n      />\n    );\n  },\n  groupFormatter(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select Group\"\n        tabIndex={-1}\n        isCellSelected={props.isCellSelected}\n        value={props.isRowSelected}\n        onChange={props.onRowSelectionChange}\n        // Stop propagation to prevent row selection\n        onClick={stopPropagation}\n      />\n    );\n  }\n};\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column, ColumnMetric } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { ValueFormatter, ToggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\n\ninterface ViewportColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy?: readonly string[];\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n}\n\nexport function useViewportColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy\n}: ViewportColumnsArgs<R, SR>) {\n  const minColumnWidth = defaultColumnOptions?.minWidth ?? 80;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? ValueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, lastFrozenColumnIndex, groupBy } = useMemo(() => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map(rawColumn => {\n      const isGroup = rawGroupBy?.includes(rawColumn.key);\n\n      const column: CalculatedColumn<R, SR> = {\n        ...rawColumn,\n        idx: 0,\n        // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n        frozen: isGroup || rawColumn.frozen || false,\n        isLastFrozenColumn: false,\n        rowGroup: isGroup,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (column.frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (idx === lastFrozenColumnIndex) {\n        column.isLastFrozenColumn = true;\n      }\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n        column.groupFormatter ??= ToggleGroupFormatter;\n      }\n    });\n\n    return {\n      columns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [rawColumns, defaultFormatter, defaultResizable, defaultSortable, rawGroupBy]);\n\n  const { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics } = useMemo(() => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalColumnWidth = 0;\n    let totalFrozenColumnWidth = 0;\n    let templateColumns = '';\n    let allocatedWidth = 0;\n    let unassignedColumnsCount = 0;\n\n    for (const column of columns) {\n      let width = getSpecifiedWidth(column, columnWidths, viewportWidth);\n\n      if (width === undefined) {\n        unassignedColumnsCount++;\n      } else {\n        width = clampColumnWidth(width, column, minColumnWidth);\n        allocatedWidth += width;\n        columnMetrics.set(column, { width, left: 0 });\n      }\n    }\n\n    const unallocatedWidth = viewportWidth - allocatedWidth;\n    const unallocatedColumnWidth = unallocatedWidth / unassignedColumnsCount;\n\n    for (const column of columns) {\n      let width;\n      if (columnMetrics.has(column)) {\n        const columnMetric = columnMetrics.get(column)!;\n        columnMetric.left = left;\n        ({ width } = columnMetric);\n      } else {\n        width = clampColumnWidth(unallocatedColumnWidth, column, minColumnWidth);\n        columnMetrics.set(column, { width, left });\n      }\n      totalColumnWidth += width;\n      left += width;\n      templateColumns += `${width}px `;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {\n      '--template-columns': templateColumns\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--frozen-left-${column.key}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics };\n  }, [columnWidths, columns, viewportWidth, minColumnWidth, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = Math.min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = Math.max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = Math.min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [columns, columnMetrics, lastFrozenColumnIndex, scrollLeft, totalFrozenColumnWidth, viewportWidth]);\n\n  const viewportColumns = useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < colOverscanStartIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [colOverscanEndIdx, colOverscanStartIdx, columns]);\n\n  return { columns, viewportColumns, layoutCssVars, columnMetrics, totalColumnWidth, lastFrozenColumnIndex, totalFrozenColumnWidth, groupBy };\n}\n\nfunction getSpecifiedWidth<R, SR>(\n  { key, width }: Column<R, SR>,\n  columnWidths: ReadonlyMap<string, number>,\n  viewportWidth: number\n): number | undefined {\n  if (columnWidths.has(key)) {\n    // Use the resized width if available\n    return columnWidths.get(key);\n  }\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (typeof width === 'string' && /^\\d+%$/.test(width)) {\n    return Math.floor(viewportWidth * parseInt(width, 10) / 100);\n  }\n  return undefined;\n}\n\nfunction clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: Column<R, SR>,\n  minColumnWidth: number\n): number {\n  width = Math.max(width, minWidth ?? minColumnWidth);\n\n  if (typeof maxWidth === 'number') {\n    return Math.min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useMemo } from 'react';\nimport type { GroupRow, GroupByDictionary } from '../types';\n\nconst RENDER_BACTCH_SIZE = 8;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number;\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper?: (rows: readonly R[], columnKey: string) => Record<string, readonly R[]>;\n  expandedGroupIds?: ReadonlySet<unknown>;\n}\n\n// https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || !rowGrouper) return [undefined, rawRows.length];\n\n    const groupRows = (rows: readonly R[], [groupByKey, ...remainingGroupByKeys]: readonly string[], startRowIndex: number): [GroupByDictionary<R>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] = remainingGroupByKeys.length === 0\n          ? [childRows, childRows.length]\n          : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, allGroupRows] = useMemo(() => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, allGroupRows];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (rows: GroupByDictionary<R> | readonly R[], parentId: string | undefined, level: number): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, allGroupRows];\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const isGroupRow = <R>(row: unknown): row is GroupRow<R> => allGroupRows.has(row);\n\n  const overscanThreshold = 4;\n  const rowVisibleStartIdx = Math.floor(scrollTop / rowHeight);\n  const rowVisibleEndIdx = Math.min(rows.length - 1, Math.floor((scrollTop + clientHeight) / rowHeight));\n  const rowOverscanStartIdx = Math.max(0, Math.floor((rowVisibleStartIdx - overscanThreshold) / RENDER_BACTCH_SIZE) * RENDER_BACTCH_SIZE);\n  const rowOverscanEndIdx = Math.min(rows.length - 1, Math.ceil((rowVisibleEndIdx + overscanThreshold) / RENDER_BACTCH_SIZE) * RENDER_BACTCH_SIZE);\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    isGroupRow\n  };\n}\n","import { useRef, useEffect, useCallback } from 'react';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends (...args: any[]) => any>(fn: T) {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback((...args: Parameters<T>) => {\n    ref.current(...args);\n  }, []);\n}\n","import type { HeaderCellProps } from '../HeaderCell';\nimport type { SortDirection } from '../enums';\n\ntype SharedHeaderCellProps<R, SR> = Pick<HeaderCellProps<R, SR>,\n  | 'column'\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n>;\n\ninterface Props<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nexport default function SortableHeaderCell<R, SR>({\n  column,\n  onSort,\n  sortColumn,\n  sortDirection,\n  children\n}: Props<R, SR>) {\n  sortDirection = sortColumn === column.key && sortDirection || 'NONE';\n  let sortText = '';\n  if (sortDirection === 'ASC') {\n    sortText = '\\u25B2';\n  } else if (sortDirection === 'DESC') {\n    sortText = '\\u25BC';\n  }\n\n  function onClick() {\n    if (!onSort) return;\n    const { sortDescendingFirst } = column;\n    let direction: SortDirection;\n    switch (sortDirection) {\n      case 'ASC':\n        direction = sortDescendingFirst ? 'NONE' : 'DESC';\n        break;\n      case 'DESC':\n        direction = sortDescendingFirst ? 'ASC' : 'NONE';\n        break;\n      default:\n        direction = sortDescendingFirst ? 'DESC' : 'ASC';\n        break;\n    }\n    onSort(column.key, direction);\n  }\n\n  return (\n    <span className=\"rdg-header-sort-cell\" onClick={onClick}>\n      <span className=\"rdg-header-sort-name\">{children}</span>\n      <span>{sortText}</span>\n    </span>\n  );\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (key === 'Tab' && (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement)) {\n    return target.matches('.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child');\n  }\n  return false;\n}\n","import type { CellNavigationMode } from '../enums';\nimport type { CalculatedColumn, Position, GroupRow } from '../types';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({ selectedPosition, columns, rows, isGroupRow }: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return column.editor != null\n    && !column.rowGroup\n    && !isGroupRow(row)\n    && (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false;\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rowsCount: number;\n  nextPosition: Position;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({ cellNavigationMode, columns, rowsCount, nextPosition }: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  if (cellNavigationMode !== 'NONE') {\n    const { idx, rowIdx } = nextPosition;\n    const columnsCount = columns.length;\n    const isAfterLastColumn = idx === columnsCount;\n    const isBeforeFirstColumn = idx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = rowIdx === rowsCount - 1;\n        if (!isLastRow) {\n          return {\n            idx: 0,\n            rowIdx: rowIdx + 1\n          };\n        }\n      } else if (cellNavigationMode === 'LOOP_OVER_ROW') {\n        return {\n          rowIdx,\n          idx: 0\n        };\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = rowIdx === 0;\n        if (!isFirstRow) {\n          return {\n            rowIdx: rowIdx - 1,\n            idx: columnsCount - 1\n          };\n        }\n      } else if (cellNavigationMode === 'LOOP_OVER_ROW') {\n        return {\n          rowIdx,\n          idx: columnsCount - 1\n        };\n      }\n    }\n  }\n\n  return nextPosition;\n}\n\ninterface CanExitGridOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rowsCount: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid<R, SR>({ cellNavigationMode, columns, rowsCount, selectedPosition: { rowIdx, idx }, shiftKey }: CanExitGridOpts<R, SR>): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === columns.length - 1;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === rowsCount - 1;\n    const atFirstRow = rowIdx === 0;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","import type { CalculatedColumn } from '../types';\n\nexport * from './domUtils';\nexport * from './keyboardUtils';\nexport * from './selectedCellUtils';\n\nexport function assertIsValidKeyGetter<R>(keyGetter: unknown): asserts keyGetter is (row: R) => React.Key {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function getCellStyle<R, SR>(column: CalculatedColumn<R, SR>): React.CSSProperties {\n  return column.frozen\n    ? { left: `var(--frozen-left-${column.key})` }\n    : { gridColumnStart: column.idx + 1 };\n}\n","import clsx from 'clsx';\nimport type { SortDirection } from './enums';\nimport SortableHeaderCell from './headerCells/SortableHeaderCell';\nimport type { HeaderRowProps } from './HeaderRow';\nimport type { CalculatedColumn } from './types';\nimport { getCellStyle } from './utils';\n\nfunction getAriaSort(sortDirection?: SortDirection) {\n  switch (sortDirection) {\n    case 'ASC':\n      return 'ascending';\n    case 'DESC':\n      return 'descending';\n    default:\n      return 'none';\n  }\n}\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR>,\n  'sortColumn' | 'sortDirection' | 'onSort' | 'allRowsSelected'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  onResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  onResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumn,\n  sortDirection,\n  onSort\n}: HeaderCellProps<R, SR>) {\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right } = currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      if (event.pointerId !== pointerId) return;\n      if (event.pointerType === 'mouse' && event.buttons !== 1) {\n        onPointerUp(event);\n        return;\n      }\n      const width =\n        event.clientX + offset - currentTarget.getBoundingClientRect().left;\n      if (width > 0) {\n        onResize(column, width);\n      }\n    }\n\n    function onPointerUp(event: PointerEvent) {\n      if (event.pointerId !== pointerId) return;\n      window.removeEventListener('pointermove', onPointerMove);\n      window.removeEventListener('pointerup', onPointerUp);\n    }\n\n    event.preventDefault();\n    window.addEventListener('pointermove', onPointerMove);\n    window.addEventListener('pointerup', onPointerUp);\n  }\n\n  function getCell() {\n    if (column.headerRenderer) {\n      return (\n        <column.headerRenderer\n          column={column}\n          sortColumn={sortColumn}\n          sortDirection={sortDirection}\n          onSort={onSort}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={onAllRowsSelectionChange}\n        />\n      );\n    }\n\n    if (column.sortable) {\n      return (\n        <SortableHeaderCell\n          column={column}\n          onSort={onSort}\n          sortColumn={sortColumn}\n          sortDirection={sortDirection}\n        >\n          {column.name}\n        </SortableHeaderCell>\n      );\n    }\n\n    return column.name;\n  }\n\n  const className = clsx('rdg-cell', column.headerCellClass, {\n    'rdg-cell-resizable': column.resizable,\n    'rdg-cell-frozen': column.frozen,\n    'rdg-cell-frozen-last': column.isLastFrozenColumn\n  });\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-sort={\n        sortColumn === column.key ? getAriaSort(sortDirection) : undefined\n      }\n      className={className}\n      style={getCellStyle(column)}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {getCell()}\n    </div>\n  );\n}\n","import { useCallback, memo } from 'react';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn } from './types';\nimport { assertIsValidKeyGetter } from './utils';\nimport type { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, SR> = Pick<DataGridProps<R, SR>,\n  | 'rows'\n  | 'onSelectedRowsChange'\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'rowKeyGetter'\n>;\n\nexport interface HeaderRowProps<R, SR> extends SharedDataGridProps<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n}\n\nfunction HeaderRow<R, SR>({\n  columns,\n  rows,\n  rowKeyGetter,\n  onSelectedRowsChange,\n  allRowsSelected,\n  onColumnResize,\n  sortColumn,\n  sortDirection,\n  onSort\n}: HeaderRowProps<R, SR>) {\n  const handleAllRowsSelectionChange = useCallback((checked: boolean) => {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter(rowKeyGetter);\n\n    const newSelectedRows = new Set<React.Key>();\n    if (checked) {\n      for (const row of rows) {\n        newSelectedRows.add(rowKeyGetter(row));\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }, [onSelectedRowsChange, rows, rowKeyGetter]);\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className=\"rdg-header-row\"\n    >\n      {columns.map(column => {\n        return (\n          <HeaderCell<R, SR>\n            key={column.key}\n            column={column}\n            onResize={onColumnResize}\n            allRowsSelected={allRowsSelected}\n            onAllRowsSelectionChange={handleAllRowsSelectionChange}\n            onSort={onSort}\n            sortColumn={sortColumn}\n            sortDirection={sortDirection}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR>(props: HeaderRowProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\n\nimport { getCellStyle } from './utils';\nimport type { CalculatedColumn, Filters } from './types';\nimport type { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, SR> = Pick<DataGridProps<R, SR>,\n  | 'filters'\n  | 'onFiltersChange'\n>;\n\ninterface FilterRowProps<R, SR> extends SharedDataGridProps<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n}\n\nfunction FilterRow<R, SR>({\n  columns,\n  filters,\n  onFiltersChange\n}: FilterRowProps<R, SR>) {\n  function onChange(key: string, value: unknown) {\n    const newFilters: Filters = { ...filters };\n    newFilters[key] = value;\n    onFiltersChange?.(newFilters);\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={2}\n      className=\"rdg-filter-row\"\n    >\n      {columns.map(column => {\n        const { key } = column;\n        const className = clsx('rdg-cell', {\n          'rdg-cell-frozen': column.frozen,\n          'rdg-cell-frozen-last': column.isLastFrozenColumn\n        });\n\n        return (\n          <div\n            key={key}\n            className={className}\n            style={getCellStyle(column)}\n          >\n            {column.filterRenderer && (\n              <column.filterRenderer\n                column={column}\n                value={filters?.[column.key]}\n                onChange={value => onChange(key, value)}\n              />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(FilterRow) as <R, SR>(props: FilterRowProps<R, SR>) => JSX.Element;\n","import { forwardRef, memo, useRef } from 'react';\nimport clsx from 'clsx';\n\nimport type { CellRendererProps } from './types';\nimport { getCellStyle, wrapEvent } from './utils';\nimport { useCombinedRefs } from './hooks';\n\nfunction Cell<R, SR>({\n  className,\n  column,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  isRowSelected,\n  row,\n  rowIdx,\n  dragHandleProps,\n  onRowClick,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  selectRow,\n  ...props\n}: CellRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  const cellRef = useRef<HTMLDivElement>(null);\n\n  const { cellClass } = column;\n  className = clsx(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn,\n      'rdg-cell-selected': isCellSelected,\n      'rdg-cell-copied': isCopied,\n      'rdg-cell-dragged-over': isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n\n  function selectCellWrapper(openEditor?: boolean) {\n    selectCell({ idx: column.idx, rowIdx }, openEditor);\n  }\n\n  function handleClick() {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(rowIdx, row, column);\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(rowIdx, newRow);\n  }\n\n  function onRowSelectionChange(checked: boolean, isShiftClick: boolean) {\n    selectRow({ rowIdx, checked, isShiftClick });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      ref={useCombinedRefs(cellRef, ref)}\n      className={className}\n      style={getCellStyle(column)}\n      onClick={wrapEvent(handleClick, onClick)}\n      onDoubleClick={wrapEvent(handleDoubleClick, onDoubleClick)}\n      onContextMenu={wrapEvent(handleContextMenu, onContextMenu)}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          <column.formatter\n            column={column}\n            rowIdx={rowIdx}\n            row={row}\n            isCellSelected={isCellSelected}\n            isRowSelected={isRowSelected}\n            onRowSelectionChange={onRowSelectionChange}\n            onRowChange={handleRowChange}\n          />\n          {dragHandleProps && (\n            <div className=\"rdg-cell-drag-handle\" {...dragHandleProps} />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Cell)) as <R, SR = unknown>(props: CellRendererProps<R, SR> & React.RefAttributes<HTMLDivElement>) => JSX.Element;\n","import { createPortal } from 'react-dom';\n\nimport type { EditorProps } from '../types';\nimport { useClickOutside } from '../hooks';\n\nexport default function EditorContainer<R, SR>({\n  row,\n  column,\n  onRowChange,\n  ...props\n}: EditorProps<R, SR>) {\n  const onClickCapture = useClickOutside(() => onRowChange(row, true));\n  if (column.editor === undefined) return null;\n\n  const editor = (\n    <div className=\"rdg-editor-container\" onClickCapture={onClickCapture}>\n      <column.editor\n        row={row}\n        column={column}\n        onRowChange={onRowChange}\n        {...props}\n      />\n    </div>\n  );\n\n  if (column.editorOptions?.createPortal) {\n    return createPortal(editor, props.editorPortalTarget);\n  }\n\n  return editor;\n}\n","import { useState, useCallback } from 'react';\nimport clsx from 'clsx';\n\nimport EditorContainer from './editors/EditorContainer';\nimport { getCellStyle } from './utils';\nimport type { CellRendererProps, SharedEditorProps, Omit } from './types';\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>,\n  | 'rowIdx'\n  | 'row'\n  | 'column'\n>;\n\ninterface EditCellProps<R, SR> extends SharedCellRendererProps<R, SR>, Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  editorProps: SharedEditorProps<R>;\n}\n\nexport default function EditCell<R, SR>({\n  className,\n  column,\n  row,\n  rowIdx,\n  editorProps,\n  ...props\n}: EditCellProps<R, SR>) {\n  const [dimensions, setDimensions] = useState<{ left: number; top: number } | null>(null);\n\n  const cellRef = useCallback(node => {\n    if (node !== null) {\n      const { left, top } = node.getBoundingClientRect();\n      setDimensions({ left, top });\n    }\n  }, []);\n\n  const { cellClass } = column;\n  className = clsx(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn\n    },\n    'rdg-cell-selected',\n    'rdg-cell-editing',\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n\n  function getCellContent() {\n    if (dimensions === null) return;\n    const { scrollTop: docTop, scrollLeft: docLeft } = document.scrollingElement ?? document.documentElement;\n    const { left, top } = dimensions;\n    const gridLeft = left + docLeft;\n    const gridTop = top + docTop;\n\n    return (\n      <EditorContainer\n        {...editorProps}\n        rowIdx={rowIdx}\n        column={column}\n        left={gridLeft}\n        top={gridTop}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected\n      ref={cellRef}\n      className={className}\n      style={getCellStyle(column)}\n      {...props}\n    >\n      {getCellContent()}\n    </div>\n  );\n}\n","import { memo, forwardRef } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport EditCell from './EditCell';\nimport type { RowRendererProps, SelectedCellProps } from './types';\nimport { wrapEvent } from './utils';\n\nfunction Row<R, SR = unknown>({\n  cellRenderer: CellRenderer = Cell,\n  className,\n  rowIdx,\n  isRowSelected,\n  copiedCellIdx,\n  draggedOverCellIdx,\n  row,\n  viewportColumns,\n  selectedCellProps,\n  onRowClick,\n  rowClass,\n  setDraggedOverRowIdx,\n  onMouseEnter,\n  top,\n  onRowChange,\n  selectCell,\n  selectRow,\n  'aria-rowindex': ariaRowIndex,\n  'aria-selected': ariaSelected,\n  ...props\n}: RowRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  function handleDragEnter() {\n    setDraggedOverRowIdx?.(rowIdx);\n  }\n\n  className = clsx(\n    'rdg-row',\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, {\n      'rdg-row-selected': isRowSelected,\n      'rdg-group-row-selected': selectedCellProps?.idx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      aria-selected={ariaSelected}\n      ref={ref}\n      className={className}\n      onMouseEnter={wrapEvent(handleDragEnter, onMouseEnter)}\n      style={{ top }}\n      {...props}\n    >\n      {viewportColumns.map(column => {\n        const isCellSelected = selectedCellProps?.idx === column.idx;\n        if (selectedCellProps?.mode === 'EDIT' && isCellSelected) {\n          return (\n            <EditCell<R, SR>\n              key={column.key}\n              rowIdx={rowIdx}\n              column={column}\n              row={row}\n              onKeyDown={selectedCellProps.onKeyDown}\n              editorProps={selectedCellProps.editorProps}\n            />\n          );\n        }\n\n        return (\n          <CellRenderer\n            key={column.key}\n            rowIdx={rowIdx}\n            column={column}\n            row={row}\n            isCopied={copiedCellIdx === column.idx}\n            isDraggedOver={draggedOverCellIdx === column.idx}\n            isCellSelected={isCellSelected}\n            isRowSelected={isRowSelected}\n            dragHandleProps={isCellSelected ? (selectedCellProps as SelectedCellProps).dragHandleProps : undefined}\n            onFocus={isCellSelected ? (selectedCellProps as SelectedCellProps).onFocus : undefined}\n            onKeyDown={isCellSelected ? selectedCellProps!.onKeyDown : undefined}\n            onRowClick={onRowClick}\n            onRowChange={onRowChange}\n            selectCell={selectCell}\n            selectRow={selectRow}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Row)) as <R, SR = unknown>(props: RowRendererProps<R, SR> & React.RefAttributes<HTMLDivElement>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\n\nimport { getCellStyle } from './utils';\nimport type { CalculatedColumn } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<GroupRowRendererProps<R, SR>,\n  | 'id'\n  | 'rowIdx'\n  | 'groupKey'\n  | 'childRows'\n  | 'isExpanded'\n  | 'isRowSelected'\n  | 'selectRow'\n  | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  rowIdx,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  isRowSelected,\n  column,\n  groupColumnIndex,\n  selectRow,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  function onRowSelectionChange(checked: boolean) {\n    selectRow({ rowIdx, checked, isShiftClick: false });\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      key={column.key}\n      className={clsx('rdg-cell', {\n        'rdg-cell-frozen': column.frozen,\n        'rdg-cell-frozen-last': column.isLastFrozenColumn,\n        'rdg-cell-selected': isCellSelected\n      })}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n    >\n      {column.groupFormatter && (!column.rowGroup || groupColumnIndex === column.idx) && (\n        <column.groupFormatter\n          groupKey={groupKey}\n          childRows={childRows}\n          column={column}\n          isExpanded={isExpanded}\n          isCellSelected={isCellSelected}\n          isRowSelected={isRowSelected}\n          onRowSelectionChange={onRowSelectionChange}\n          toggleGroup={toggleGroup}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn, Position, SelectRowEvent, Omit } from './types';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\n\nexport interface GroupRowRendererProps<R, SR = unknown> extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  top: number;\n  level: number;\n  selectedCellIdx?: number;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectCell: (position: Position, enableEditor?: boolean) => void;\n  selectRow: (selectRowEvent: SelectRowEvent) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  top,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectCell,\n  selectRow,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function selectGroup() {\n    selectCell({ rowIdx, idx: -1 });\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-level={level}\n      aria-expanded={isExpanded}\n      className={clsx(\n        'rdg-row',\n        'rdg-group-row',\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, {\n          'rdg-row-selected': isRowSelected,\n          'rdg-group-row-selected': selectedCellIdx === -1 // Select row if there is no selected cell\n        })}\n      onClick={selectGroup}\n      style={{ top }}\n      {...props}\n    >\n      {viewportColumns.map(column => (\n        <GroupCell<R, SR>\n          key={column.key}\n          id={id}\n          rowIdx={rowIdx}\n          groupKey={groupKey}\n          childRows={childRows}\n          isExpanded={isExpanded}\n          isRowSelected={isRowSelected}\n          isCellSelected={selectedCellIdx === column.idx}\n          column={column}\n          groupColumnIndex={idx}\n          selectRow={selectRow}\n          toggleGroup={toggleGroup}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\n\nimport { getCellStyle } from './utils';\nimport type { CellRendererProps } from './types';\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'column'>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  row\n}: SummaryCellProps<R, SR>) {\n  const { summaryFormatter: SummaryFormatter, summaryCellClass } = column;\n  const className = clsx(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn\n    },\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      className={className}\n      style={getCellStyle(column)}\n    >\n      {SummaryFormatter && <SummaryFormatter column={column} row={row} />}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport SummaryCell from './SummaryCell';\nimport type { RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<RowRendererProps<R, SR>,\n  | 'viewportColumns'\n  | 'rowIdx'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  bottom: number;\n}\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  row,\n  viewportColumns,\n  bottom,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={`rdg-row rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'} rdg-summary-row`}\n      style={{ bottom }}\n    >\n      {viewportColumns.map(column => (\n        <SummaryCell<R, SR>\n          key={column.key}\n          column={column}\n          row={row}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import {\n  forwardRef,\n  useState,\n  useRef,\n  useLayoutEffect,\n  useImperativeHandle,\n  useCallback\n} from 'react';\nimport clsx from 'clsx';\n\nimport { useGridDimensions, useViewportColumns, useViewportRows, useLatestFunc } from './hooks';\nimport HeaderRow from './HeaderRow';\nimport FilterRow from './FilterRow';\nimport Row from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport {\n  assertIsValidKeyGetter,\n  onEditorNavigation,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Filters,\n  Position,\n  RowRendererProps,\n  RowsChangeData,\n  SelectRowEvent,\n  SelectedCellProps,\n  EditCellProps,\n  FillEvent,\n  PasteEvent\n} from './types';\nimport type { CellNavigationMode, SortDirection } from './enums';\n\ninterface SelectCellState extends Position {\n  mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  mode: 'EDIT';\n  row: R;\n  originalRow: R;\n  key: string | null;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<Column<R, SR>,\n  | 'formatter'\n  | 'minWidth'\n  | 'resizable'\n  | 'sortable'\n>;\n\nconst body = globalThis.document?.body;\n\nexport interface DataGridHandle {\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, openEditor?: boolean) => void;\n}\n\ntype SharedDivProps = Pick<React.HTMLAttributes<HTMLDivElement>,\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: readonly SR[];\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: (row: R) => React.Key;\n  onRowsChange?: (rows: R[], data: RowsChangeData<R, SR>) => void;\n\n  /**\n   * Dimensions props\n   */\n  /** The height of each row in pixels */\n  rowHeight?: number;\n  /** The height of the header row in pixels */\n  headerRowHeight?: number;\n  /** The height of the header filter row in pixels */\n  headerFiltersHeight?: number;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: ReadonlySet<React.Key>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: (selectedRows: Set<React.Key>) => void;\n  /** The key of the column which is currently being sorted */\n  sortColumn?: string;\n  /** The direction to sort the sortColumn*/\n  sortDirection?: SortDirection;\n  /** Function called whenever grid is sorted*/\n  onSort?: (columnKey: string, direction: SortDirection) => void;\n  filters?: Filters;\n  onFiltersChange?: (filters: Filters) => void;\n  defaultColumnOptions?: DefaultColumnOptions<R, SR>;\n  groupBy?: readonly string[];\n  rowGrouper?: (rows: readonly R[], columnKey: string) => Record<string, readonly R[]>;\n  expandedGroupIds?: ReadonlySet<unknown>;\n  onExpandedGroupIdsChange?: (expandedGroupIds: Set<unknown>) => void;\n  onFill?: (event: FillEvent<R>) => R[];\n  onPaste?: (event: PasteEvent<R>) => R;\n\n  /**\n   * Custom renderers\n   */\n  rowRenderer?: React.ComponentType<RowRendererProps<R, SR>>;\n  emptyRowsRenderer?: React.ComponentType;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: (rowIdx: number, row: R, column: CalculatedColumn<R, SR>) => void;\n  /** Called when the grid is scrolled */\n  onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;\n  /** Called when a column is resized */\n  onColumnResize?: (idx: number, width: number) => void;\n  /** Function called whenever selected cell is changed */\n  onSelectedCellChange?: (position: Position) => void;\n\n  /**\n   * Toggles and modes\n   */\n  /** Toggles whether filters row is displayed or not */\n  enableFilterRow?: boolean;\n  cellNavigationMode?: CellNavigationMode;\n\n  /**\n   * Miscellaneous\n   */\n  /** The node where the editor portal should mount. */\n  editorPortalTarget?: Element;\n  rowClass?: (row: R) => string | undefined;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n*/\nfunction DataGrid<R, SR>({\n  // Grid and data Props\n  columns: rawColumns,\n  rows: rawRows,\n  summaryRows,\n  rowKeyGetter,\n  onRowsChange,\n  // Dimensions props\n  rowHeight = 35,\n  headerRowHeight = rowHeight,\n  headerFiltersHeight = 45,\n  // Feature props\n  selectedRows,\n  onSelectedRowsChange,\n  sortColumn,\n  sortDirection,\n  onSort,\n  filters,\n  onFiltersChange,\n  defaultColumnOptions,\n  groupBy: rawGroupBy,\n  rowGrouper,\n  expandedGroupIds,\n  onExpandedGroupIdsChange,\n  // Custom renderers\n  rowRenderer: RowRenderer = Row,\n  emptyRowsRenderer: EmptyRowsRenderer,\n  // Event props\n  onRowClick,\n  onScroll,\n  onColumnResize,\n  onSelectedCellChange,\n  onFill,\n  onPaste,\n  // Toggles and modes\n  enableFilterRow = false,\n  cellNavigationMode = 'NONE',\n  // Miscellaneous\n  editorPortalTarget = body,\n  className,\n  style,\n  rowClass,\n  // ARIA\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy,\n  'aria-describedby': ariaDescribedBy\n}: DataGridProps<R, SR>, ref: React.Ref<DataGridHandle>) {\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>({ idx: -1, rowIdx: -1, mode: 'SELECT' });\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n\n  /**\n   * refs\n   */\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const isCellFocusable = useRef(false);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const selectRowWrapper = useLatestFunc(selectRow);\n  const selectCellWrapper = useLatestFunc(selectCell);\n  const toggleGroupWrapper = useLatestFunc(toggleGroup);\n  const handleFormatterRowChangeWrapper = useLatestFunc(updateRow);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = enableFilterRow ? 2 : 1;\n  const summaryRowsCount = summaryRows?.length ?? 0;\n  const totalHeaderHeight = headerRowHeight + (enableFilterRow ? headerFiltersHeight : 0);\n  const clientHeight = gridHeight - totalHeaderHeight - summaryRowsCount * rowHeight;\n  const isSelectable = selectedRows !== undefined && onSelectedRowsChange !== undefined;\n\n  const { columns, viewportColumns, layoutCssVars, columnMetrics, totalColumnWidth, lastFrozenColumnIndex, totalFrozenColumnWidth, groupBy } = useViewportColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined\n  });\n\n  const { rowOverscanStartIdx, rowOverscanEndIdx, rows, rowsCount, isGroupRow } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds\n  });\n\n  const hasGroups = groupBy.length > 0 && rowGrouper;\n  const minColIdx = hasGroups ? -1 : 0;\n\n  // Cell drag is not supported on a treegrid\n  const enableCellDragAndDrop = hasGroups ? false : onFill !== undefined;\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (selectedPosition === prevSelectedPosition.current || selectedPosition.mode === 'EDIT' || !isCellWithinBounds(selectedPosition)) return;\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n\n    if (isCellFocusable.current) {\n      isCellFocusable.current = false;\n      return;\n    }\n    focusSinkRef.current!.focus({ preventScroll: true });\n  });\n\n  useImperativeHandle(ref, () => ({\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: rowIdx * rowHeight,\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n  * callbacks\n  */\n  const handleColumnResize = useCallback((column: CalculatedColumn<R, SR>, width: number) => {\n    const newColumnWidths = new Map(columnWidths);\n    newColumnWidths.set(column.key, width);\n    setColumnWidths(newColumnWidths);\n\n    onColumnResize?.(column.idx, width);\n  }, [columnWidths, onColumnResize]);\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n  * event handlers\n  */\n  function selectRow({ rowIdx, checked, isShiftClick }: SelectRowEvent) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    const row = rows[rowIdx];\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = Math.sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key, keyCode } = event;\n    const row = rows[selectedPosition.rowIdx];\n\n    if (\n      onPaste\n      && isCtrlKeyHeldDown(event)\n      && isCellWithinBounds(selectedPosition)\n      && !isGroupRow(row)\n      && selectedPosition.idx !== -1\n      && selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (\n      isCellWithinBounds(selectedPosition)\n      && isGroupRow(row)\n      && selectedPosition.idx === -1\n      && (\n        // Collapse the current group row if it is focused and is in expanded state\n        (key === 'ArrowLeft' && row.isExpanded)\n        // Expand the current group row if it is focused and is in collapsed state\n        || (key === 'ArrowRight' && !row.isExpanded)\n      )) {\n      event.preventDefault(); // Prevents scrolling\n      toggleGroup(row.id);\n      return;\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        closeEditor();\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleFocus() {\n    isCellFocusable.current = true;\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    setScrollLeft(scrollLeft);\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const updatedRows = [...rawRows];\n    updatedRows[rowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rowIdx],\n      column: columns[selectedPosition.idx]\n    });\n  }\n\n  function commitEditorChanges() {\n    if (\n      columns[selectedPosition.idx]?.editor === undefined\n      || selectedPosition.mode === 'SELECT'\n      || selectedPosition.row === selectedPosition.originalRow) {\n      return;\n    }\n\n    const rowIdx = getRawRowIdx(selectedPosition.rowIdx);\n    updateRow(rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    setCopiedCell({ row: rawRows[getRawRowIdx(rowIdx)], columnKey: columns[idx].key });\n  }\n\n  function handlePaste() {\n    const { idx, rowIdx } = selectedPosition;\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n    if (\n      !onPaste\n      || !onRowsChange\n      || copiedCell === null\n      || !isCellEditable(selectedPosition)\n    ) {\n      return;\n    }\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: columns[idx].key\n    });\n\n    updateRow(rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!isCellWithinBounds(selectedPosition)) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key } = event;\n    const column = columns[selectedPosition.idx];\n\n    if (selectedPosition.mode === 'EDIT') {\n      if (key === 'Enter') {\n        // Custom editors can listen for the event and stop propagation to prevent commit\n        commitEditorChanges();\n        closeEditor();\n      }\n      return;\n    }\n\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        key,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined || !onFill || !onRowsChange) return;\n\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[rowIdx];\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    const targetRows = rawRows.slice(startRowIndex, endRowIndex);\n    const column = columns[idx];\n    const updatedTargetRows = onFill({ columnKey: column.key, sourceRow, targetRows });\n    const updatedRows = [...rawRows];\n    const indexes: number[] = [];\n\n    for (let i = startRowIndex; i < endRowIndex; i++) {\n      updatedRows[i] = updatedTargetRows[i - startRowIndex];\n      indexes.push(i);\n    }\n\n    onRowsChange(updatedRows, { indexes, column });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    if (!onFill || !onRowsChange) return;\n\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[rowIdx];\n    const targetRows = rawRows.slice(rowIdx + 1);\n    const column = columns[idx];\n    const updatedTargetRows = onFill({ columnKey: column.key, sourceRow, targetRows });\n    const updatedRows = [...rawRows];\n    const indexes: number[] = [];\n\n    for (let i = rowIdx + 1; i < updatedRows.length; i++) {\n      updatedRows[i] = updatedTargetRows[i - rowIdx - 1];\n      indexes.push(i);\n    }\n\n    onRowsChange(updatedRows, { indexes, column });\n  }\n\n  function handleEditorRowChange(row: Readonly<R>, commitChanges?: boolean) {\n    if (selectedPosition.mode === 'SELECT') return;\n    if (commitChanges) {\n      updateRow(getRawRowIdx(selectedPosition.rowIdx), row);\n      closeEditor();\n    } else {\n      setSelectedPosition(position => ({ ...position, row }));\n    }\n  }\n\n  function handleOnClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      commitEditorChanges();\n    }\n    closeEditor();\n  }\n\n  /**\n   * utils\n   */\n  function isCellWithinBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= 0 && rowIdx < rows.length && idx >= minColIdx && idx < columns.length;\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return isCellWithinBounds(position)\n      && isSelectedCellEditable<R, SR>({ columns, rows, selectedPosition: position, isGroupRow });\n  }\n\n  function selectCell(position: Position, enableEditor = false): void {\n    if (!isCellWithinBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', key: null, row, originalRow: row });\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n    onSelectedCellChange?.({ ...position });\n  }\n\n  function closeEditor() {\n    if (selectedPosition.mode === 'SELECT') return;\n    setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      const { clientWidth } = current;\n      const { left, width } = columnMetrics.get(columns[idx])!;\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = left + width > clientWidth + scrollLeft;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = left - totalFrozenColumnWidth;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = left + width - clientWidth;\n      }\n    }\n\n    if (typeof rowIdx === 'number') {\n      if (rowIdx * rowHeight < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowIdx * rowHeight;\n      } else if ((rowIdx + 1) * rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = (rowIdx + 1) * rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = isCellWithinBounds(selectedPosition) && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (\n      key === 'ArrowLeft'\n      && isRowSelected\n      && isGroupRow(row)\n      && !row.isExpanded\n      && row.level !== 0\n    ) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case 'ArrowLeft':\n        return { idx: idx - 1, rowIdx };\n      case 'ArrowRight':\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        if (selectedPosition.idx === -1 && selectedPosition.rowIdx === -1) {\n          return shiftKey ? { idx: columns.length - 1, rowIdx: rows.length - 1 } : { idx: 0, rowIdx: 0 };\n        }\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return ctrlKey ? { idx: 0, rowIdx: 0 } : { idx: 0, rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return ctrlKey ? { idx: columns.length - 1, rowIdx: rows.length - 1 } : { idx: columns.length - 1, rowIdx };\n      case 'PageUp':\n        return { idx, rowIdx: rowIdx - Math.floor(clientHeight / rowHeight) };\n      case 'PageDown':\n        return { idx, rowIdx: rowIdx + Math.floor(clientHeight / rowHeight) };\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (selectedPosition.mode === 'EDIT') {\n      const onNavigation = columns[selectedPosition.idx].editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) return;\n    }\n    const { key, shiftKey } = event;\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    let nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      // If we are in a position to leave the grid, stop editing but stay in that cell\n      if (canExitGrid({ shiftKey, cellNavigationMode, columns, rowsCount: rows.length, selectedPosition })) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE'\n        ? 'CHANGE_ROW'\n        : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    nextPosition = getNextSelectedCellPosition<R, SR>({\n      columns,\n      rowsCount: rows.length,\n      cellNavigationMode: mode,\n      nextPosition\n    });\n\n    selectCell(nextPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver = rowIdx < draggedOverRowIdx\n      ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n      : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getSelectedCellProps(rowIdx: number): SelectedCellProps | EditCellProps<R> | undefined {\n    if (selectedPosition.rowIdx !== rowIdx) return;\n\n    if (selectedPosition.mode === 'EDIT') {\n      return {\n        mode: 'EDIT',\n        idx: selectedPosition.idx,\n        onKeyDown: handleKeyDown,\n        editorProps: {\n          editorPortalTarget,\n          rowHeight,\n          row: selectedPosition.row,\n          onRowChange: handleEditorRowChange,\n          onClose: handleOnClose\n        }\n      };\n    }\n\n    return {\n      mode: 'SELECT',\n      idx: selectedPosition.idx,\n      onFocus: handleFocus,\n      onKeyDown: handleKeyDown,\n      dragHandleProps: enableCellDragAndDrop && isCellEditable(selectedPosition)\n        ? { onMouseDown: handleMouseDown, onDoubleClick: handleDoubleClick }\n        : undefined\n    };\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n    for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n      const row = rows[rowIdx];\n      const top = rowIdx * rowHeight + totalHeaderHeight;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        rowElements.push(\n          <GroupRowRenderer<R, SR>\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={viewportColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            top={top}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedPosition.rowIdx === rowIdx ? selectedPosition.idx : undefined}\n            isRowSelected={isSelectable && row.childRows.every(cr => selectedRows?.has(rowKeyGetter!(cr)))}\n            onFocus={selectedPosition.rowIdx === rowIdx ? handleFocus : undefined}\n            onKeyDown={selectedPosition.rowIdx === rowIdx ? handleKeyDown : undefined}\n            selectCell={selectCellWrapper}\n            selectRow={selectRowWrapper}\n            toggleGroup={toggleGroupWrapper}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key: React.Key = hasGroups ? startRowIndex : rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n\n      rowElements.push(\n        <RowRenderer\n          aria-rowindex={headerRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1} // aria-rowindex is 1 based\n          aria-selected={isSelectable ? isRowSelected : undefined}\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          viewportColumns={viewportColumns}\n          isRowSelected={isRowSelected}\n          onRowClick={onRowClick}\n          rowClass={rowClass}\n          top={top}\n          copiedCellIdx={copiedCell !== null && copiedCell.row === row ? columns.findIndex(c => c.key === copiedCell.columnKey) : undefined}\n          draggedOverCellIdx={getDraggedOverCellIdx(rowIdx)}\n          setDraggedOverRowIdx={isDragging ? setDraggedOverRowIdx : undefined}\n          selectedCellProps={getSelectedCellProps(rowIdx)}\n          onRowChange={handleFormatterRowChangeWrapper}\n          selectCell={selectCellWrapper}\n          selectRow={selectRowWrapper}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx >= columns.length || selectedPosition.rowIdx >= rows.length) {\n    setSelectedPosition({ idx: -1, rowIdx: -1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  if (selectedPosition.mode === 'EDIT' && rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n    // Discard changes if rows are updated from outside\n    closeEditor();\n  }\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx('rdg', { 'rdg-viewport-dragging': isDragging }, className)}\n      style={{\n        ...style,\n        '--header-row-height': `${headerRowHeight}px`,\n        '--filter-row-height': `${headerFiltersHeight}px`,\n        '--row-width': `${totalColumnWidth}px`,\n        '--row-height': `${rowHeight}px`,\n        ...layoutCssVars\n      } as unknown as React.CSSProperties}\n      ref={gridRef}\n      onScroll={handleScroll}\n    >\n      <HeaderRow<R, SR>\n        rowKeyGetter={rowKeyGetter}\n        rows={rawRows}\n        columns={viewportColumns}\n        onColumnResize={handleColumnResize}\n        allRowsSelected={selectedRows?.size === rawRows.length}\n        onSelectedRowsChange={onSelectedRowsChange}\n        sortColumn={sortColumn}\n        sortDirection={sortDirection}\n        onSort={onSort}\n      />\n      {enableFilterRow && (\n        <FilterRow<R, SR>\n          columns={viewportColumns}\n          filters={filters}\n          onFiltersChange={onFiltersChange}\n        />\n      )}\n      {rows.length === 0 && EmptyRowsRenderer ? <EmptyRowsRenderer /> : (\n        <>\n          <div\n            ref={focusSinkRef}\n            tabIndex={0}\n            className=\"rdg-focus-sink\"\n            onKeyDown={handleKeyDown}\n          />\n          <div style={{ height: Math.max(rows.length * rowHeight, clientHeight) }} />\n          {getViewportRows()}\n          {summaryRows?.map((row, rowIdx) => (\n            <SummaryRow<R, SR>\n              aria-rowindex={headerRowsCount + rowsCount + rowIdx + 1}\n              key={rowIdx}\n              rowIdx={rowIdx}\n              row={row}\n              bottom={rowHeight * (summaryRows.length - 1 - rowIdx)}\n              viewportColumns={viewportColumns}\n            />\n          ))}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown>(props: DataGridProps<R, SR> & React.RefAttributes<DataGridHandle>) => JSX.Element;\n","import type { EditorProps } from '../types';\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function TextEditor<TRow, TSummaryRow = unknown>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className=\"rdg-text-editor\"\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={event => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n"],"names":["useCombinedRefs","refs","useCallback","handle","ref","current","useClickOutside","onClick","frameRequestRef","useRef","cancelAnimationFrameRequest","cancelAnimationFrame","undefined","onClickRef","Error","useEffect","onOutsideClick","onWindowCaptureClick","requestAnimationFrame","window","addEventListener","capture","removeEventListener","useGridDimensions","gridRef","gridWidth","setGridWidth","useState","gridHeight","setGridHeight","useLayoutEffect","ResizeObserver","resizeObserver","clientWidth","clientHeight","observe","disconnect","useFocusRef","isCellSelected","focus","preventScroll","SelectCellFormatter","value","tabIndex","disabled","onChange","ariaLabel","ariaLabelledBy","inputRef","handleChange","e","target","checked","nativeEvent","shiftKey","_jsxs","_jsx","ValueFormatter","props","row","column","key","ToggleGroupFormatter","groupKey","isExpanded","toggleGroup","cellRef","handleKeyDown","d","stopPropagation","event","wrapEvent","ourHandler","theirHandler","SELECT_COLUMN_KEY","SelectColumn","name","width","maxWidth","resizable","sortable","frozen","headerRenderer","allRowsSelected","onAllRowsSelectionChange","formatter","isRowSelected","onRowSelectionChange","groupFormatter","useViewportColumns","rawColumns","columnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","minColumnWidth","minWidth","defaultFormatter","defaultSortable","defaultResizable","columns","lastFrozenColumnIndex","groupBy","useMemo","map","rawColumn","isGroup","includes","idx","isLastFrozenColumn","rowGroup","sort","aKey","frozenA","bKey","frozenB","indexOf","forEach","push","layoutCssVars","totalColumnWidth","totalFrozenColumnWidth","columnMetrics","Map","left","templateColumns","allocatedWidth","unassignedColumnsCount","getSpecifiedWidth","clampColumnWidth","set","unallocatedWidth","unallocatedColumnWidth","has","columnMetric","get","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","length","firstUnfrozenColumnIdx","Math","min","colVisibleStartIdx","colVisibleEndIdx","max","viewportColumns","colIdx","test","floor","parseInt","RENDER_BACTCH_SIZE","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","rowsCount","groupRows","rows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childRows","Object","entries","childGroups","childRowsCount","allGroupRows","Set","flattenedRows","expandGroup","parentId","level","keys","posInSet","id","groupRow","setSize","add","isGroupRow","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","rowOverscanStartIdx","rowOverscanEndIdx","ceil","useLatestFunc","fn","args","SortableHeaderCell","onSort","sortColumn","sortDirection","children","sortText","sortDescendingFirst","direction","nonInputKeys","isCtrlKeyHeldDown","ctrlKey","metaKey","isDefaultCellInput","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","isSelectedCellEditable","selectedPosition","rowIdx","editor","editable","getNextSelectedCellPosition","cellNavigationMode","nextPosition","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","assertIsValidKeyGetter","keyGetter","getCellStyle","gridColumnStart","getAriaSort","HeaderCell","onResize","onPointerDown","pointerType","buttons","currentTarget","pointerId","right","getBoundingClientRect","offset","clientX","onPointerMove","onPointerUp","preventDefault","getCell","className","clsx","headerCellClass","HeaderRow","rowKeyGetter","onSelectedRowsChange","onColumnResize","handleAllRowsSelectionChange","newSelectedRows","memo","FilterRow","filters","onFiltersChange","newFilters","filterRenderer","Cell","isCopied","isDraggedOver","dragHandleProps","onRowClick","onDoubleClick","onContextMenu","onRowChange","selectCell","selectRow","cellClass","selectCellWrapper","openEditor","handleClick","editorOptions","editOnClick","handleContextMenu","handleDoubleClick","handleRowChange","newRow","isShiftClick","forwardRef","EditorContainer","onClickCapture","createPortal","editorPortalTarget","EditCell","editorProps","dimensions","setDimensions","node","top","getCellContent","docTop","docLeft","document","scrollingElement","documentElement","gridLeft","gridTop","Row","cellRenderer","CellRenderer","copiedCellIdx","draggedOverCellIdx","selectedCellProps","rowClass","setDraggedOverRowIdx","onMouseEnter","ariaRowIndex","ariaSelected","handleDragEnter","mode","onKeyDown","onFocus","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","GroupedRow","selectedCellIdx","selectGroup","SummaryCell","summaryFormatter","SummaryFormatter","summaryCellClass","SummaryRow","bottom","body","globalThis","DataGrid","summaryRows","onRowsChange","headerRowHeight","headerFiltersHeight","selectedRows","onExpandedGroupIdsChange","rowRenderer","RowRenderer","emptyRowsRenderer","EmptyRowsRenderer","onScroll","onSelectedCellChange","onFill","onPaste","enableFilterRow","style","ariaDescribedBy","setScrollTop","setScrollLeft","setColumnWidths","setSelectedPosition","copiedCell","setCopiedCell","isDragging","setDragging","draggedOverRowIdx","setOverRowIdx","focusSinkRef","prevSelectedPosition","latestDraggedOverRowIdx","lastSelectedRowIdx","isCellFocusable","selectRowWrapper","handleFormatterRowChangeWrapper","updateRow","headerRowsCount","summaryRowsCount","totalHeaderHeight","isSelectable","hasGroups","minColIdx","enableCellDragAndDrop","isCellWithinBounds","scrollToCell","useImperativeHandle","scrollToColumn","scrollToRow","scrollTo","behavior","handleColumnResize","newColumnWidths","childRow","rowKey","delete","previousRowIdx","step","sign","expandedGroupId","newExpandedGroupIds","keyCode","cKey","vKey","handleCopy","handlePaste","closeEditor","navigate","handleCellInput","handleFocus","handleScroll","getRawRowIdx","updatedRows","indexes","commitEditorChanges","originalRow","columnKey","targetRow","isCellEditable","updatedTargetRow","sourceRow","sourceColumnKey","targetColumnKey","onCellKeyDown","isDefaultPrevented","handleDragEnd","overRowIdx","endRowIndex","targetRows","slice","updatedTargetRows","handleMouseDown","onMouseOver","onMouseUp","handleEditorRowChange","commitChanges","position","handleOnClose","enableEditor","isCellAtLeftBoundary","isCellAtRightBoundary","getNextPosition","parentRowIdx","parentRow","onNavigation","getDraggedOverCellIdx","currentRowIdx","getSelectedCellProps","onClose","onMouseDown","getViewportRows","rowElements","every","cr","findIndex","c","size","height","autoFocusAndSelect","input","select","TextEditor"],"mappings":";;;;;AAEO,SAASA,eAAT,CAA4B,GAAGC,IAA/B,EAA8D;AACnE,SAAOC,WAAW,CACfC,MAAD,IAAsB;AACpB,SAAK,MAAMC,GAAX,IAAkBH,IAAlB,EAAwB;AACtB,UAAI,OAAOG,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,QAAAA,GAAG,CAACD,MAAD,CAAH;AACD,OAFD,MAEO,IAAIC,GAAG,KAAK,IAAZ,EAAkB;AAEvBA,QAAAA,GAAG,CAACC,OAAJ,GAAcF,MAAd;AACD;AACF;AACF,GAVe,EAYhBF,IAZgB,CAAlB;AAcD;;ACkCM,SAASK,eAAT,CAAyBC,OAAzB,EAA8C;AACnD,QAAMC,eAAe,GAAGC,MAAM,EAA9B;;AAEA,WAASC,2BAAT,GAAuC;AACrC,QAAI,OAAOF,eAAe,CAACH,OAAvB,KAAmC,QAAvC,EAAiD;AAC/CM,MAAAA,oBAAoB,CAACH,eAAe,CAACH,OAAjB,CAApB;AACAG,MAAAA,eAAe,CAACH,OAAhB,GAA0BO,SAA1B;AACD;AACF;;AAKD,QAAMC,UAAU,GAAGJ,MAAM,CAAC,MAAY;AACpC,UAAM,IAAIK,KAAJ,CAAU,+CAAV,CAAN;AACD,GAFwB,CAAzB;AAIAC,EAAAA,SAAS,CAAC,MAAM;AACdF,IAAAA,UAAU,CAACR,OAAX,GAAqBE,OAArB;AACD,GAFQ,CAAT;AAIAQ,EAAAA,SAAS,CAAC,MAAM;AACd,aAASC,cAAT,GAA0B;AACxBR,MAAAA,eAAe,CAACH,OAAhB,GAA0BO,SAA1B;AACAC,MAAAA,UAAU,CAACR,OAAX;AACD;;AAED,aAASY,oBAAT,GAAgC;AAC9BP,MAAAA,2BAA2B;AAC3BF,MAAAA,eAAe,CAACH,OAAhB,GAA0Ba,qBAAqB,CAACF,cAAD,CAA/C;AACD;;AAEDG,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCH,oBAAjC,EAAuD;AAAEI,MAAAA,OAAO,EAAE;AAAX,KAAvD;AAEA,WAAO,MAAM;AACXF,MAAAA,MAAM,CAACG,mBAAP,CAA2B,OAA3B,EAAoCL,oBAApC,EAA0D;AAAEI,QAAAA,OAAO,EAAE;AAAX,OAA1D;AACAX,MAAAA,2BAA2B;AAC5B,KAHD;AAID,GAjBQ,EAiBN,EAjBM,CAAT;AAmBA,SAAOA,2BAAP;AACD;;AC7EM,SAASa,iBAAT,GAAgF;AACrF,QAAMC,OAAO,GAAGf,MAAM,CAAiB,IAAjB,CAAtB;AACA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BC,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BF,QAAQ,CAAC,CAAD,CAA5C;AAEAG,EAAAA,eAAe,CAAC,MAAM;AACpB,UAAM;AAAEC,MAAAA;AAAF,QAAqBZ,MAA3B;AAGA,QAAIY,cAAc,IAAI,IAAtB,EAA4B;AAE5B,UAAMC,cAAc,GAAG,IAAID,cAAJ,CAAmB,MAAM;AAG9C,YAAM;AAAEE,QAAAA,WAAF;AAAeC,QAAAA;AAAf,UAAgCV,OAAO,CAACnB,OAA9C;AACAqB,MAAAA,YAAY,CAACO,WAAD,CAAZ;AACAJ,MAAAA,aAAa,CAACK,YAAD,CAAb;AACD,KANsB,CAAvB;AAQAF,IAAAA,cAAc,CAACG,OAAf,CAAuBX,OAAO,CAACnB,OAA/B;AAEA,WAAO,MAAM;AACX2B,MAAAA,cAAc,CAACI,UAAf;AACD,KAFD;AAGD,GAnBc,EAmBZ,EAnBY,CAAf;AAqBA,SAAO,CAACZ,OAAD,EAAUC,SAAV,EAAqBG,UAArB,CAAP;AACD;;ACxCM,SAASS,WAAT,CAAiDC,cAAjD,EAAsF;AAC3F,QAAMlC,GAAG,GAAGK,MAAM,CAAI,IAAJ,CAAlB;AACAqB,EAAAA,eAAe,CAAC,MAAM;AAAA;;AACpB,QAAI,CAACQ,cAAL,EAAqB;AACrB,oBAAAlC,GAAG,CAACC,OAAJ,kCAAakC,KAAb,CAAmB;AAAEC,MAAAA,aAAa,EAAE;AAAjB,KAAnB;AACD,GAHc,EAGZ,CAACF,cAAD,CAHY,CAAf;AAKA,SAAOlC,GAAP;AACD;;ACQM,SAASqC,mBAAT,CAA6B;AAClCC,EAAAA,KADkC;AAElCC,EAAAA,QAFkC;AAGlCL,EAAAA,cAHkC;AAIlCM,EAAAA,QAJkC;AAKlCrC,EAAAA,OALkC;AAMlCsC,EAAAA,QANkC;AAOlC,gBAAcC,SAPoB;AAQlC,qBAAmBC;AARe,CAA7B,EASsB;AAC3B,QAAMC,QAAQ,GAAGX,WAAW,CAAmBC,cAAnB,CAA5B;;AAEA,WAASW,YAAT,CAAsBC,CAAtB,EAA8D;AAC5DL,IAAAA,QAAQ,CAACK,CAAC,CAACC,MAAF,CAASC,OAAV,EAAoBF,CAAC,CAACG,WAAH,CAA8BC,QAAjD,CAAR;AACD;;AAED,sBACEC;AAAO,IAAA,SAAS,EAAO,oBAAP,IAA8DX,QAA9D,uCAAhB;AAAA,4BACEY;AACE,oBAAYV,SADd;AAEE,yBAAiBC,cAFnB;AAGE,MAAA,QAAQ,EAAEJ,QAHZ;AAIE,MAAA,GAAG,EAAEK,QAJP;AAKE,MAAA,IAAI,EAAC,UALP;AAME,MAAA,SAAS,EAAC,oBANZ;AAOE,MAAA,QAAQ,EAAEJ,QAPZ;AAQE,MAAA,OAAO,EAAEF,KARX;AASE,MAAA,QAAQ,EAAEO,YATZ;AAUE,MAAA,OAAO,EAAE1C;AAVX,MADF,eAaEiD;AAAK,MAAA,SAAS,EAAC;AAAf,MAbF;AAAA,IADF;AAiBD;;ACjDM,SAASC,cAAT,CAA+BC,KAA/B,EAA6D;AAClE,MAAI;AACF,wBAAOF;AAAA,gBAAGE,KAAK,CAACC,GAAN,CAAUD,KAAK,CAACE,MAAN,CAAaC,GAAvB;AAAH,MAAP;AACD,GAFD,CAEE,MAAM;AACN,WAAO,IAAP;AACD;AACF;;ACLM,SAASC,oBAAT,CAAqC;AAC1CC,EAAAA,QAD0C;AAE1CC,EAAAA,UAF0C;AAG1C1B,EAAAA,cAH0C;AAI1C2B,EAAAA;AAJ0C,CAArC,EAKwB;AAC7B,QAAMC,OAAO,GAAG7B,WAAW,CAAkBC,cAAlB,CAA3B;;AAEA,WAAS6B,aAAT,CAAuB;AAAEN,IAAAA;AAAF,GAAvB,EAAsE;AACpE,QAAIA,GAAG,KAAK,OAAZ,EAAqB;AACnBI,MAAAA,WAAW;AACZ;AACF;;AAED,QAAMG,CAAC,GAAGJ,UAAU,GAAG,mBAAH,GAAyB,mBAA7C;AAEA,sBACET;AACE,IAAA,GAAG,EAAEW,OADP;AAEE,IAAA,SAAS,EAAC,wBAFZ;AAGE,IAAA,QAAQ,EAAE,CAAC,CAHb;AAIE,IAAA,SAAS,EAAEC,aAJb;AAAA,eAMGJ,QANH,eAOEP;AAAK,MAAA,OAAO,EAAC,UAAb;AAAwB,MAAA,KAAK,EAAC,IAA9B;AAAmC,MAAA,MAAM,EAAC,GAA1C;AAA8C,MAAA,SAAS,EAAC,WAAxD;AAAA,6BACEA;AAAM,QAAA,CAAC,EAAEY;AAAT;AADF,MAPF;AAAA,IADF;AAaD;;AChCM,SAASC,eAAT,CAAyBC,KAAzB,EAAsD;AAC3DA,EAAAA,KAAK,CAACD,eAAN;AACD;AAEM,SAASE,SAAT,CAAmDC,UAAnD,EAAsFC,YAAtF,EAAuI;AAC5I,MAAIA,YAAY,KAAK7D,SAArB,EAAgC,OAAO4D,UAAP;AAEhC,SAAO,UAASF,KAAT,EAAmB;AACxBE,IAAAA,UAAU,CAACF,KAAD,CAAV;AACAG,IAAAA,YAAY,CAACH,KAAD,CAAZ;AACD,GAHD;AAID;;MCPYI,iBAAiB,GAAG;MAGpBC,YAA8B,GAAG;AAC5Cd,EAAAA,GAAG,EAAEa,iBADuC;AAE5CE,EAAAA,IAAI,EAAE,EAFsC;AAG5CC,EAAAA,KAAK,EAAE,EAHqC;AAI5CC,EAAAA,QAAQ,EAAE,EAJkC;AAK5CC,EAAAA,SAAS,EAAE,KALiC;AAM5CC,EAAAA,QAAQ,EAAE,KANkC;AAO5CC,EAAAA,MAAM,EAAE,IAPoC;;AAQ5CC,EAAAA,cAAc,CAACxB,KAAD,EAAQ;AACpB,wBACEF,IAAC,mBAAD;AACE,oBAAW,YADb;AAEE,MAAA,KAAK,EAAEE,KAAK,CAACyB,eAFf;AAGE,MAAA,QAAQ,EAAEzB,KAAK,CAAC0B;AAHlB,MADF;AAOD,GAhB2C;;AAiB5CC,EAAAA,SAAS,CAAC3B,KAAD,EAAQ;AACf,wBACEF,IAAC,mBAAD;AACE,oBAAW,QADb;AAEE,MAAA,QAAQ,EAAE,CAAC,CAFb;AAGE,MAAA,cAAc,EAAEE,KAAK,CAACpB,cAHxB;AAIE,MAAA,KAAK,EAAEoB,KAAK,CAAC4B,aAJf;AAKE,MAAA,OAAO,EAAEjB,eALX;AAME,MAAA,QAAQ,EAAEX,KAAK,CAAC6B;AANlB,MADF;AAUD,GA5B2C;;AA6B5CC,EAAAA,cAAc,CAAC9B,KAAD,EAAQ;AACpB,wBACEF,IAAC,mBAAD;AACE,oBAAW,cADb;AAEE,MAAA,QAAQ,EAAE,CAAC,CAFb;AAGE,MAAA,cAAc,EAAEE,KAAK,CAACpB,cAHxB;AAIE,MAAA,KAAK,EAAEoB,KAAK,CAAC4B,aAJf;AAKE,MAAA,QAAQ,EAAE5B,KAAK,CAAC6B,oBALlB;AAOE,MAAA,OAAO,EAAElB;AAPX,MADF;AAWD;;AAzC2C;;ACQvC,SAASoB,kBAAT,CAAmC;AACxCC,EAAAA,UADwC;AAExCC,EAAAA,YAFwC;AAGxCC,EAAAA,aAHwC;AAIxCC,EAAAA,UAJwC;AAKxCC,EAAAA,oBALwC;AAMxCC,EAAAA;AANwC,CAAnC,EAOwB;AAAA;;AAC7B,QAAMC,cAAc,4BAAGF,oBAAH,oBAAGA,oBAAoB,CAAEG,QAAzB,oCAAqC,EAAzD;AACA,QAAMC,gBAAgB,6BAAGJ,oBAAH,oBAAGA,oBAAoB,CAAET,SAAzB,qCAAsC5B,cAA5D;AACA,QAAM0C,eAAe,6BAAGL,oBAAH,oBAAGA,oBAAoB,CAAEd,QAAzB,qCAAqC,KAA1D;AACA,QAAMoB,gBAAgB,6BAAGN,oBAAH,oBAAGA,oBAAoB,CAAEf,SAAzB,qCAAsC,KAA5D;AAEA,QAAM;AAAEsB,IAAAA,OAAF;AAAWC,IAAAA,qBAAX;AAAkCC,IAAAA;AAAlC,MAA8CC,OAAO,CAAC,MAAM;AAEhE,UAAMD,OAAiB,GAAG,EAA1B;AACA,QAAID,qBAAqB,GAAG,CAAC,CAA7B;AAEA,UAAMD,OAAO,GAAGX,UAAU,CAACe,GAAX,CAAeC,SAAS,IAAI;AAAA;;AAC1C,YAAMC,OAAO,GAAGZ,UAAH,oBAAGA,UAAU,CAAEa,QAAZ,CAAqBF,SAAS,CAAC7C,GAA/B,CAAhB;AAEA,YAAMD,MAA+B,GAAG,EACtC,GAAG8C,SADmC;AAEtCG,QAAAA,GAAG,EAAE,CAFiC;AAItC5B,QAAAA,MAAM,EAAE0B,OAAO,IAAID,SAAS,CAACzB,MAArB,IAA+B,KAJD;AAKtC6B,QAAAA,kBAAkB,EAAE,KALkB;AAMtCC,QAAAA,QAAQ,EAAEJ,OAN4B;AAOtC3B,QAAAA,QAAQ,yBAAE0B,SAAS,CAAC1B,QAAZ,kCAAwBmB,eAPM;AAQtCpB,QAAAA,SAAS,0BAAE2B,SAAS,CAAC3B,SAAZ,mCAAyBqB,gBARI;AAStCf,QAAAA,SAAS,0BAAEqB,SAAS,CAACrB,SAAZ,mCAAyBa;AATI,OAAxC;;AAYA,UAAItC,MAAM,CAACqB,MAAX,EAAmB;AACjBqB,QAAAA,qBAAqB;AACtB;;AAED,aAAO1C,MAAP;AACD,KApBe,CAAhB;AAsBAyC,IAAAA,OAAO,CAACW,IAAR,CAAa,CAAC;AAAEnD,MAAAA,GAAG,EAAEoD,IAAP;AAAahC,MAAAA,MAAM,EAAEiC;AAArB,KAAD,EAAiC;AAAErD,MAAAA,GAAG,EAAEsD,IAAP;AAAalC,MAAAA,MAAM,EAAEmC;AAArB,KAAjC,KAAoE;AAE/E,UAAIH,IAAI,KAAKvC,iBAAb,EAAgC,OAAO,CAAC,CAAR;AAChC,UAAIyC,IAAI,KAAKzC,iBAAb,EAAgC,OAAO,CAAP;;AAGhC,UAAIqB,UAAJ,YAAIA,UAAU,CAAEa,QAAZ,CAAqBK,IAArB,CAAJ,EAAgC;AAC9B,YAAIlB,UAAU,CAACa,QAAX,CAAoBO,IAApB,CAAJ,EAA+B;AAC7B,iBAAOpB,UAAU,CAACsB,OAAX,CAAmBJ,IAAnB,IAA2BlB,UAAU,CAACsB,OAAX,CAAmBF,IAAnB,CAAlC;AACD;;AACD,eAAO,CAAC,CAAR;AACD;;AACD,UAAIpB,UAAJ,YAAIA,UAAU,CAAEa,QAAZ,CAAqBO,IAArB,CAAJ,EAAgC,OAAO,CAAP;;AAGhC,UAAID,OAAJ,EAAa;AACX,YAAIE,OAAJ,EAAa,OAAO,CAAP;AACb,eAAO,CAAC,CAAR;AACD;;AACD,UAAIA,OAAJ,EAAa,OAAO,CAAP;AAGb,aAAO,CAAP;AACD,KAvBD;AAyBAf,IAAAA,OAAO,CAACiB,OAAR,CAAgB,CAAC1D,MAAD,EAASiD,GAAT,KAAiB;AAC/BjD,MAAAA,MAAM,CAACiD,GAAP,GAAaA,GAAb;;AAEA,UAAIA,GAAG,KAAKP,qBAAZ,EAAmC;AACjC1C,QAAAA,MAAM,CAACkD,kBAAP,GAA4B,IAA5B;AACD;;AAED,UAAIlD,MAAM,CAACmD,QAAX,EAAqB;AAAA;;AACnBR,QAAAA,OAAO,CAACgB,IAAR,CAAa3D,MAAM,CAACC,GAApB;AACA,iCAAAD,MAAM,CAAC4B,cAAP,oCAAA5B,MAAM,CAAC4B,cAAP,GAA0B1B,oBAA1B;AACD;AACF,KAXD;AAaA,WAAO;AACLuC,MAAAA,OADK;AAELC,MAAAA,qBAFK;AAGLC,MAAAA;AAHK,KAAP;AAKD,GAtE0D,EAsExD,CAACb,UAAD,EAAaQ,gBAAb,EAA+BE,gBAA/B,EAAiDD,eAAjD,EAAkEJ,UAAlE,CAtEwD,CAA3D;AAwEA,QAAM;AAAEyB,IAAAA,aAAF;AAAiBC,IAAAA,gBAAjB;AAAmCC,IAAAA,sBAAnC;AAA2DC,IAAAA;AAA3D,MAA6EnB,OAAO,CAAC,MAAM;AAC/F,UAAMmB,aAAa,GAAG,IAAIC,GAAJ,EAAtB;AACA,QAAIC,IAAI,GAAG,CAAX;AACA,QAAIJ,gBAAgB,GAAG,CAAvB;AACA,QAAIC,sBAAsB,GAAG,CAA7B;AACA,QAAII,eAAe,GAAG,EAAtB;AACA,QAAIC,cAAc,GAAG,CAArB;AACA,QAAIC,sBAAsB,GAAG,CAA7B;;AAEA,SAAK,MAAMpE,MAAX,IAAqByC,OAArB,EAA8B;AAC5B,UAAIxB,KAAK,GAAGoD,iBAAiB,CAACrE,MAAD,EAAS+B,YAAT,EAAuBC,aAAvB,CAA7B;;AAEA,UAAIf,KAAK,KAAKjE,SAAd,EAAyB;AACvBoH,QAAAA,sBAAsB;AACvB,OAFD,MAEO;AACLnD,QAAAA,KAAK,GAAGqD,gBAAgB,CAACrD,KAAD,EAAQjB,MAAR,EAAgBoC,cAAhB,CAAxB;AACA+B,QAAAA,cAAc,IAAIlD,KAAlB;AACA8C,QAAAA,aAAa,CAACQ,GAAd,CAAkBvE,MAAlB,EAA0B;AAAEiB,UAAAA,KAAF;AAASgD,UAAAA,IAAI,EAAE;AAAf,SAA1B;AACD;AACF;;AAED,UAAMO,gBAAgB,GAAGxC,aAAa,GAAGmC,cAAzC;AACA,UAAMM,sBAAsB,GAAGD,gBAAgB,GAAGJ,sBAAlD;;AAEA,SAAK,MAAMpE,MAAX,IAAqByC,OAArB,EAA8B;AAC5B,UAAIxB,KAAJ;;AACA,UAAI8C,aAAa,CAACW,GAAd,CAAkB1E,MAAlB,CAAJ,EAA+B;AAC7B,cAAM2E,YAAY,GAAGZ,aAAa,CAACa,GAAd,CAAkB5E,MAAlB,CAArB;AACA2E,QAAAA,YAAY,CAACV,IAAb,GAAoBA,IAApB;AACA,SAAC;AAAEhD,UAAAA;AAAF,YAAY0D,YAAb;AACD,OAJD,MAIO;AACL1D,QAAAA,KAAK,GAAGqD,gBAAgB,CAACG,sBAAD,EAAyBzE,MAAzB,EAAiCoC,cAAjC,CAAxB;AACA2B,QAAAA,aAAa,CAACQ,GAAd,CAAkBvE,MAAlB,EAA0B;AAAEiB,UAAAA,KAAF;AAASgD,UAAAA;AAAT,SAA1B;AACD;;AACDJ,MAAAA,gBAAgB,IAAI5C,KAApB;AACAgD,MAAAA,IAAI,IAAIhD,KAAR;AACAiD,MAAAA,eAAe,IAAK,GAAEjD,KAAM,KAA5B;AACD;;AAED,QAAIyB,qBAAqB,KAAK,CAAC,CAA/B,EAAkC;AAChC,YAAMiC,YAAY,GAAGZ,aAAa,CAACa,GAAd,CAAkBnC,OAAO,CAACC,qBAAD,CAAzB,CAArB;AACAoB,MAAAA,sBAAsB,GAAGa,YAAY,CAACV,IAAb,GAAoBU,YAAY,CAAC1D,KAA1D;AACD;;AAED,UAAM2C,aAAqC,GAAG;AAC5C,4BAAsBM;AADsB,KAA9C;;AAIA,SAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAInC,qBAArB,EAA4CmC,CAAC,EAA7C,EAAiD;AAC/C,YAAM7E,MAAM,GAAGyC,OAAO,CAACoC,CAAD,CAAtB;AACAjB,MAAAA,aAAa,CAAE,iBAAgB5D,MAAM,CAACC,GAAI,EAA7B,CAAb,GAAgD,GAAE8D,aAAa,CAACa,GAAd,CAAkB5E,MAAlB,EAA2BiE,IAAK,IAAlF;AACD;;AAED,WAAO;AAAEL,MAAAA,aAAF;AAAiBC,MAAAA,gBAAjB;AAAmCC,MAAAA,sBAAnC;AAA2DC,MAAAA;AAA3D,KAAP;AACD,GAtDyF,EAsDvF,CAAChC,YAAD,EAAeU,OAAf,EAAwBT,aAAxB,EAAuCI,cAAvC,EAAuDM,qBAAvD,CAtDuF,CAA1F;AAwDA,QAAM,CAACoC,mBAAD,EAAsBC,iBAAtB,IAA2CnC,OAAO,CAAC,MAAwB;AAE/E,UAAMoC,YAAY,GAAG/C,UAAU,GAAG6B,sBAAlC;AACA,UAAMmB,aAAa,GAAGhD,UAAU,GAAGD,aAAnC;AAEA,UAAMkD,UAAU,GAAGzC,OAAO,CAAC0C,MAAR,GAAiB,CAApC;AACA,UAAMC,sBAAsB,GAAGC,IAAI,CAACC,GAAL,CAAS5C,qBAAqB,GAAG,CAAjC,EAAoCwC,UAApC,CAA/B;;AAGA,QAAIF,YAAY,IAAIC,aAApB,EAAmC;AACjC,aAAO,CAACG,sBAAD,EAAyBA,sBAAzB,CAAP;AACD;;AAGD,QAAIG,kBAAkB,GAAGH,sBAAzB;;AACA,WAAOG,kBAAkB,GAAGL,UAA5B,EAAwC;AACtC,YAAM;AAAEjB,QAAAA,IAAF;AAAQhD,QAAAA;AAAR,UAAkB8C,aAAa,CAACa,GAAd,CAAkBnC,OAAO,CAAC8C,kBAAD,CAAzB,CAAxB;;AAGA,UAAItB,IAAI,GAAGhD,KAAP,GAAe+D,YAAnB,EAAiC;AAC/B;AACD;;AACDO,MAAAA,kBAAkB;AACnB;;AAGD,QAAIC,gBAAgB,GAAGD,kBAAvB;;AACA,WAAOC,gBAAgB,GAAGN,UAA1B,EAAsC;AACpC,YAAM;AAAEjB,QAAAA,IAAF;AAAQhD,QAAAA;AAAR,UAAkB8C,aAAa,CAACa,GAAd,CAAkBnC,OAAO,CAAC+C,gBAAD,CAAzB,CAAxB;;AAGA,UAAIvB,IAAI,GAAGhD,KAAP,IAAgBgE,aAApB,EAAmC;AACjC;AACD;;AACDO,MAAAA,gBAAgB;AACjB;;AAED,UAAMV,mBAAmB,GAAGO,IAAI,CAACI,GAAL,CAASL,sBAAT,EAAiCG,kBAAkB,GAAG,CAAtD,CAA5B;AACA,UAAMR,iBAAiB,GAAGM,IAAI,CAACC,GAAL,CAASJ,UAAT,EAAqBM,gBAAgB,GAAG,CAAxC,CAA1B;AAEA,WAAO,CAACV,mBAAD,EAAsBC,iBAAtB,CAAP;AACD,GAzCuD,EAyCrD,CAACtC,OAAD,EAAUsB,aAAV,EAAyBrB,qBAAzB,EAAgDT,UAAhD,EAA4D6B,sBAA5D,EAAoF9B,aAApF,CAzCqD,CAAxD;AA2CA,QAAM0D,eAAe,GAAG9C,OAAO,CAAC,MAA0C;AACxE,UAAM8C,eAA0C,GAAG,EAAnD;;AACA,SAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,IAAIZ,iBAA/B,EAAkDY,MAAM,EAAxD,EAA4D;AAC1D,YAAM3F,MAAM,GAAGyC,OAAO,CAACkD,MAAD,CAAtB;AAEA,UAAIA,MAAM,GAAGb,mBAAT,IAAgC,CAAC9E,MAAM,CAACqB,MAA5C,EAAoD;AACpDqE,MAAAA,eAAe,CAAC/B,IAAhB,CAAqB3D,MAArB;AACD;;AAED,WAAO0F,eAAP;AACD,GAV8B,EAU5B,CAACX,iBAAD,EAAoBD,mBAApB,EAAyCrC,OAAzC,CAV4B,CAA/B;AAYA,SAAO;AAAEA,IAAAA,OAAF;AAAWiD,IAAAA,eAAX;AAA4B9B,IAAAA,aAA5B;AAA2CG,IAAAA,aAA3C;AAA0DF,IAAAA,gBAA1D;AAA4EnB,IAAAA,qBAA5E;AAAmGoB,IAAAA,sBAAnG;AAA2HnB,IAAAA;AAA3H,GAAP;AACD;;AAED,SAAS0B,iBAAT,CACE;AAAEpE,EAAAA,GAAF;AAAOgB,EAAAA;AAAP,CADF,EAEEc,YAFF,EAGEC,aAHF,EAIsB;AACpB,MAAID,YAAY,CAAC2C,GAAb,CAAiBzE,GAAjB,CAAJ,EAA2B;AAEzB,WAAO8B,YAAY,CAAC6C,GAAb,CAAiB3E,GAAjB,CAAP;AACD;;AACD,MAAI,OAAOgB,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAP;AACD;;AACD,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,SAAS2E,IAAT,CAAc3E,KAAd,CAAjC,EAAuD;AACrD,WAAOoE,IAAI,CAACQ,KAAL,CAAW7D,aAAa,GAAG8D,QAAQ,CAAC7E,KAAD,EAAQ,EAAR,CAAxB,GAAsC,GAAjD,CAAP;AACD;;AACD,SAAOjE,SAAP;AACD;;AAED,SAASsH,gBAAT,CACErD,KADF,EAEE;AAAEoB,EAAAA,QAAF;AAAYnB,EAAAA;AAAZ,CAFF,EAGEkB,cAHF,EAIU;AACRnB,EAAAA,KAAK,GAAGoE,IAAI,CAACI,GAAL,CAASxE,KAAT,EAAgBoB,QAAhB,WAAgBA,QAAhB,GAA4BD,cAA5B,CAAR;;AAEA,MAAI,OAAOlB,QAAP,KAAoB,QAAxB,EAAkC;AAChC,WAAOmE,IAAI,CAACC,GAAL,CAASrE,KAAT,EAAgBC,QAAhB,CAAP;AACD;;AAED,SAAOD,KAAP;AACD;;ACjPD,MAAM8E,kBAAkB,GAAG,CAA3B;;AAaA,SAASC,eAAT,CAAyBC,GAAzB,EAAkE;AAChE,SAAOC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAP;AACD;;AAEM,SAASG,eAAT,CAA4B;AACjCC,EAAAA,OADiC;AAEjCC,EAAAA,SAFiC;AAGjChI,EAAAA,YAHiC;AAIjCiI,EAAAA,SAJiC;AAKjC5D,EAAAA,OALiC;AAMjC6D,EAAAA,UANiC;AAOjCC,EAAAA;AAPiC,CAA5B,EAQiB;AACtB,QAAM,CAACC,WAAD,EAAcC,SAAd,IAA2B/D,OAAO,CAAC,MAAM;AAC7C,QAAID,OAAO,CAACwC,MAAR,KAAmB,CAAnB,IAAwB,CAACqB,UAA7B,EAAyC,OAAO,CAACxJ,SAAD,EAAYqJ,OAAO,CAAClB,MAApB,CAAP;;AAEzC,UAAMyB,SAAS,GAAG,CAACC,IAAD,EAAqB,CAACC,UAAD,EAAa,GAAGC,oBAAhB,CAArB,EAA+EC,aAA/E,KAAyI;AACzJ,UAAIC,cAAc,GAAG,CAArB;AACA,YAAMC,MAA4B,GAAG,EAArC;;AACA,WAAK,MAAM,CAACjH,GAAD,EAAMkH,SAAN,CAAX,IAA+BC,MAAM,CAACC,OAAP,CAAeb,UAAU,CAACK,IAAD,EAAOC,UAAP,CAAzB,CAA/B,EAA6E;AAE3E,cAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCR,oBAAoB,CAAC5B,MAArB,KAAgC,CAAhC,GAClC,CAACgC,SAAD,EAAYA,SAAS,CAAChC,MAAtB,CADkC,GAElCyB,SAAS,CAACO,SAAD,EAAYJ,oBAAZ,EAAkCC,aAAa,GAAGC,cAAhB,GAAiC,CAAnE,CAFb;AAGAC,QAAAA,MAAM,CAACjH,GAAD,CAAN,GAAc;AAAEkH,UAAAA,SAAF;AAAaG,UAAAA,WAAb;AAA0BN,UAAAA,aAAa,EAAEA,aAAa,GAAGC;AAAzD,SAAd;AACAA,QAAAA,cAAc,IAAIM,cAAc,GAAG,CAAnC;AACD;;AAED,aAAO,CAACL,MAAD,EAASD,cAAT,CAAP;AACD,KAbD;;AAeA,WAAOL,SAAS,CAACP,OAAD,EAAU1D,OAAV,EAAmB,CAAnB,CAAhB;AACD,GAnBuC,EAmBrC,CAACA,OAAD,EAAU6D,UAAV,EAAsBH,OAAtB,CAnBqC,CAAxC;AAqBA,QAAM,CAACQ,IAAD,EAAOW,YAAP,IAAuB5E,OAAO,CAAC,MAAM;AACzC,UAAM4E,YAAY,GAAG,IAAIC,GAAJ,EAArB;AACA,QAAI,CAACf,WAAL,EAAkB,OAAO,CAACL,OAAD,EAAUmB,YAAV,CAAP;AAElB,UAAME,aAAqC,GAAG,EAA9C;;AACA,UAAMC,WAAW,GAAG,CAACd,IAAD,EAA4Ce,QAA5C,EAA0EC,KAA1E,KAAkG;AACpH,UAAI7B,eAAe,CAACa,IAAD,CAAnB,EAA2B;AACzBa,QAAAA,aAAa,CAAC/D,IAAd,CAAmB,GAAGkD,IAAtB;AACA;AACD;;AACDO,MAAAA,MAAM,CAACU,IAAP,CAAYjB,IAAZ,EAAkBnD,OAAlB,CAA0B,CAACvD,QAAD,EAAW4H,QAAX,EAAqBD,IAArB,KAA8B;AAAA;;AAEtD,cAAME,EAAE,GAAGJ,QAAQ,KAAK5K,SAAb,GAA0B,GAAE4K,QAAS,KAAIzH,QAAS,EAAlD,GAAsDA,QAAjE;AACA,cAAMC,UAAU,4BAAGqG,gBAAH,oBAAGA,gBAAgB,CAAE/B,GAAlB,CAAsBsD,EAAtB,CAAH,oCAAgC,KAAhD;AACA,cAAM;AAAEb,UAAAA,SAAF;AAAaG,UAAAA,WAAb;AAA0BN,UAAAA;AAA1B,YAA4CH,IAAI,CAAC1G,QAAD,CAAtD;AAEA,cAAM8H,QAAqB,GAAG;AAC5BD,UAAAA,EAD4B;AAE5BJ,UAAAA,QAF4B;AAG5BzH,UAAAA,QAH4B;AAI5BC,UAAAA,UAJ4B;AAK5B+G,UAAAA,SAL4B;AAM5BU,UAAAA,KAN4B;AAO5BE,UAAAA,QAP4B;AAQ5Bf,UAAAA,aAR4B;AAS5BkB,UAAAA,OAAO,EAAEJ,IAAI,CAAC3C;AATc,SAA9B;AAWAuC,QAAAA,aAAa,CAAC/D,IAAd,CAAmBsE,QAAnB;AACAT,QAAAA,YAAY,CAACW,GAAb,CAAiBF,QAAjB;;AAEA,YAAI7H,UAAJ,EAAgB;AACduH,UAAAA,WAAW,CAACL,WAAD,EAAcU,EAAd,EAAkBH,KAAK,GAAG,CAA1B,CAAX;AACD;AACF,OAvBD;AAwBD,KA7BD;;AA+BAF,IAAAA,WAAW,CAACjB,WAAD,EAAc1J,SAAd,EAAyB,CAAzB,CAAX;AACA,WAAO,CAAC0K,aAAD,EAAgBF,YAAhB,CAAP;AACD,GAtCmC,EAsCjC,CAACf,gBAAD,EAAmBC,WAAnB,EAAgCL,OAAhC,CAtCiC,CAApC;;AAwCA,QAAM+B,UAAU,GAAOrI,GAAJ,IAAyCyH,YAAY,CAAC9C,GAAb,CAAiB3E,GAAjB,CAA5D;;AAEA,QAAMsI,iBAAiB,GAAG,CAA1B;AACA,QAAMC,kBAAkB,GAAGjD,IAAI,CAACQ,KAAL,CAAWU,SAAS,GAAGD,SAAvB,CAA3B;AACA,QAAMiC,gBAAgB,GAAGlD,IAAI,CAACC,GAAL,CAASuB,IAAI,CAAC1B,MAAL,GAAc,CAAvB,EAA0BE,IAAI,CAACQ,KAAL,CAAW,CAACU,SAAS,GAAGjI,YAAb,IAA6BgI,SAAxC,CAA1B,CAAzB;AACA,QAAMkC,mBAAmB,GAAGnD,IAAI,CAACI,GAAL,CAAS,CAAT,EAAYJ,IAAI,CAACQ,KAAL,CAAW,CAACyC,kBAAkB,GAAGD,iBAAtB,IAA2CtC,kBAAtD,IAA4EA,kBAAxF,CAA5B;AACA,QAAM0C,iBAAiB,GAAGpD,IAAI,CAACC,GAAL,CAASuB,IAAI,CAAC1B,MAAL,GAAc,CAAvB,EAA0BE,IAAI,CAACqD,IAAL,CAAU,CAACH,gBAAgB,GAAGF,iBAApB,IAAyCtC,kBAAnD,IAAyEA,kBAAnG,CAA1B;AAEA,SAAO;AACLyC,IAAAA,mBADK;AAELC,IAAAA,iBAFK;AAGL5B,IAAAA,IAHK;AAILF,IAAAA,SAJK;AAKLyB,IAAAA;AALK,GAAP;AAOD;;ACrGM,SAASO,aAAT,CAA0DC,EAA1D,EAAiE;AACtE,QAAMpM,GAAG,GAAGK,MAAM,CAAC+L,EAAD,CAAlB;AAEAzL,EAAAA,SAAS,CAAC,MAAM;AACdX,IAAAA,GAAG,CAACC,OAAJ,GAAcmM,EAAd;AACD,GAFQ,CAAT;AAIA,SAAOtM,WAAW,CAAC,CAAC,GAAGuM,IAAJ,KAA4B;AAC7CrM,IAAAA,GAAG,CAACC,OAAJ,CAAY,GAAGoM,IAAf;AACD,GAFiB,EAEf,EAFe,CAAlB;AAGD;;ACAc,SAASC,kBAAT,CAAmC;AAChD9I,EAAAA,MADgD;AAEhD+I,EAAAA,MAFgD;AAGhDC,EAAAA,UAHgD;AAIhDC,EAAAA,aAJgD;AAKhDC,EAAAA;AALgD,CAAnC,EAME;AACfD,EAAAA,aAAa,GAAGD,UAAU,KAAKhJ,MAAM,CAACC,GAAtB,IAA6BgJ,aAA7B,IAA8C,MAA9D;AACA,MAAIE,QAAQ,GAAG,EAAf;;AACA,MAAIF,aAAa,KAAK,KAAtB,EAA6B;AAC3BE,IAAAA,QAAQ,GAAG,QAAX;AACD,GAFD,MAEO,IAAIF,aAAa,KAAK,MAAtB,EAA8B;AACnCE,IAAAA,QAAQ,GAAG,QAAX;AACD;;AAED,WAASxM,OAAT,GAAmB;AACjB,QAAI,CAACoM,MAAL,EAAa;AACb,UAAM;AAAEK,MAAAA;AAAF,QAA0BpJ,MAAhC;AACA,QAAIqJ,SAAJ;;AACA,YAAQJ,aAAR;AACE,WAAK,KAAL;AACEI,QAAAA,SAAS,GAAGD,mBAAmB,GAAG,MAAH,GAAY,MAA3C;AACA;;AACF,WAAK,MAAL;AACEC,QAAAA,SAAS,GAAGD,mBAAmB,GAAG,KAAH,GAAW,MAA1C;AACA;;AACF;AACEC,QAAAA,SAAS,GAAGD,mBAAmB,GAAG,MAAH,GAAY,KAA3C;AACA;AATJ;;AAWAL,IAAAA,MAAM,CAAC/I,MAAM,CAACC,GAAR,EAAaoJ,SAAb,CAAN;AACD;;AAED,sBACE1J;AAAM,IAAA,SAAS,EAAC,sBAAhB;AAAuC,IAAA,OAAO,EAAEhD,OAAhD;AAAA,4BACEiD;AAAM,MAAA,SAAS,EAAC,sBAAhB;AAAA,gBAAwCsJ;AAAxC,MADF,eAEEtJ;AAAA,gBAAOuJ;AAAP,MAFF;AAAA,IADF;AAMD;;ACpDD,MAAMG,YAAY,GAAG,IAAI7B,GAAJ,CAAQ,CAE3B,cAF2B,EAI3B,KAJ2B,EAK3B,UAL2B,EAM3B,UAN2B,EAO3B,SAP2B,EAQ3B,IAR2B,EAS3B,QAT2B,EAU3B,MAV2B,EAW3B,SAX2B,EAY3B,YAZ2B,EAa3B,OAb2B,EAe3B,KAf2B,EAiB3B,WAjB2B,EAkB3B,WAlB2B,EAmB3B,YAnB2B,EAoB3B,SApB2B,EAqB3B,KArB2B,EAsB3B,MAtB2B,EAuB3B,UAvB2B,EAwB3B,QAxB2B,EA0B3B,QA1B2B,EA4B3B,aA5B2B,EA6B3B,QA7B2B,EA8B3B,OA9B2B,EA+B3B,MA/B2B,EAiC3B,aAjC2B,EAmC3B,IAnC2B,EAqC3B,IArC2B,EAsC3B,IAtC2B,EAuC3B,IAvC2B,EAwC3B,IAxC2B,EAyC3B,IAzC2B,EA0C3B,IA1C2B,EA2C3B,IA3C2B,EA4C3B,KA5C2B,EA6C3B,KA7C2B,EA8C3B,KA9C2B,CAAR,CAArB;AAiDO,SAAS8B,iBAAT,CAA2BjK,CAA3B,EAA4D;AACjE,SAAO,CAACA,CAAC,CAACkK,OAAF,IAAalK,CAAC,CAACmK,OAAhB,KAA4BnK,CAAC,CAACW,GAAF,KAAU,SAA7C;AACD;AAEM,SAASyJ,kBAAT,CAA4BhJ,KAA5B,EAAiF;AACtF,SAAO,CAAC4I,YAAY,CAAC5E,GAAb,CAAiBhE,KAAK,CAACT,GAAvB,CAAR;AACD;AAQM,SAAS0J,kBAAT,CAA4B;AAAE1J,EAAAA,GAAF;AAAOV,EAAAA;AAAP,CAA5B,EAA2F;AAChG,MAAIU,GAAG,KAAK,KAAR,KAAkBV,MAAM,YAAYqK,gBAAlB,IAAsCrK,MAAM,YAAYsK,mBAAxD,IAA+EtK,MAAM,YAAYuK,iBAAnH,CAAJ,EAA2I;AACzI,WAAOvK,MAAM,CAACwK,OAAP,CAAe,6FAAf,CAAP;AACD;;AACD,SAAO,KAAP;AACD;;AC3DM,SAASC,sBAAT,CAAuC;AAAEC,EAAAA,gBAAF;AAAoBxH,EAAAA,OAApB;AAA6BoE,EAAAA,IAA7B;AAAmCuB,EAAAA;AAAnC,CAAvC,EAAoI;AACzI,QAAMpI,MAAM,GAAGyC,OAAO,CAACwH,gBAAgB,CAAChH,GAAlB,CAAtB;AACA,QAAMlD,GAAG,GAAG8G,IAAI,CAACoD,gBAAgB,CAACC,MAAlB,CAAhB;AACA,SAAOlK,MAAM,CAACmK,MAAP,IAAiB,IAAjB,IACF,CAACnK,MAAM,CAACmD,QADN,IAEF,CAACiF,UAAU,CAACrI,GAAD,CAFT,IAGF,CAAC,OAAOC,MAAM,CAACoK,QAAd,KAA2B,UAA3B,GAAwCpK,MAAM,CAACoK,QAAP,CAAgBrK,GAAhB,CAAxC,GAA+DC,MAAM,CAACoK,QAAvE,MAAqF,KAH1F;AAID;AASM,SAASC,2BAAT,CAA4C;AAAEC,EAAAA,kBAAF;AAAsB7H,EAAAA,OAAtB;AAA+BkE,EAAAA,SAA/B;AAA0C4D,EAAAA;AAA1C,CAA5C,EAAwJ;AAC7J,MAAID,kBAAkB,KAAK,MAA3B,EAAmC;AACjC,UAAM;AAAErH,MAAAA,GAAF;AAAOiH,MAAAA;AAAP,QAAkBK,YAAxB;AACA,UAAMC,YAAY,GAAG/H,OAAO,CAAC0C,MAA7B;AACA,UAAMsF,iBAAiB,GAAGxH,GAAG,KAAKuH,YAAlC;AACA,UAAME,mBAAmB,GAAGzH,GAAG,KAAK,CAAC,CAArC;;AAEA,QAAIwH,iBAAJ,EAAuB;AACrB,UAAIH,kBAAkB,KAAK,YAA3B,EAAyC;AACvC,cAAMK,SAAS,GAAGT,MAAM,KAAKvD,SAAS,GAAG,CAAzC;;AACA,YAAI,CAACgE,SAAL,EAAgB;AACd,iBAAO;AACL1H,YAAAA,GAAG,EAAE,CADA;AAELiH,YAAAA,MAAM,EAAEA,MAAM,GAAG;AAFZ,WAAP;AAID;AACF,OARD,MAQO,IAAII,kBAAkB,KAAK,eAA3B,EAA4C;AACjD,eAAO;AACLJ,UAAAA,MADK;AAELjH,UAAAA,GAAG,EAAE;AAFA,SAAP;AAID;AACF,KAfD,MAeO,IAAIyH,mBAAJ,EAAyB;AAC9B,UAAIJ,kBAAkB,KAAK,YAA3B,EAAyC;AACvC,cAAMM,UAAU,GAAGV,MAAM,KAAK,CAA9B;;AACA,YAAI,CAACU,UAAL,EAAiB;AACf,iBAAO;AACLV,YAAAA,MAAM,EAAEA,MAAM,GAAG,CADZ;AAELjH,YAAAA,GAAG,EAAEuH,YAAY,GAAG;AAFf,WAAP;AAID;AACF,OARD,MAQO,IAAIF,kBAAkB,KAAK,eAA3B,EAA4C;AACjD,eAAO;AACLJ,UAAAA,MADK;AAELjH,UAAAA,GAAG,EAAEuH,YAAY,GAAG;AAFf,SAAP;AAID;AACF;AACF;;AAED,SAAOD,YAAP;AACD;AAUM,SAASM,WAAT,CAA4B;AAAEP,EAAAA,kBAAF;AAAsB7H,EAAAA,OAAtB;AAA+BkE,EAAAA,SAA/B;AAA0CsD,EAAAA,gBAAgB,EAAE;AAAEC,IAAAA,MAAF;AAAUjH,IAAAA;AAAV,GAA5D;AAA6EvD,EAAAA;AAA7E,CAA5B,EAAsJ;AAG3J,MAAI4K,kBAAkB,KAAK,MAAvB,IAAiCA,kBAAkB,KAAK,YAA5D,EAA0E;AACxE,UAAMQ,eAAe,GAAG7H,GAAG,KAAKR,OAAO,CAAC0C,MAAR,GAAiB,CAAjD;AACA,UAAM4F,gBAAgB,GAAG9H,GAAG,KAAK,CAAjC;AACA,UAAM+H,SAAS,GAAGd,MAAM,KAAKvD,SAAS,GAAG,CAAzC;AACA,UAAMsE,UAAU,GAAGf,MAAM,KAAK,CAA9B;AAEA,WAAOxK,QAAQ,GAAGqL,gBAAgB,IAAIE,UAAvB,GAAoCH,eAAe,IAAIE,SAAtE;AACD;;AAED,SAAO,KAAP;AACD;;ACpFM,SAASE,sBAAT,CAAmCC,SAAnC,EAAmG;AACxG,MAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;AACnC,UAAM,IAAIjO,KAAJ,CAAU,uDAAV,CAAN;AACD;AACF;AAEM,SAASkO,YAAT,CAA6BpL,MAA7B,EAAmF;AACxF,SAAOA,MAAM,CAACqB,MAAP,GACH;AAAE4C,IAAAA,IAAI,EAAG,qBAAoBjE,MAAM,CAACC,GAAI;AAAxC,GADG,GAEH;AAAEoL,IAAAA,eAAe,EAAErL,MAAM,CAACiD,GAAP,GAAa;AAAhC,GAFJ;AAGD;;ACTD,SAASqI,WAAT,CAAqBrC,aAArB,EAAoD;AAClD,UAAQA,aAAR;AACE,SAAK,KAAL;AACE,aAAO,WAAP;;AACF,SAAK,MAAL;AACE,aAAO,YAAP;;AACF;AACE,aAAO,MAAP;AANJ;AAQD;;AAac,SAASsC,UAAT,CAA2B;AACxCvL,EAAAA,MADwC;AAExCwL,EAAAA,QAFwC;AAGxCjK,EAAAA,eAHwC;AAIxCC,EAAAA,wBAJwC;AAKxCwH,EAAAA,UALwC;AAMxCC,EAAAA,aANwC;AAOxCF,EAAAA;AAPwC,CAA3B,EAQY;AACzB,WAAS0C,aAAT,CAAuB/K,KAAvB,EAAkE;AAChE,QAAIA,KAAK,CAACgL,WAAN,KAAsB,OAAtB,IAAiChL,KAAK,CAACiL,OAAN,KAAkB,CAAvD,EAA0D;AACxD;AACD;;AAED,UAAM;AAAEC,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,QAA+BnL,KAArC;AACA,UAAM;AAAEoL,MAAAA;AAAF,QAAYF,aAAa,CAACG,qBAAd,EAAlB;AACA,UAAMC,MAAM,GAAGF,KAAK,GAAGpL,KAAK,CAACuL,OAA7B;;AAEA,QAAID,MAAM,GAAG,EAAb,EAAiB;AAEf;AACD;;AAED,aAASE,aAAT,CAAuBxL,KAAvB,EAA4C;AAC1C,UAAIA,KAAK,CAACmL,SAAN,KAAoBA,SAAxB,EAAmC;;AACnC,UAAInL,KAAK,CAACgL,WAAN,KAAsB,OAAtB,IAAiChL,KAAK,CAACiL,OAAN,KAAkB,CAAvD,EAA0D;AACxDQ,QAAAA,WAAW,CAACzL,KAAD,CAAX;AACA;AACD;;AACD,YAAMO,KAAK,GACTP,KAAK,CAACuL,OAAN,GAAgBD,MAAhB,GAAyBJ,aAAa,CAACG,qBAAd,GAAsC9H,IADjE;;AAEA,UAAIhD,KAAK,GAAG,CAAZ,EAAe;AACbuK,QAAAA,QAAQ,CAACxL,MAAD,EAASiB,KAAT,CAAR;AACD;AACF;;AAED,aAASkL,WAAT,CAAqBzL,KAArB,EAA0C;AACxC,UAAIA,KAAK,CAACmL,SAAN,KAAoBA,SAAxB,EAAmC;AACnCtO,MAAAA,MAAM,CAACG,mBAAP,CAA2B,aAA3B,EAA0CwO,aAA1C;AACA3O,MAAAA,MAAM,CAACG,mBAAP,CAA2B,WAA3B,EAAwCyO,WAAxC;AACD;;AAEDzL,IAAAA,KAAK,CAAC0L,cAAN;AACA7O,IAAAA,MAAM,CAACC,gBAAP,CAAwB,aAAxB,EAAuC0O,aAAvC;AACA3O,IAAAA,MAAM,CAACC,gBAAP,CAAwB,WAAxB,EAAqC2O,WAArC;AACD;;AAED,WAASE,OAAT,GAAmB;AACjB,QAAIrM,MAAM,CAACsB,cAAX,EAA2B;AACzB,0BACE1B,IAAC,MAAD,CAAQ,cAAR;AACE,QAAA,MAAM,EAAEI,MADV;AAEE,QAAA,UAAU,EAAEgJ,UAFd;AAGE,QAAA,aAAa,EAAEC,aAHjB;AAIE,QAAA,MAAM,EAAEF,MAJV;AAKE,QAAA,eAAe,EAAExH,eALnB;AAME,QAAA,wBAAwB,EAAEC;AAN5B,QADF;AAUD;;AAED,QAAIxB,MAAM,CAACoB,QAAX,EAAqB;AACnB,0BACExB,IAAC,kBAAD;AACE,QAAA,MAAM,EAAEI,MADV;AAEE,QAAA,MAAM,EAAE+I,MAFV;AAGE,QAAA,UAAU,EAAEC,UAHd;AAIE,QAAA,aAAa,EAAEC,aAJjB;AAAA,kBAMGjJ,MAAM,CAACgB;AANV,QADF;AAUD;;AAED,WAAOhB,MAAM,CAACgB,IAAd;AACD;;AAED,QAAMsL,SAAS,GAAGC,IAAI,CAAC,UAAD,EAAavM,MAAM,CAACwM,eAApB,EACExM,MAAM,CAACmB,SADT,IACpB,oBADoB,EAEDnB,MAAM,CAACqB,MAFN,IAEpB,iBAFoB,EAGIrB,MAAM,CAACkD,kBAHX,IAGpB,sBAHoB,CAAtB;AAMA,sBACEtD;AACE,IAAA,IAAI,EAAC,cADP;AAEE,qBAAeI,MAAM,CAACiD,GAAP,GAAa,CAF9B;AAGE,iBACE+F,UAAU,KAAKhJ,MAAM,CAACC,GAAtB,GAA4BqL,WAAW,CAACrC,aAAD,CAAvC,GAAyDjM,SAJ7D;AAME,IAAA,SAAS,EAAEsP,SANb;AAOE,IAAA,KAAK,EAAElB,YAAY,CAACpL,MAAD,CAPrB;AAQE,IAAA,aAAa,EAAEA,MAAM,CAACmB,SAAP,GAAmBsK,aAAnB,GAAmCzO,SARpD;AAAA,cAUGqP,OAAO;AAVV,IADF;AAcD;;ACxGD,SAASI,SAAT,CAA0B;AACxBhK,EAAAA,OADwB;AAExBoE,EAAAA,IAFwB;AAGxB6F,EAAAA,YAHwB;AAIxBC,EAAAA,oBAJwB;AAKxBpL,EAAAA,eALwB;AAMxBqL,EAAAA,cANwB;AAOxB5D,EAAAA,UAPwB;AAQxBC,EAAAA,aARwB;AASxBF,EAAAA;AATwB,CAA1B,EAU0B;AACxB,QAAM8D,4BAA4B,GAAGvQ,WAAW,CAAEkD,OAAD,IAAsB;AACrE,QAAI,CAACmN,oBAAL,EAA2B;AAE3BzB,IAAAA,sBAAsB,CAACwB,YAAD,CAAtB;AAEA,UAAMI,eAAe,GAAG,IAAIrF,GAAJ,EAAxB;;AACA,QAAIjI,OAAJ,EAAa;AACX,WAAK,MAAMO,GAAX,IAAkB8G,IAAlB,EAAwB;AACtBiG,QAAAA,eAAe,CAAC3E,GAAhB,CAAoBuE,YAAY,CAAC3M,GAAD,CAAhC;AACD;AACF;;AAED4M,IAAAA,oBAAoB,CAACG,eAAD,CAApB;AACD,GAb+C,EAa7C,CAACH,oBAAD,EAAuB9F,IAAvB,EAA6B6F,YAA7B,CAb6C,CAAhD;AAeA,sBACE9M;AACE,IAAA,IAAI,EAAC,KADP;AAEE,qBAAe,CAFjB;AAGE,IAAA,SAAS,EAAC,gBAHZ;AAAA,cAKG6C,OAAO,CAACI,GAAR,CAAY7C,MAAM,IAAI;AACrB,0BACEJ,IAAC,UAAD;AAEE,QAAA,MAAM,EAAEI,MAFV;AAGE,QAAA,QAAQ,EAAE4M,cAHZ;AAIE,QAAA,eAAe,EAAErL,eAJnB;AAKE,QAAA,wBAAwB,EAAEsL,4BAL5B;AAME,QAAA,MAAM,EAAE9D,MANV;AAOE,QAAA,UAAU,EAAEC,UAPd;AAQE,QAAA,aAAa,EAAEC;AARjB,SACOjJ,MAAM,CAACC,GADd,CADF;AAYD,KAbA;AALH,IADF;AAsBD;;AAED,iCAAe8M,IAAI,CAACN,SAAD,CAAnB;;ACxDA,SAASO,SAAT,CAA0B;AACxBvK,EAAAA,OADwB;AAExBwK,EAAAA,OAFwB;AAGxBC,EAAAA;AAHwB,CAA1B,EAI0B;AACxB,WAASjO,QAAT,CAAkBgB,GAAlB,EAA+BnB,KAA/B,EAA+C;AAC7C,UAAMqO,UAAmB,GAAG,EAAE,GAAGF;AAAL,KAA5B;AACAE,IAAAA,UAAU,CAAClN,GAAD,CAAV,GAAkBnB,KAAlB;AACAoO,IAAAA,eAAe,QAAf,YAAAA,eAAe,CAAGC,UAAH,CAAf;AACD;;AAED,sBACEvN;AACE,IAAA,IAAI,EAAC,KADP;AAEE,qBAAe,CAFjB;AAGE,IAAA,SAAS,EAAC,gBAHZ;AAAA,cAKG6C,OAAO,CAACI,GAAR,CAAY7C,MAAM,IAAI;AACrB,YAAM;AAAEC,QAAAA;AAAF,UAAUD,MAAhB;AACA,YAAMsM,SAAS,GAAGC,IAAI,CAAC,UAAD,EACDvM,MAAM,CAACqB,MADN,IACpB,iBADoB,EAEIrB,MAAM,CAACkD,kBAFX,IAEpB,sBAFoB,CAAtB;AAKA,0BACEtD;AAEE,QAAA,SAAS,EAAE0M,SAFb;AAGE,QAAA,KAAK,EAAElB,YAAY,CAACpL,MAAD,CAHrB;AAAA,kBAKGA,MAAM,CAACoN,cAAP,iBACCxN,IAAC,MAAD,CAAQ,cAAR;AACE,UAAA,MAAM,EAAEI,MADV;AAEE,UAAA,KAAK,EAAEiN,OAAF,oBAAEA,OAAO,CAAGjN,MAAM,CAACC,GAAV,CAFhB;AAGE,UAAA,QAAQ,EAAEnB,KAAK,IAAIG,QAAQ,CAACgB,GAAD,EAAMnB,KAAN;AAH7B;AANJ,SACOmB,GADP,CADF;AAeD,KAtBA;AALH,IADF;AA+BD;;AAED,iCAAe8M,IAAI,CAACC,SAAD,CAAnB;;ACrDA,SAASK,IAAT,CAAqB;AACnBf,EAAAA,SADmB;AAEnBtM,EAAAA,MAFmB;AAGnBtB,EAAAA,cAHmB;AAInB4O,EAAAA,QAJmB;AAKnBC,EAAAA,aALmB;AAMnB7L,EAAAA,aANmB;AAOnB3B,EAAAA,GAPmB;AAQnBmK,EAAAA,MARmB;AASnBsD,EAAAA,eATmB;AAUnBC,EAAAA,UAVmB;AAWnB9Q,EAAAA,OAXmB;AAYnB+Q,EAAAA,aAZmB;AAanBC,EAAAA,aAbmB;AAcnBC,EAAAA,WAdmB;AAenBC,EAAAA,UAfmB;AAgBnBC,EAAAA,SAhBmB;AAiBnB,KAAGhO;AAjBgB,CAArB,EAkB6BtD,GAlB7B,EAkB6D;AAC3D,QAAM8D,OAAO,GAAGzD,MAAM,CAAiB,IAAjB,CAAtB;AAEA,QAAM;AAAEkR,IAAAA;AAAF,MAAgB/N,MAAtB;AACAsM,EAAAA,SAAS,GAAGC,IAAI,CACd,UADc,EASd,OAAOwB,SAAP,KAAqB,UAArB,GAAkCA,SAAS,CAAChO,GAAD,CAA3C,GAAmDgO,SATrC,EAUdzB,SAVc,EAGOtM,MAAM,CAACqB,MAHd,IAGZ,iBAHY,EAIYrB,MAAM,CAACkD,kBAJnB,IAIZ,sBAJY,EAKSxE,cALT,IAKZ,mBALY,EAMO4O,QANP,IAMZ,iBANY,EAOaC,aAPb,IAOZ,uBAPY,CAAhB;;AAaA,WAASS,iBAAT,CAA2BC,UAA3B,EAAiD;AAC/CJ,IAAAA,UAAU,CAAC;AAAE5K,MAAAA,GAAG,EAAEjD,MAAM,CAACiD,GAAd;AAAmBiH,MAAAA;AAAnB,KAAD,EAA8B+D,UAA9B,CAAV;AACD;;AAED,WAASC,WAAT,GAAuB;AAAA;;AACrBF,IAAAA,iBAAiB,0BAAChO,MAAM,CAACmO,aAAR,qBAAC,sBAAsBC,WAAvB,CAAjB;AACAX,IAAAA,UAAU,QAAV,YAAAA,UAAU,CAAGvD,MAAH,EAAWnK,GAAX,EAAgBC,MAAhB,CAAV;AACD;;AAED,WAASqO,iBAAT,GAA6B;AAC3BL,IAAAA,iBAAiB;AAClB;;AAED,WAASM,iBAAT,GAA6B;AAC3BN,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD;;AAED,WAASO,eAAT,CAAyBC,MAAzB,EAAoC;AAClCZ,IAAAA,WAAW,CAAC1D,MAAD,EAASsE,MAAT,CAAX;AACD;;AAED,WAAS7M,oBAAT,CAA8BnC,OAA9B,EAAgDiP,YAAhD,EAAuE;AACrEX,IAAAA,SAAS,CAAC;AAAE5D,MAAAA,MAAF;AAAU1K,MAAAA,OAAV;AAAmBiP,MAAAA;AAAnB,KAAD,CAAT;AACD;;AAED,sBACE7O;AACE,IAAA,IAAI,EAAC,UADP;AAEE,qBAAeI,MAAM,CAACiD,GAAP,GAAa,CAF9B;AAGE,qBAAevE,cAHjB;AAIE,IAAA,GAAG,EAAEtC,eAAe,CAACkE,OAAD,EAAU9D,GAAV,CAJtB;AAKE,IAAA,SAAS,EAAE8P,SALb;AAME,IAAA,KAAK,EAAElB,YAAY,CAACpL,MAAD,CANrB;AAOE,IAAA,OAAO,EAAEW,SAAS,CAACuN,WAAD,EAAcvR,OAAd,CAPpB;AAQE,IAAA,aAAa,EAAEgE,SAAS,CAAC2N,iBAAD,EAAoBZ,aAApB,CAR1B;AASE,IAAA,aAAa,EAAE/M,SAAS,CAAC0N,iBAAD,EAAoBV,aAApB,CAT1B;AAAA,OAUM7N,KAVN;AAAA,cAYG,CAACE,MAAM,CAACmD,QAAR,iBACCxD;AAAA,8BACEC,IAAC,MAAD,CAAQ,SAAR;AACE,QAAA,MAAM,EAAEI,MADV;AAEE,QAAA,MAAM,EAAEkK,MAFV;AAGE,QAAA,GAAG,EAAEnK,GAHP;AAIE,QAAA,cAAc,EAAErB,cAJlB;AAKE,QAAA,aAAa,EAAEgD,aALjB;AAME,QAAA,oBAAoB,EAAEC,oBANxB;AAOE,QAAA,WAAW,EAAE4M;AAPf,QADF,EAUGf,eAAe,iBACd5N;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,WAA0C4N;AAA1C,QAXJ;AAAA;AAbJ,IADF;AA+BD;;AAED,4BAAeT,IAAI,eAAC2B,UAAU,CAACrB,IAAD,CAAX,CAAnB;;AC/Fe,SAASsB,eAAT,CAAgC;AAC7C5O,EAAAA,GAD6C;AAE7CC,EAAAA,MAF6C;AAG7C4N,EAAAA,WAH6C;AAI7C,KAAG9N;AAJ0C,CAAhC,EAKQ;AAAA;;AACrB,QAAM8O,cAAc,GAAGlS,eAAe,CAAC,MAAMkR,WAAW,CAAC7N,GAAD,EAAM,IAAN,CAAlB,CAAtC;AACA,MAAIC,MAAM,CAACmK,MAAP,KAAkBnN,SAAtB,EAAiC,OAAO,IAAP;;AAEjC,QAAMmN,MAAM,gBACVvK;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAsC,IAAA,cAAc,EAAEgP,cAAtD;AAAA,2BACEhP,IAAC,MAAD,CAAQ,MAAR;AACE,MAAA,GAAG,EAAEG,GADP;AAEE,MAAA,MAAM,EAAEC,MAFV;AAGE,MAAA,WAAW,EAAE4N,WAHf;AAAA,SAIM9N;AAJN;AADF,IADF;;AAWA,+BAAIE,MAAM,CAACmO,aAAX,aAAI,sBAAsBU,YAA1B,EAAwC;AACtC,wBAAOA,YAAY,CAAC1E,MAAD,EAASrK,KAAK,CAACgP,kBAAf,CAAnB;AACD;;AAED,SAAO3E,MAAP;AACD;;ACbc,SAAS4E,QAAT,CAAyB;AACtCzC,EAAAA,SADsC;AAEtCtM,EAAAA,MAFsC;AAGtCD,EAAAA,GAHsC;AAItCmK,EAAAA,MAJsC;AAKtC8E,EAAAA,WALsC;AAMtC,KAAGlP;AANmC,CAAzB,EAOU;AACvB,QAAM,CAACmP,UAAD,EAAaC,aAAb,IAA8BnR,QAAQ,CAAuC,IAAvC,CAA5C;AAEA,QAAMuC,OAAO,GAAGhE,WAAW,CAAC6S,IAAI,IAAI;AAClC,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjB,YAAM;AAAElL,QAAAA,IAAF;AAAQmL,QAAAA;AAAR,UAAgBD,IAAI,CAACpD,qBAAL,EAAtB;AACAmD,MAAAA,aAAa,CAAC;AAAEjL,QAAAA,IAAF;AAAQmL,QAAAA;AAAR,OAAD,CAAb;AACD;AACF,GAL0B,EAKxB,EALwB,CAA3B;AAOA,QAAM;AAAErB,IAAAA;AAAF,MAAgB/N,MAAtB;AACAsM,EAAAA,SAAS,GAAGC,IAAI,gDAQd,OAAOwB,SAAP,KAAqB,UAArB,GAAkCA,SAAS,CAAChO,GAAD,CAA3C,GAAmDgO,SARrC,EASdzB,SATc,EAGOtM,MAAM,CAACqB,MAHd,IAGZ,iBAHY,EAIYrB,MAAM,CAACkD,kBAJnB,IAIZ,sBAJY,CAAhB;;AAYA,WAASmM,cAAT,GAA0B;AAAA;;AACxB,QAAIJ,UAAU,KAAK,IAAnB,EAAyB;AACzB,UAAM;AAAE1I,MAAAA,SAAS,EAAE+I,MAAb;AAAqBrN,MAAAA,UAAU,EAAEsN;AAAjC,iCAA6CC,QAAQ,CAACC,gBAAtD,oCAA0ED,QAAQ,CAACE,eAAzF;AACA,UAAM;AAAEzL,MAAAA,IAAF;AAAQmL,MAAAA;AAAR,QAAgBH,UAAtB;AACA,UAAMU,QAAQ,GAAG1L,IAAI,GAAGsL,OAAxB;AACA,UAAMK,OAAO,GAAGR,GAAG,GAAGE,MAAtB;AAEA,wBACE1P,IAAC,eAAD,OACMoP,WADN;AAEE,MAAA,MAAM,EAAE9E,MAFV;AAGE,MAAA,MAAM,EAAElK,MAHV;AAIE,MAAA,IAAI,EAAE2P,QAJR;AAKE,MAAA,GAAG,EAAEC;AALP,MADF;AASD;;AAED,sBACEhQ;AACE,IAAA,IAAI,EAAC,UADP;AAEE,qBAAeI,MAAM,CAACiD,GAAP,GAAa,CAF9B;AAGE,yBAHF;AAIE,IAAA,GAAG,EAAE3C,OAJP;AAKE,IAAA,SAAS,EAAEgM,SALb;AAME,IAAA,KAAK,EAAElB,YAAY,CAACpL,MAAD,CANrB;AAAA,OAOMF,KAPN;AAAA,cASGuP,cAAc;AATjB,IADF;AAaD;;ACtED,SAASQ,GAAT,CAA8B;AAC5BC,EAAAA,YAAY,EAAEC,YAAY,GAAG1C,MADD;AAE5Bf,EAAAA,SAF4B;AAG5BpC,EAAAA,MAH4B;AAI5BxI,EAAAA,aAJ4B;AAK5BsO,EAAAA,aAL4B;AAM5BC,EAAAA,kBAN4B;AAO5BlQ,EAAAA,GAP4B;AAQ5B2F,EAAAA,eAR4B;AAS5BwK,EAAAA,iBAT4B;AAU5BzC,EAAAA,UAV4B;AAW5B0C,EAAAA,QAX4B;AAY5BC,EAAAA,oBAZ4B;AAa5BC,EAAAA,YAb4B;AAc5BjB,EAAAA,GAd4B;AAe5BxB,EAAAA,WAf4B;AAgB5BC,EAAAA,UAhB4B;AAiB5BC,EAAAA,SAjB4B;AAkB5B,mBAAiBwC,YAlBW;AAmB5B,mBAAiBC,YAnBW;AAoB5B,KAAGzQ;AApByB,CAA9B,EAqB4BtD,GArB5B,EAqB4D;AAC1D,WAASgU,eAAT,GAA2B;AACzBJ,IAAAA,oBAAoB,QAApB,YAAAA,oBAAoB,CAAGlG,MAAH,CAApB;AACD;;AAEDoC,EAAAA,SAAS,GAAGC,IAAI,oBAEHrC,MAAM,GAAG,CAAT,KAAe,CAAf,GAAmB,MAAnB,GAA4B,KAAM,EAF/B,EAMdiG,QANc,oBAMdA,QAAQ,CAAGpQ,GAAH,CANM,EAOduM,SAPc,EAGQ5K,aAHR,IAGZ,kBAHY,EAIc,CAAAwO,iBAAiB,QAAjB,YAAAA,iBAAiB,CAAEjN,GAAnB,MAA2B,CAAC,CAJ1C,IAIZ,wBAJY,CAAhB;AAUA,sBACErD;AACE,IAAA,IAAI,EAAC,KADP;AAEE,qBAAe0Q,YAFjB;AAGE,qBAAeC,YAHjB;AAIE,IAAA,GAAG,EAAE/T,GAJP;AAKE,IAAA,SAAS,EAAE8P,SALb;AAME,IAAA,YAAY,EAAE3L,SAAS,CAAC6P,eAAD,EAAkBH,YAAlB,CANzB;AAOE,IAAA,KAAK,EAAE;AAAEjB,MAAAA;AAAF,KAPT;AAAA,OAQMtP,KARN;AAAA,cAUG4F,eAAe,CAAC7C,GAAhB,CAAoB7C,MAAM,IAAI;AAC7B,YAAMtB,cAAc,GAAG,CAAAwR,iBAAiB,QAAjB,YAAAA,iBAAiB,CAAEjN,GAAnB,MAA2BjD,MAAM,CAACiD,GAAzD;;AACA,UAAI,CAAAiN,iBAAiB,QAAjB,YAAAA,iBAAiB,CAAEO,IAAnB,MAA4B,MAA5B,IAAsC/R,cAA1C,EAA0D;AACxD,4BACEkB,IAAC,QAAD;AAEE,UAAA,MAAM,EAAEsK,MAFV;AAGE,UAAA,MAAM,EAAElK,MAHV;AAIE,UAAA,GAAG,EAAED,GAJP;AAKE,UAAA,SAAS,EAAEmQ,iBAAiB,CAACQ,SAL/B;AAME,UAAA,WAAW,EAAER,iBAAiB,CAAClB;AANjC,WACOhP,MAAM,CAACC,GADd,CADF;AAUD;;AAED,0BACEL,IAAC,YAAD;AAEE,QAAA,MAAM,EAAEsK,MAFV;AAGE,QAAA,MAAM,EAAElK,MAHV;AAIE,QAAA,GAAG,EAAED,GAJP;AAKE,QAAA,QAAQ,EAAEiQ,aAAa,KAAKhQ,MAAM,CAACiD,GALrC;AAME,QAAA,aAAa,EAAEgN,kBAAkB,KAAKjQ,MAAM,CAACiD,GAN/C;AAOE,QAAA,cAAc,EAAEvE,cAPlB;AAQE,QAAA,aAAa,EAAEgD,aARjB;AASE,QAAA,eAAe,EAAEhD,cAAc,GAAIwR,iBAAD,CAAyC1C,eAA5C,GAA8DxQ,SAT/F;AAUE,QAAA,OAAO,EAAE0B,cAAc,GAAIwR,iBAAD,CAAyCS,OAA5C,GAAsD3T,SAV/E;AAWE,QAAA,SAAS,EAAE0B,cAAc,GAAGwR,iBAAiB,CAAEQ,SAAtB,GAAkC1T,SAX7D;AAYE,QAAA,UAAU,EAAEyQ,UAZd;AAaE,QAAA,WAAW,EAAEG,WAbf;AAcE,QAAA,UAAU,EAAEC,UAdd;AAeE,QAAA,SAAS,EAAEC;AAfb,SACO9N,MAAM,CAACC,GADd,CADF;AAmBD,KAlCA;AAVH,IADF;AAgDD;;AAED,2BAAe8M,IAAI,eAAC2B,UAAU,CAACmB,GAAD,CAAX,CAAnB;;ACtEA,SAASe,SAAT,CAA0B;AACxB5I,EAAAA,EADwB;AAExBkC,EAAAA,MAFwB;AAGxB/J,EAAAA,QAHwB;AAIxBgH,EAAAA,SAJwB;AAKxB/G,EAAAA,UALwB;AAMxB1B,EAAAA,cANwB;AAOxBgD,EAAAA,aAPwB;AAQxB1B,EAAAA,MARwB;AASxB6Q,EAAAA,gBATwB;AAUxB/C,EAAAA,SAVwB;AAWxBzN,EAAAA,WAAW,EAAEyQ;AAXW,CAA1B,EAY0B;AACxB,WAASzQ,WAAT,GAAuB;AACrByQ,IAAAA,kBAAkB,CAAC9I,EAAD,CAAlB;AACD;;AAED,WAASrG,oBAAT,CAA8BnC,OAA9B,EAAgD;AAC9CsO,IAAAA,SAAS,CAAC;AAAE5D,MAAAA,MAAF;AAAU1K,MAAAA,OAAV;AAAmBiP,MAAAA,YAAY,EAAE;AAAjC,KAAD,CAAT;AACD;;AAGD,QAAMsC,eAAe,GAAG/Q,MAAM,CAACmD,QAAP,IAAmB0N,gBAAgB,KAAK7Q,MAAM,CAACiD,GAAvE;AAEA,sBACErD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,qBAAeI,MAAM,CAACiD,GAAP,GAAa,CAF9B;AAIE,IAAA,SAAS,EAAEsJ,IAAI,CAAC,UAAD,EACMvM,MAAM,CAACqB,MADb,IACb,iBADa,EAEWrB,MAAM,CAACkD,kBAFlB,IAEb,sBAFa,EAGQxE,cAHR,IAGb,mBAHa,CAJjB;AASE,IAAA,KAAK,EAAE,EACL,GAAG0M,YAAY,CAACpL,MAAD,CADV;AAELgR,MAAAA,MAAM,EAAED,eAAe,GAAG,SAAH,GAAe;AAFjC,KATT;AAaE,IAAA,OAAO,EAAEA,eAAe,GAAG1Q,WAAH,GAAiBrD,SAb3C;AAAA,cAeGgD,MAAM,CAAC4B,cAAP,KAA0B,CAAC5B,MAAM,CAACmD,QAAR,IAAoB0N,gBAAgB,KAAK7Q,MAAM,CAACiD,GAA1E,kBACCrD,IAAC,MAAD,CAAQ,cAAR;AACE,MAAA,QAAQ,EAAEO,QADZ;AAEE,MAAA,SAAS,EAAEgH,SAFb;AAGE,MAAA,MAAM,EAAEnH,MAHV;AAIE,MAAA,UAAU,EAAEI,UAJd;AAKE,MAAA,cAAc,EAAE1B,cALlB;AAME,MAAA,aAAa,EAAEgD,aANjB;AAOE,MAAA,oBAAoB,EAAEC,oBAPxB;AAQE,MAAA,WAAW,EAAEtB;AARf;AAhBJ,KAGOL,MAAM,CAACC,GAHd,CADF;AA8BD;;AAED,iCAAe8M,IAAI,CAAC6D,SAAD,CAAnB;;ACzDA,SAASK,UAAT,CAA2B;AACzBjJ,EAAAA,EADyB;AAEzB7H,EAAAA,QAFyB;AAGzBuF,EAAAA,eAHyB;AAIzByB,EAAAA,SAJyB;AAKzB+C,EAAAA,MALyB;AAMzBkF,EAAAA,GANyB;AAOzBvH,EAAAA,KAPyB;AAQzBzH,EAAAA,UARyB;AASzB8Q,EAAAA,eATyB;AAUzBxP,EAAAA,aAVyB;AAWzBmM,EAAAA,UAXyB;AAYzBC,EAAAA,SAZyB;AAazBzN,EAAAA,WAbyB;AAczB,KAAGP;AAdsB,CAA3B,EAeiC;AAE/B,QAAMmD,GAAG,GAAGyC,eAAe,CAAC,CAAD,CAAf,CAAmBzF,GAAnB,KAA2Ba,iBAA3B,GAA+C+G,KAAK,GAAG,CAAvD,GAA2DA,KAAvE;;AAEA,WAASsJ,WAAT,GAAuB;AACrBtD,IAAAA,UAAU,CAAC;AAAE3D,MAAAA,MAAF;AAAUjH,MAAAA,GAAG,EAAE,CAAC;AAAhB,KAAD,CAAV;AACD;;AAED,sBACErD;AACE,IAAA,IAAI,EAAC,KADP;AAEE,kBAAYiI,KAFd;AAGE,qBAAezH,UAHjB;AAIE,IAAA,SAAS,EAAEmM,IAAI,kCAGFrC,MAAM,GAAG,CAAT,KAAe,CAAf,GAAmB,MAAnB,GAA4B,KAAM,EAHhC,EAISxI,aAJT,IAIX,kBAJW,EAKewP,eAAe,KAAK,CAAC,CALpC,IAKX,wBALW,CAJjB;AAWE,IAAA,OAAO,EAAEC,WAXX;AAYE,IAAA,KAAK,EAAE;AAAE/B,MAAAA;AAAF,KAZT;AAAA,OAaMtP,KAbN;AAAA,cAeG4F,eAAe,CAAC7C,GAAhB,CAAoB7C,MAAM,iBACzBJ,IAACgR,WAAD;AAEE,MAAA,EAAE,EAAE5I,EAFN;AAGE,MAAA,MAAM,EAAEkC,MAHV;AAIE,MAAA,QAAQ,EAAE/J,QAJZ;AAKE,MAAA,SAAS,EAAEgH,SALb;AAME,MAAA,UAAU,EAAE/G,UANd;AAOE,MAAA,aAAa,EAAEsB,aAPjB;AAQE,MAAA,cAAc,EAAEwP,eAAe,KAAKlR,MAAM,CAACiD,GAR7C;AASE,MAAA,MAAM,EAAEjD,MATV;AAUE,MAAA,gBAAgB,EAAEiD,GAVpB;AAWE,MAAA,SAAS,EAAE6K,SAXb;AAYE,MAAA,WAAW,EAAEzN;AAZf,OACOL,MAAM,CAACC,GADd,CADD;AAfH,IADF;AAkCD;;AAED,sCAAe8M,IAAI,CAACkE,UAAD,CAAnB;;ACtEA,SAASG,WAAT,CAA4B;AAC1BpR,EAAAA,MAD0B;AAE1BD,EAAAA;AAF0B,CAA5B,EAG4B;AAC1B,QAAM;AAAEsR,IAAAA,gBAAgB,EAAEC,gBAApB;AAAsCC,IAAAA;AAAtC,MAA2DvR,MAAjE;AACA,QAAMsM,SAAS,GAAGC,IAAI,CACpB,UADoB,EAMpB,OAAOgF,gBAAP,KAA4B,UAA5B,GAAyCA,gBAAgB,CAACxR,GAAD,CAAzD,GAAiEwR,gBAN7C,EAGCvR,MAAM,CAACqB,MAHR,IAGlB,iBAHkB,EAIMrB,MAAM,CAACkD,kBAJb,IAIlB,sBAJkB,CAAtB;AASA,sBACEtD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,qBAAeI,MAAM,CAACiD,GAAP,GAAa,CAF9B;AAGE,IAAA,SAAS,EAAEqJ,SAHb;AAIE,IAAA,KAAK,EAAElB,YAAY,CAACpL,MAAD,CAJrB;AAAA,cAMGsR,gBAAgB,iBAAI1R,IAAC,gBAAD;AAAkB,MAAA,MAAM,EAAEI,MAA1B;AAAkC,MAAA,GAAG,EAAED;AAAvC;AANvB,IADF;AAUD;;AAED,mCAAegN,IAAI,CAACqE,WAAD,CAAnB;;ACvBA,SAASI,UAAT,CAA2B;AACzBtH,EAAAA,MADyB;AAEzBnK,EAAAA,GAFyB;AAGzB2F,EAAAA,eAHyB;AAIzB+L,EAAAA,MAJyB;AAKzB,mBAAiBnB;AALQ,CAA3B,EAM2B;AACzB,sBACE1Q;AACE,IAAA,IAAI,EAAC,KADP;AAEE,qBAAe0Q,YAFjB;AAGE,IAAA,SAAS,EAAG,mBAAkBpG,MAAM,GAAG,CAAT,KAAe,CAAf,GAAmB,MAAnB,GAA4B,KAAM,kBAHlE;AAIE,IAAA,KAAK,EAAE;AAAEuH,MAAAA;AAAF,KAJT;AAAA,cAMG/L,eAAe,CAAC7C,GAAhB,CAAoB7C,MAAM,iBACzBJ,IAACwR,aAAD;AAEE,MAAA,MAAM,EAAEpR,MAFV;AAGE,MAAA,GAAG,EAAED;AAHP,OACOC,MAAM,CAACC,GADd,CADD;AANH,IADF;AAgBD;;AAED,kCAAe8M,IAAI,CAACyE,UAAD,CAAnB;;;ACmBA,MAAME,IAAI,2BAAGC,UAAU,CAACnC,QAAd,qBAAG,qBAAqBkC,IAAlC;;AA0GA,SAASE,QAAT,CAAyB;AAEvBnP,EAAAA,OAAO,EAAEX,UAFc;AAGvB+E,EAAAA,IAAI,EAAER,OAHiB;AAIvBwL,EAAAA,WAJuB;AAKvBnF,EAAAA,YALuB;AAMvBoF,EAAAA,YANuB;AAQvBxL,EAAAA,SAAS,GAAG,EARW;AASvByL,EAAAA,eAAe,GAAGzL,SATK;AAUvB0L,EAAAA,mBAAmB,GAAG,EAVC;AAYvBC,EAAAA,YAZuB;AAavBtF,EAAAA,oBAbuB;AAcvB3D,EAAAA,UAduB;AAevBC,EAAAA,aAfuB;AAgBvBF,EAAAA,MAhBuB;AAiBvBkE,EAAAA,OAjBuB;AAkBvBC,EAAAA,eAlBuB;AAmBvBhL,EAAAA,oBAnBuB;AAoBvBS,EAAAA,OAAO,EAAER,UApBc;AAqBvBqE,EAAAA,UArBuB;AAsBvBC,EAAAA,gBAtBuB;AAuBvByL,EAAAA,wBAvBuB;AAyBvBC,EAAAA,WAAW,EAAEC,WAAW,GAAGvC,KAzBJ;AA0BvBwC,EAAAA,iBAAiB,EAAEC,iBA1BI;AA4BvB7E,EAAAA,UA5BuB;AA6BvB8E,EAAAA,QA7BuB;AA8BvB3F,EAAAA,cA9BuB;AA+BvB4F,EAAAA,oBA/BuB;AAgCvBC,EAAAA,MAhCuB;AAiCvBC,EAAAA,OAjCuB;AAmCvBC,EAAAA,eAAe,GAAG,KAnCK;AAoCvBrI,EAAAA,kBAAkB,GAAG,MApCE;AAsCvBwE,EAAAA,kBAAkB,GAAG4C,IAtCE;AAuCvBpF,EAAAA,SAvCuB;AAwCvBsG,EAAAA,KAxCuB;AAyCvBzC,EAAAA,QAzCuB;AA2CvB,gBAAcjR,SA3CS;AA4CvB,qBAAmBC,cA5CI;AA6CvB,sBAAoB0T;AA7CG,CAAzB,EA8CyBrW,GA9CzB,EA8CyD;AAAA;;AAIvD,QAAM,CAAC+J,SAAD,EAAYuM,YAAZ,IAA4B/U,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACkE,UAAD,EAAa8Q,aAAb,IAA8BhV,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACgE,YAAD,EAAeiR,eAAf,IAAkCjV,QAAQ,CAA8B,MAAM,IAAIiG,GAAJ,EAApC,CAAhD;AACA,QAAM,CAACiG,gBAAD,EAAmBgJ,mBAAnB,IAA0ClV,QAAQ,CAAqC;AAAEkF,IAAAA,GAAG,EAAE,CAAC,CAAR;AAAWiH,IAAAA,MAAM,EAAE,CAAC,CAApB;AAAuBuG,IAAAA,IAAI,EAAE;AAA7B,GAArC,CAAxD;AACA,QAAM,CAACyC,UAAD,EAAaC,aAAb,IAA8BpV,QAAQ,CAAuC,IAAvC,CAA5C;AACA,QAAM,CAACqV,UAAD,EAAaC,WAAb,IAA4BtV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACuV,iBAAD,EAAoBC,aAApB,IAAqCxV,QAAQ,CAAqBf,SAArB,CAAnD;AAKA,QAAMwW,YAAY,GAAG3W,MAAM,CAAiB,IAAjB,CAA3B;AACA,QAAM4W,oBAAoB,GAAG5W,MAAM,CAACoN,gBAAD,CAAnC;AACA,QAAMyJ,uBAAuB,GAAG7W,MAAM,CAACyW,iBAAD,CAAtC;AACA,QAAMK,kBAAkB,GAAG9W,MAAM,CAAC,CAAC,CAAF,CAAjC;AACA,QAAM+W,eAAe,GAAG/W,MAAM,CAAC,KAAD,CAA9B;AAKA,QAAMgX,gBAAgB,GAAGlL,aAAa,CAACmF,SAAD,CAAtC;AACA,QAAME,iBAAiB,GAAGrF,aAAa,CAACkF,UAAD,CAAvC;AACA,QAAMiD,kBAAkB,GAAGnI,aAAa,CAACtI,WAAD,CAAxC;AACA,QAAMyT,+BAA+B,GAAGnL,aAAa,CAACoL,SAAD,CAArD;AAKA,QAAM,CAACnW,OAAD,EAAUC,SAAV,EAAqBG,UAArB,IAAmCL,iBAAiB,EAA1D;AACA,QAAMqW,eAAe,GAAGrB,eAAe,GAAG,CAAH,GAAO,CAA9C;AACA,QAAMsB,gBAAgB,0BAAGpC,WAAH,oBAAGA,WAAW,CAAE1M,MAAhB,kCAA0B,CAAhD;AACA,QAAM+O,iBAAiB,GAAGnC,eAAe,IAAIY,eAAe,GAAGX,mBAAH,GAAyB,CAA5C,CAAzC;AACA,QAAM1T,YAAY,GAAGN,UAAU,GAAGkW,iBAAb,GAAiCD,gBAAgB,GAAG3N,SAAzE;AACA,QAAM6N,YAAY,GAAGlC,YAAY,KAAKjV,SAAjB,IAA8B2P,oBAAoB,KAAK3P,SAA5E;AAEA,QAAM;AAAEyF,IAAAA,OAAF;AAAWiD,IAAAA,eAAX;AAA4B9B,IAAAA,aAA5B;AAA2CG,IAAAA,aAA3C;AAA0DF,IAAAA,gBAA1D;AAA4EnB,IAAAA,qBAA5E;AAAmGoB,IAAAA,sBAAnG;AAA2HnB,IAAAA;AAA3H,MAAuId,kBAAkB,CAAC;AAC9JC,IAAAA,UAD8J;AAE9JC,IAAAA,YAF8J;AAG9JE,IAAAA,UAH8J;AAI9JD,IAAAA,aAAa,EAAEnE,SAJ+I;AAK9JqE,IAAAA,oBAL8J;AAM9JC,IAAAA,UAAU,EAAEqE,UAAU,GAAGrE,UAAH,GAAgBnF;AANwH,GAAD,CAA/J;AASA,QAAM;AAAEwL,IAAAA,mBAAF;AAAuBC,IAAAA,iBAAvB;AAA0C5B,IAAAA,IAA1C;AAAgDF,IAAAA,SAAhD;AAA2DyB,IAAAA;AAA3D,MAA0EhC,eAAe,CAAC;AAC9FC,IAAAA,OAD8F;AAE9F1D,IAAAA,OAF8F;AAG9F6D,IAAAA,UAH8F;AAI9FF,IAAAA,SAJ8F;AAK9FhI,IAAAA,YAL8F;AAM9FiI,IAAAA,SAN8F;AAO9FE,IAAAA;AAP8F,GAAD,CAA/F;AAUA,QAAM2N,SAAS,GAAGzR,OAAO,CAACwC,MAAR,GAAiB,CAAjB,IAAsBqB,UAAxC;AACA,QAAM6N,SAAS,GAAGD,SAAS,GAAG,CAAC,CAAJ,GAAQ,CAAnC;AAGA,QAAME,qBAAqB,GAAGF,SAAS,GAAG,KAAH,GAAW3B,MAAM,KAAKzV,SAA7D;AAKAkB,EAAAA,eAAe,CAAC,MAAM;AACpB,QAAI+L,gBAAgB,KAAKwJ,oBAAoB,CAAChX,OAA1C,IAAqDwN,gBAAgB,CAACwG,IAAjB,KAA0B,MAA/E,IAAyF,CAAC8D,kBAAkB,CAACtK,gBAAD,CAAhH,EAAoI;AACpIwJ,IAAAA,oBAAoB,CAAChX,OAArB,GAA+BwN,gBAA/B;AACAuK,IAAAA,YAAY,CAACvK,gBAAD,CAAZ;;AAEA,QAAI2J,eAAe,CAACnX,OAApB,EAA6B;AAC3BmX,MAAAA,eAAe,CAACnX,OAAhB,GAA0B,KAA1B;AACA;AACD;;AACD+W,IAAAA,YAAY,CAAC/W,OAAb,CAAsBkC,KAAtB,CAA4B;AAAEC,MAAAA,aAAa,EAAE;AAAjB,KAA5B;AACD,GAVc,CAAf;AAYA6V,EAAAA,mBAAmB,CAACjY,GAAD,EAAM,OAAO;AAC9BkY,IAAAA,cAAc,CAACzR,GAAD,EAAc;AAC1BuR,MAAAA,YAAY,CAAC;AAAEvR,QAAAA;AAAF,OAAD,CAAZ;AACD,KAH6B;;AAI9B0R,IAAAA,WAAW,CAACzK,MAAD,EAAiB;AAC1B,YAAM;AAAEzN,QAAAA;AAAF,UAAcmB,OAApB;AACA,UAAI,CAACnB,OAAL,EAAc;AACdA,MAAAA,OAAO,CAACmY,QAAR,CAAiB;AACfxF,QAAAA,GAAG,EAAElF,MAAM,GAAG5D,SADC;AAEfuO,QAAAA,QAAQ,EAAE;AAFK,OAAjB;AAID,KAX6B;;AAY9BhH,IAAAA;AAZ8B,GAAP,CAAN,CAAnB;AAkBA,QAAMiH,kBAAkB,GAAGxY,WAAW,CAAC,CAAC0D,MAAD,EAAkCiB,KAAlC,KAAoD;AACzF,UAAM8T,eAAe,GAAG,IAAI/Q,GAAJ,CAAQjC,YAAR,CAAxB;AACAgT,IAAAA,eAAe,CAACxQ,GAAhB,CAAoBvE,MAAM,CAACC,GAA3B,EAAgCgB,KAAhC;AACA+R,IAAAA,eAAe,CAAC+B,eAAD,CAAf;AAEAnI,IAAAA,cAAc,QAAd,YAAAA,cAAc,CAAG5M,MAAM,CAACiD,GAAV,EAAehC,KAAf,CAAd;AACD,GANqC,EAMnC,CAACc,YAAD,EAAe6K,cAAf,CANmC,CAAtC;AAQA,QAAMwD,oBAAoB,GAAG9T,WAAW,CAAE4N,MAAD,IAAqB;AAC5DqJ,IAAAA,aAAa,CAACrJ,MAAD,CAAb;AACAwJ,IAAAA,uBAAuB,CAACjX,OAAxB,GAAkCyN,MAAlC;AACD,GAHuC,EAGrC,EAHqC,CAAxC;;AAQA,WAAS4D,SAAT,CAAmB;AAAE5D,IAAAA,MAAF;AAAU1K,IAAAA,OAAV;AAAmBiP,IAAAA;AAAnB,GAAnB,EAAsE;AACpE,QAAI,CAAC9B,oBAAL,EAA2B;AAE3BzB,IAAAA,sBAAsB,CAACwB,YAAD,CAAtB;AACA,UAAMI,eAAe,GAAG,IAAIrF,GAAJ,CAAQwK,YAAR,CAAxB;AACA,UAAMlS,GAAG,GAAG8G,IAAI,CAACqD,MAAD,CAAhB;;AACA,QAAI9B,UAAU,CAACrI,GAAD,CAAd,EAAqB;AACnB,WAAK,MAAMiV,QAAX,IAAuBjV,GAAG,CAACoH,SAA3B,EAAsC;AACpC,cAAM8N,MAAM,GAAGvI,YAAY,CAACsI,QAAD,CAA3B;;AACA,YAAIxV,OAAJ,EAAa;AACXsN,UAAAA,eAAe,CAAC3E,GAAhB,CAAoB8M,MAApB;AACD,SAFD,MAEO;AACLnI,UAAAA,eAAe,CAACoI,MAAhB,CAAuBD,MAAvB;AACD;AACF;;AACDtI,MAAAA,oBAAoB,CAACG,eAAD,CAApB;AACA;AACD;;AAED,UAAMmI,MAAM,GAAGvI,YAAY,CAAC3M,GAAD,CAA3B;;AACA,QAAIP,OAAJ,EAAa;AACXsN,MAAAA,eAAe,CAAC3E,GAAhB,CAAoB8M,MAApB;AACA,YAAME,cAAc,GAAGxB,kBAAkB,CAAClX,OAA1C;AACAkX,MAAAA,kBAAkB,CAAClX,OAAnB,GAA6ByN,MAA7B;;AACA,UAAIuE,YAAY,IAAI0G,cAAc,KAAK,CAAC,CAApC,IAAyCA,cAAc,KAAKjL,MAAhE,EAAwE;AACtE,cAAMkL,IAAI,GAAG/P,IAAI,CAACgQ,IAAL,CAAUnL,MAAM,GAAGiL,cAAnB,CAAb;;AACA,aAAK,IAAItQ,CAAC,GAAGsQ,cAAc,GAAGC,IAA9B,EAAoCvQ,CAAC,KAAKqF,MAA1C,EAAkDrF,CAAC,IAAIuQ,IAAvD,EAA6D;AAC3D,gBAAMrV,GAAG,GAAG8G,IAAI,CAAChC,CAAD,CAAhB;AACA,cAAIuD,UAAU,CAACrI,GAAD,CAAd,EAAqB;AACrB+M,UAAAA,eAAe,CAAC3E,GAAhB,CAAoBuE,YAAY,CAAC3M,GAAD,CAAhC;AACD;AACF;AACF,KAZD,MAYO;AACL+M,MAAAA,eAAe,CAACoI,MAAhB,CAAuBD,MAAvB;AACAtB,MAAAA,kBAAkB,CAAClX,OAAnB,GAA6B,CAAC,CAA9B;AACD;;AAEDkQ,IAAAA,oBAAoB,CAACG,eAAD,CAApB;AACD;;AAED,WAASzM,WAAT,CAAqBiV,eAArB,EAA+C;AAC7C,QAAI,CAACpD,wBAAL,EAA+B;AAC/B,UAAMqD,mBAAmB,GAAG,IAAI9N,GAAJ,CAAQhB,gBAAR,CAA5B;;AACA,QAAI8O,mBAAmB,CAAC7Q,GAApB,CAAwB4Q,eAAxB,CAAJ,EAA8C;AAC5CC,MAAAA,mBAAmB,CAACL,MAApB,CAA2BI,eAA3B;AACD,KAFD,MAEO;AACLC,MAAAA,mBAAmB,CAACpN,GAApB,CAAwBmN,eAAxB;AACD;;AACDpD,IAAAA,wBAAwB,CAACqD,mBAAD,CAAxB;AACD;;AAED,WAAShV,aAAT,CAAuBG,KAAvB,EAAmE;AACjE,UAAM;AAAET,MAAAA,GAAF;AAAOuV,MAAAA;AAAP,QAAmB9U,KAAzB;AACA,UAAMX,GAAG,GAAG8G,IAAI,CAACoD,gBAAgB,CAACC,MAAlB,CAAhB;;AAEA,QACEwI,OAAO,IACJnJ,iBAAiB,CAAC7I,KAAD,CADpB,IAEG6T,kBAAkB,CAACtK,gBAAD,CAFrB,IAGG,CAAC7B,UAAU,CAACrI,GAAD,CAHd,IAIGkK,gBAAgB,CAAChH,GAAjB,KAAyB,CAAC,CAJ7B,IAKGgH,gBAAgB,CAACwG,IAAjB,KAA0B,QAN/B,EAOE;AAGA,YAAMgF,IAAI,GAAG,EAAb;AACA,YAAMC,IAAI,GAAG,EAAb;;AACA,UAAIF,OAAO,KAAKC,IAAhB,EAAsB;AACpBE,QAAAA,UAAU;AACV;AACD;;AACD,UAAIH,OAAO,KAAKE,IAAhB,EAAsB;AACpBE,QAAAA,WAAW;AACX;AACD;AACF;;AAED,QACErB,kBAAkB,CAACtK,gBAAD,CAAlB,IACG7B,UAAU,CAACrI,GAAD,CADb,IAEGkK,gBAAgB,CAAChH,GAAjB,KAAyB,CAAC,CAF7B,KAKGhD,GAAG,KAAK,WAAR,IAAuBF,GAAG,CAACK,UAA5B,IAEIH,GAAG,KAAK,YAAR,IAAwB,CAACF,GAAG,CAACK,UAPnC,CADF,EASK;AACHM,MAAAA,KAAK,CAAC0L,cAAN;AACA/L,MAAAA,WAAW,CAACN,GAAG,CAACiI,EAAL,CAAX;AACA;AACD;;AAED,YAAQtH,KAAK,CAACT,GAAd;AACE,WAAK,QAAL;AACEkT,QAAAA,aAAa,CAAC,IAAD,CAAb;AACA0C,QAAAA,WAAW;AACX;;AACF,WAAK,SAAL;AACA,WAAK,WAAL;AACA,WAAK,WAAL;AACA,WAAK,YAAL;AACA,WAAK,KAAL;AACA,WAAK,MAAL;AACA,WAAK,KAAL;AACA,WAAK,QAAL;AACA,WAAK,UAAL;AACEC,QAAAA,QAAQ,CAACpV,KAAD,CAAR;AACA;;AACF;AACEqV,QAAAA,eAAe,CAACrV,KAAD,CAAf;AACA;AAlBJ;AAoBD;;AAED,WAASsV,WAAT,GAAuB;AACrBpC,IAAAA,eAAe,CAACnX,OAAhB,GAA0B,IAA1B;AACD;;AAED,WAASwZ,YAAT,CAAsBvV,KAAtB,EAA4D;AAC1D,UAAM;AAAE6F,MAAAA,SAAF;AAAatE,MAAAA;AAAb,QAA4BvB,KAAK,CAACkL,aAAxC;AACAkH,IAAAA,YAAY,CAACvM,SAAD,CAAZ;AACAwM,IAAAA,aAAa,CAAC9Q,UAAD,CAAb;AACAsQ,IAAAA,QAAQ,QAAR,YAAAA,QAAQ,CAAG7R,KAAH,CAAR;AACD;;AAED,WAASwV,YAAT,CAAsBhM,MAAtB,EAAsC;AACpC,WAAOkK,SAAS,GAAG/N,OAAO,CAAC5C,OAAR,CAAgBoD,IAAI,CAACqD,MAAD,CAApB,CAAH,GAAwCA,MAAxD;AACD;;AAED,WAAS6J,SAAT,CAAmB7J,MAAnB,EAAmCnK,GAAnC,EAA2C;AACzC,QAAI,OAAO+R,YAAP,KAAwB,UAA5B,EAAwC;AACxC,UAAMqE,WAAW,GAAG,CAAC,GAAG9P,OAAJ,CAApB;AACA8P,IAAAA,WAAW,CAACjM,MAAD,CAAX,GAAsBnK,GAAtB;AACA+R,IAAAA,YAAY,CAACqE,WAAD,EAAc;AACxBC,MAAAA,OAAO,EAAE,CAAClM,MAAD,CADe;AAExBlK,MAAAA,MAAM,EAAEyC,OAAO,CAACwH,gBAAgB,CAAChH,GAAlB;AAFS,KAAd,CAAZ;AAID;;AAED,WAASoT,mBAAT,GAA+B;AAAA;;AAC7B,QACE,0BAAA5T,OAAO,CAACwH,gBAAgB,CAAChH,GAAlB,CAAP,2CAA+BkH,MAA/B,MAA0CnN,SAA1C,IACGiN,gBAAgB,CAACwG,IAAjB,KAA0B,QAD7B,IAEGxG,gBAAgB,CAAClK,GAAjB,KAAyBkK,gBAAgB,CAACqM,WAH/C,EAG4D;AAC1D;AACD;;AAED,UAAMpM,MAAM,GAAGgM,YAAY,CAACjM,gBAAgB,CAACC,MAAlB,CAA3B;AACA6J,IAAAA,SAAS,CAAC7J,MAAD,EAASD,gBAAgB,CAAClK,GAA1B,CAAT;AACD;;AAED,WAAS4V,UAAT,GAAsB;AACpB,UAAM;AAAE1S,MAAAA,GAAF;AAAOiH,MAAAA;AAAP,QAAkBD,gBAAxB;AACAkJ,IAAAA,aAAa,CAAC;AAAEpT,MAAAA,GAAG,EAAEsG,OAAO,CAAC6P,YAAY,CAAChM,MAAD,CAAb,CAAd;AAAsCqM,MAAAA,SAAS,EAAE9T,OAAO,CAACQ,GAAD,CAAP,CAAahD;AAA9D,KAAD,CAAb;AACD;;AAED,WAAS2V,WAAT,GAAuB;AACrB,UAAM;AAAE3S,MAAAA,GAAF;AAAOiH,MAAAA;AAAP,QAAkBD,gBAAxB;AACA,UAAMuM,SAAS,GAAGnQ,OAAO,CAAC6P,YAAY,CAAChM,MAAD,CAAb,CAAzB;;AACA,QACE,CAACwI,OAAD,IACG,CAACZ,YADJ,IAEGoB,UAAU,KAAK,IAFlB,IAGG,CAACuD,cAAc,CAACxM,gBAAD,CAJpB,EAKE;AACA;AACD;;AAED,UAAMyM,gBAAgB,GAAGhE,OAAO,CAAC;AAC/BiE,MAAAA,SAAS,EAAEzD,UAAU,CAACnT,GADS;AAE/B6W,MAAAA,eAAe,EAAE1D,UAAU,CAACqD,SAFG;AAG/BC,MAAAA,SAH+B;AAI/BK,MAAAA,eAAe,EAAEpU,OAAO,CAACQ,GAAD,CAAP,CAAahD;AAJC,KAAD,CAAhC;AAOA8T,IAAAA,SAAS,CAAC7J,MAAD,EAASwM,gBAAT,CAAT;AACD;;AAED,WAASX,eAAT,CAAyBrV,KAAzB,EAAqE;AAAA;;AACnE,QAAI,CAAC6T,kBAAkB,CAACtK,gBAAD,CAAvB,EAA2C;AAC3C,UAAMlK,GAAG,GAAG8G,IAAI,CAACoD,gBAAgB,CAACC,MAAlB,CAAhB;AACA,QAAI9B,UAAU,CAACrI,GAAD,CAAd,EAAqB;AACrB,UAAM;AAAEE,MAAAA;AAAF,QAAUS,KAAhB;AACA,UAAMV,MAAM,GAAGyC,OAAO,CAACwH,gBAAgB,CAAChH,GAAlB,CAAtB;;AAEA,QAAIgH,gBAAgB,CAACwG,IAAjB,KAA0B,MAA9B,EAAsC;AACpC,UAAIxQ,GAAG,KAAK,OAAZ,EAAqB;AAEnBoW,QAAAA,mBAAmB;AACnBR,QAAAA,WAAW;AACZ;;AACD;AACD;;AAED,6BAAA7V,MAAM,CAACmO,aAAP,2CAAsB2I,aAAtB,0CAAsBA,aAAtB,CAAsCpW,KAAtC;AACA,QAAIA,KAAK,CAACqW,kBAAN,EAAJ,EAAgC;;AAEhC,QAAIN,cAAc,CAACxM,gBAAD,CAAd,IAAoCP,kBAAkB,CAAChJ,KAAD,CAA1D,EAAmE;AACjEuS,MAAAA,mBAAmB,CAAC,CAAC;AAAEhQ,QAAAA,GAAF;AAAOiH,QAAAA;AAAP,OAAD,MAAsB;AACxCjH,QAAAA,GADwC;AAExCiH,QAAAA,MAFwC;AAGxCjK,QAAAA,GAHwC;AAIxCwQ,QAAAA,IAAI,EAAE,MAJkC;AAKxC1Q,QAAAA,GALwC;AAMxCuW,QAAAA,WAAW,EAAEvW;AAN2B,OAAtB,CAAD,CAAnB;AAQD;AACF;;AAED,WAASiX,aAAT,GAAyB;AACvB,UAAMC,UAAU,GAAGvD,uBAAuB,CAACjX,OAA3C;AACA,QAAIwa,UAAU,KAAKja,SAAf,IAA4B,CAACyV,MAA7B,IAAuC,CAACX,YAA5C,EAA0D;AAE1D,UAAM;AAAE7O,MAAAA,GAAF;AAAOiH,MAAAA;AAAP,QAAkBD,gBAAxB;AACA,UAAM0M,SAAS,GAAGtQ,OAAO,CAAC6D,MAAD,CAAzB;AACA,UAAMlD,aAAa,GAAGkD,MAAM,GAAG+M,UAAT,GAAsB/M,MAAM,GAAG,CAA/B,GAAmC+M,UAAzD;AACA,UAAMC,WAAW,GAAGhN,MAAM,GAAG+M,UAAT,GAAsBA,UAAU,GAAG,CAAnC,GAAuC/M,MAA3D;AACA,UAAMiN,UAAU,GAAG9Q,OAAO,CAAC+Q,KAAR,CAAcpQ,aAAd,EAA6BkQ,WAA7B,CAAnB;AACA,UAAMlX,MAAM,GAAGyC,OAAO,CAACQ,GAAD,CAAtB;AACA,UAAMoU,iBAAiB,GAAG5E,MAAM,CAAC;AAAE8D,MAAAA,SAAS,EAAEvW,MAAM,CAACC,GAApB;AAAyB0W,MAAAA,SAAzB;AAAoCQ,MAAAA;AAApC,KAAD,CAAhC;AACA,UAAMhB,WAAW,GAAG,CAAC,GAAG9P,OAAJ,CAApB;AACA,UAAM+P,OAAiB,GAAG,EAA1B;;AAEA,SAAK,IAAIvR,CAAC,GAAGmC,aAAb,EAA4BnC,CAAC,GAAGqS,WAAhC,EAA6CrS,CAAC,EAA9C,EAAkD;AAChDsR,MAAAA,WAAW,CAACtR,CAAD,CAAX,GAAiBwS,iBAAiB,CAACxS,CAAC,GAAGmC,aAAL,CAAlC;AACAoP,MAAAA,OAAO,CAACzS,IAAR,CAAakB,CAAb;AACD;;AAEDiN,IAAAA,YAAY,CAACqE,WAAD,EAAc;AAAEC,MAAAA,OAAF;AAAWpW,MAAAA;AAAX,KAAd,CAAZ;AACAoQ,IAAAA,oBAAoB,CAACpT,SAAD,CAApB;AACD;;AAED,WAASsa,eAAT,CAAyB5W,KAAzB,EAA8E;AAC5E,QAAIA,KAAK,CAACiL,OAAN,KAAkB,CAAtB,EAAyB;AACzB0H,IAAAA,WAAW,CAAC,IAAD,CAAX;AACA9V,IAAAA,MAAM,CAACC,gBAAP,CAAwB,WAAxB,EAAqC+Z,WAArC;AACAha,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCga,SAAnC;;AAEA,aAASD,WAAT,CAAqB7W,KAArB,EAAwC;AAItC,UAAIA,KAAK,CAACiL,OAAN,KAAkB,CAAtB,EAAyB6L,SAAS;AACnC;;AAED,aAASA,SAAT,GAAqB;AACnBja,MAAAA,MAAM,CAACG,mBAAP,CAA2B,WAA3B,EAAwC6Z,WAAxC;AACAha,MAAAA,MAAM,CAACG,mBAAP,CAA2B,SAA3B,EAAsC8Z,SAAtC;AACAnE,MAAAA,WAAW,CAAC,KAAD,CAAX;AACA2D,MAAAA,aAAa;AACd;AACF;;AAED,WAAS1I,iBAAT,CAA2B5N,KAA3B,EAAoE;AAClEA,IAAAA,KAAK,CAACD,eAAN;AACA,QAAI,CAACgS,MAAD,IAAW,CAACX,YAAhB,EAA8B;AAE9B,UAAM;AAAE7O,MAAAA,GAAF;AAAOiH,MAAAA;AAAP,QAAkBD,gBAAxB;AACA,UAAM0M,SAAS,GAAGtQ,OAAO,CAAC6D,MAAD,CAAzB;AACA,UAAMiN,UAAU,GAAG9Q,OAAO,CAAC+Q,KAAR,CAAclN,MAAM,GAAG,CAAvB,CAAnB;AACA,UAAMlK,MAAM,GAAGyC,OAAO,CAACQ,GAAD,CAAtB;AACA,UAAMoU,iBAAiB,GAAG5E,MAAM,CAAC;AAAE8D,MAAAA,SAAS,EAAEvW,MAAM,CAACC,GAApB;AAAyB0W,MAAAA,SAAzB;AAAoCQ,MAAAA;AAApC,KAAD,CAAhC;AACA,UAAMhB,WAAW,GAAG,CAAC,GAAG9P,OAAJ,CAApB;AACA,UAAM+P,OAAiB,GAAG,EAA1B;;AAEA,SAAK,IAAIvR,CAAC,GAAGqF,MAAM,GAAG,CAAtB,EAAyBrF,CAAC,GAAGsR,WAAW,CAAChR,MAAzC,EAAiDN,CAAC,EAAlD,EAAsD;AACpDsR,MAAAA,WAAW,CAACtR,CAAD,CAAX,GAAiBwS,iBAAiB,CAACxS,CAAC,GAAGqF,MAAJ,GAAa,CAAd,CAAlC;AACAkM,MAAAA,OAAO,CAACzS,IAAR,CAAakB,CAAb;AACD;;AAEDiN,IAAAA,YAAY,CAACqE,WAAD,EAAc;AAAEC,MAAAA,OAAF;AAAWpW,MAAAA;AAAX,KAAd,CAAZ;AACD;;AAED,WAASyX,qBAAT,CAA+B1X,GAA/B,EAAiD2X,aAAjD,EAA0E;AACxE,QAAIzN,gBAAgB,CAACwG,IAAjB,KAA0B,QAA9B,EAAwC;;AACxC,QAAIiH,aAAJ,EAAmB;AACjB3D,MAAAA,SAAS,CAACmC,YAAY,CAACjM,gBAAgB,CAACC,MAAlB,CAAb,EAAwCnK,GAAxC,CAAT;AACA8V,MAAAA,WAAW;AACZ,KAHD,MAGO;AACL5C,MAAAA,mBAAmB,CAAC0E,QAAQ,KAAK,EAAE,GAAGA,QAAL;AAAe5X,QAAAA;AAAf,OAAL,CAAT,CAAnB;AACD;AACF;;AAED,WAAS6X,aAAT,CAAuBF,aAAvB,EAAgD;AAC9C,QAAIA,aAAJ,EAAmB;AACjBrB,MAAAA,mBAAmB;AACpB;;AACDR,IAAAA,WAAW;AACZ;;AAKD,WAAStB,kBAAT,CAA4B;AAAEtR,IAAAA,GAAF;AAAOiH,IAAAA;AAAP,GAA5B,EAAgE;AAC9D,WAAOA,MAAM,IAAI,CAAV,IAAeA,MAAM,GAAGrD,IAAI,CAAC1B,MAA7B,IAAuClC,GAAG,IAAIoR,SAA9C,IAA2DpR,GAAG,GAAGR,OAAO,CAAC0C,MAAhF;AACD;;AAED,WAASsR,cAAT,CAAwBkB,QAAxB,EAAqD;AACnD,WAAOpD,kBAAkB,CAACoD,QAAD,CAAlB,IACF3N,sBAAsB,CAAQ;AAAEvH,MAAAA,OAAF;AAAWoE,MAAAA,IAAX;AAAiBoD,MAAAA,gBAAgB,EAAE0N,QAAnC;AAA6CvP,MAAAA;AAA7C,KAAR,CAD3B;AAED;;AAED,WAASyF,UAAT,CAAoB8J,QAApB,EAAwCE,YAAY,GAAG,KAAvD,EAAoE;AAClE,QAAI,CAACtD,kBAAkB,CAACoD,QAAD,CAAvB,EAAmC;AACnCtB,IAAAA,mBAAmB;;AAEnB,QAAIwB,YAAY,IAAIpB,cAAc,CAACkB,QAAD,CAAlC,EAA8C;AAC5C,YAAM5X,GAAG,GAAG8G,IAAI,CAAC8Q,QAAQ,CAACzN,MAAV,CAAhB;AACA+I,MAAAA,mBAAmB,CAAC,EAAE,GAAG0E,QAAL;AAAelH,QAAAA,IAAI,EAAE,MAArB;AAA6BxQ,QAAAA,GAAG,EAAE,IAAlC;AAAwCF,QAAAA,GAAxC;AAA6CuW,QAAAA,WAAW,EAAEvW;AAA1D,OAAD,CAAnB;AACD,KAHD,MAGO;AACLkT,MAAAA,mBAAmB,CAAC,EAAE,GAAG0E,QAAL;AAAelH,QAAAA,IAAI,EAAE;AAArB,OAAD,CAAnB;AACD;;AACD+B,IAAAA,oBAAoB,QAApB,YAAAA,oBAAoB,CAAG,EAAE,GAAGmF;AAAL,KAAH,CAApB;AACD;;AAED,WAAS9B,WAAT,GAAuB;AACrB,QAAI5L,gBAAgB,CAACwG,IAAjB,KAA0B,QAA9B,EAAwC;AACxCwC,IAAAA,mBAAmB,CAAC,CAAC;AAAEhQ,MAAAA,GAAF;AAAOiH,MAAAA;AAAP,KAAD,MAAsB;AAAEjH,MAAAA,GAAF;AAAOiH,MAAAA,MAAP;AAAeuG,MAAAA,IAAI,EAAE;AAArB,KAAtB,CAAD,CAAnB;AACD;;AAED,WAAS+D,YAAT,CAAsB;AAAEvR,IAAAA,GAAF;AAAOiH,IAAAA;AAAP,GAAtB,EAAgE;AAC9D,UAAM;AAAEzN,MAAAA;AAAF,QAAcmB,OAApB;AACA,QAAI,CAACnB,OAAL,EAAc;;AAEd,QAAI,OAAOwG,GAAP,KAAe,QAAf,IAA2BA,GAAG,GAAGP,qBAArC,EAA4D;AAC1D,YAAM;AAAErE,QAAAA;AAAF,UAAkB5B,OAAxB;AACA,YAAM;AAAEwH,QAAAA,IAAF;AAAQhD,QAAAA;AAAR,UAAkB8C,aAAa,CAACa,GAAd,CAAkBnC,OAAO,CAACQ,GAAD,CAAzB,CAAxB;AACA,YAAM6U,oBAAoB,GAAG7T,IAAI,GAAGhC,UAAU,GAAG6B,sBAAjD;AACA,YAAMiU,qBAAqB,GAAG9T,IAAI,GAAGhD,KAAP,GAAe5C,WAAW,GAAG4D,UAA3D;;AACA,UAAI6V,oBAAJ,EAA0B;AACxBrb,QAAAA,OAAO,CAACwF,UAAR,GAAqBgC,IAAI,GAAGH,sBAA5B;AACD,OAFD,MAEO,IAAIiU,qBAAJ,EAA2B;AAChCtb,QAAAA,OAAO,CAACwF,UAAR,GAAqBgC,IAAI,GAAGhD,KAAP,GAAe5C,WAApC;AACD;AACF;;AAED,QAAI,OAAO6L,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,UAAIA,MAAM,GAAG5D,SAAT,GAAqBC,SAAzB,EAAoC;AAElC9J,QAAAA,OAAO,CAAC8J,SAAR,GAAoB2D,MAAM,GAAG5D,SAA7B;AACD,OAHD,MAGO,IAAI,CAAC4D,MAAM,GAAG,CAAV,IAAe5D,SAAf,GAA2BC,SAAS,GAAGjI,YAA3C,EAAyD;AAE9D7B,QAAAA,OAAO,CAAC8J,SAAR,GAAoB,CAAC2D,MAAM,GAAG,CAAV,IAAe5D,SAAf,GAA2BhI,YAA/C;AACD;AACF;AACF;;AAED,WAAS0Z,eAAT,CAAyB/X,GAAzB,EAAsCuJ,OAAtC,EAAwD9J,QAAxD,EAAqF;AACnF,UAAM;AAAEuD,MAAAA,GAAF;AAAOiH,MAAAA;AAAP,QAAkBD,gBAAxB;AACA,UAAMlK,GAAG,GAAG8G,IAAI,CAACqD,MAAD,CAAhB;AACA,UAAMxI,aAAa,GAAG6S,kBAAkB,CAACtK,gBAAD,CAAlB,IAAwChH,GAAG,KAAK,CAAC,CAAvE;;AAGA,QACEhD,GAAG,KAAK,WAAR,IACGyB,aADH,IAEG0G,UAAU,CAACrI,GAAD,CAFb,IAGG,CAACA,GAAG,CAACK,UAHR,IAIGL,GAAG,CAAC8H,KAAJ,KAAc,CALnB,EAME;AACA,UAAIoQ,YAAY,GAAG,CAAC,CAApB;;AACA,WAAK,IAAIpT,CAAC,GAAGoF,gBAAgB,CAACC,MAAjB,GAA0B,CAAvC,EAA0CrF,CAAC,IAAI,CAA/C,EAAkDA,CAAC,EAAnD,EAAuD;AACrD,cAAMqT,SAAS,GAAGrR,IAAI,CAAChC,CAAD,CAAtB;;AACA,YAAIuD,UAAU,CAAC8P,SAAD,CAAV,IAAyBA,SAAS,CAAClQ,EAAV,KAAiBjI,GAAG,CAAC6H,QAAlD,EAA4D;AAC1DqQ,UAAAA,YAAY,GAAGpT,CAAf;AACA;AACD;AACF;;AACD,UAAIoT,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACvB,eAAO;AAAEhV,UAAAA,GAAF;AAAOiH,UAAAA,MAAM,EAAE+N;AAAf,SAAP;AACD;AACF;;AAED,YAAQhY,GAAR;AACE,WAAK,SAAL;AACE,eAAO;AAAEgD,UAAAA,GAAF;AAAOiH,UAAAA,MAAM,EAAEA,MAAM,GAAG;AAAxB,SAAP;;AACF,WAAK,WAAL;AACE,eAAO;AAAEjH,UAAAA,GAAF;AAAOiH,UAAAA,MAAM,EAAEA,MAAM,GAAG;AAAxB,SAAP;;AACF,WAAK,WAAL;AACE,eAAO;AAAEjH,UAAAA,GAAG,EAAEA,GAAG,GAAG,CAAb;AAAgBiH,UAAAA;AAAhB,SAAP;;AACF,WAAK,YAAL;AACE,eAAO;AAAEjH,UAAAA,GAAG,EAAEA,GAAG,GAAG,CAAb;AAAgBiH,UAAAA;AAAhB,SAAP;;AACF,WAAK,KAAL;AACE,YAAID,gBAAgB,CAAChH,GAAjB,KAAyB,CAAC,CAA1B,IAA+BgH,gBAAgB,CAACC,MAAjB,KAA4B,CAAC,CAAhE,EAAmE;AACjE,iBAAOxK,QAAQ,GAAG;AAAEuD,YAAAA,GAAG,EAAER,OAAO,CAAC0C,MAAR,GAAiB,CAAxB;AAA2B+E,YAAAA,MAAM,EAAErD,IAAI,CAAC1B,MAAL,GAAc;AAAjD,WAAH,GAA0D;AAAElC,YAAAA,GAAG,EAAE,CAAP;AAAUiH,YAAAA,MAAM,EAAE;AAAlB,WAAzE;AACD;;AACD,eAAO;AAAEjH,UAAAA,GAAG,EAAEA,GAAG,IAAIvD,QAAQ,GAAG,CAAC,CAAJ,GAAQ,CAApB,CAAV;AAAkCwK,UAAAA;AAAlC,SAAP;;AACF,WAAK,MAAL;AAEE,YAAIxI,aAAJ,EAAmB,OAAO;AAAEuB,UAAAA,GAAF;AAAOiH,UAAAA,MAAM,EAAE;AAAf,SAAP;AACnB,eAAOV,OAAO,GAAG;AAAEvG,UAAAA,GAAG,EAAE,CAAP;AAAUiH,UAAAA,MAAM,EAAE;AAAlB,SAAH,GAA2B;AAAEjH,UAAAA,GAAG,EAAE,CAAP;AAAUiH,UAAAA;AAAV,SAAzC;;AACF,WAAK,KAAL;AAEE,YAAIxI,aAAJ,EAAmB,OAAO;AAAEuB,UAAAA,GAAF;AAAOiH,UAAAA,MAAM,EAAErD,IAAI,CAAC1B,MAAL,GAAc;AAA7B,SAAP;AACnB,eAAOqE,OAAO,GAAG;AAAEvG,UAAAA,GAAG,EAAER,OAAO,CAAC0C,MAAR,GAAiB,CAAxB;AAA2B+E,UAAAA,MAAM,EAAErD,IAAI,CAAC1B,MAAL,GAAc;AAAjD,SAAH,GAA0D;AAAElC,UAAAA,GAAG,EAAER,OAAO,CAAC0C,MAAR,GAAiB,CAAxB;AAA2B+E,UAAAA;AAA3B,SAAxE;;AACF,WAAK,QAAL;AACE,eAAO;AAAEjH,UAAAA,GAAF;AAAOiH,UAAAA,MAAM,EAAEA,MAAM,GAAG7E,IAAI,CAACQ,KAAL,CAAWvH,YAAY,GAAGgI,SAA1B;AAAxB,SAAP;;AACF,WAAK,UAAL;AACE,eAAO;AAAErD,UAAAA,GAAF;AAAOiH,UAAAA,MAAM,EAAEA,MAAM,GAAG7E,IAAI,CAACQ,KAAL,CAAWvH,YAAY,GAAGgI,SAA1B;AAAxB,SAAP;;AACF;AACE,eAAO2D,gBAAP;AA3BJ;AA6BD;;AAED,WAAS6L,QAAT,CAAkBpV,KAAlB,EAA8D;AAC5D,QAAIuJ,gBAAgB,CAACwG,IAAjB,KAA0B,MAA9B,EAAsC;AAAA;;AACpC,YAAM0H,YAAY,uDAAG1V,OAAO,CAACwH,gBAAgB,CAAChH,GAAlB,CAAP,CAA8BkL,aAAjC,qBAAG,uBAA6CgK,YAAhD,qCAAgExO,kBAAlF;AACA,UAAI,CAACwO,YAAY,CAACzX,KAAD,CAAjB,EAA0B;AAC3B;;AACD,UAAM;AAAET,MAAAA,GAAF;AAAOP,MAAAA;AAAP,QAAoBgB,KAA1B;AACA,UAAM8I,OAAO,GAAGD,iBAAiB,CAAC7I,KAAD,CAAjC;AACA,QAAI6J,YAAY,GAAGyN,eAAe,CAAC/X,GAAD,EAAMuJ,OAAN,EAAe9J,QAAf,CAAlC;AACA,QAAI+Q,IAAI,GAAGnG,kBAAX;;AACA,QAAIrK,GAAG,KAAK,KAAZ,EAAmB;AAEjB,UAAI4K,WAAW,CAAC;AAAEnL,QAAAA,QAAF;AAAY4K,QAAAA,kBAAZ;AAAgC7H,QAAAA,OAAhC;AAAyCkE,QAAAA,SAAS,EAAEE,IAAI,CAAC1B,MAAzD;AAAiE8E,QAAAA;AAAjE,OAAD,CAAf,EAAsG;AACpGoM,QAAAA,mBAAmB;AAEnB;AACD;;AAED5F,MAAAA,IAAI,GAAGnG,kBAAkB,KAAK,MAAvB,GACH,YADG,GAEHA,kBAFJ;AAGD;;AAGD5J,IAAAA,KAAK,CAAC0L,cAAN;AAEA7B,IAAAA,YAAY,GAAGF,2BAA2B,CAAQ;AAChD5H,MAAAA,OADgD;AAEhDkE,MAAAA,SAAS,EAAEE,IAAI,CAAC1B,MAFgC;AAGhDmF,MAAAA,kBAAkB,EAAEmG,IAH4B;AAIhDlG,MAAAA;AAJgD,KAAR,CAA1C;AAOAsD,IAAAA,UAAU,CAACtD,YAAD,CAAV;AACD;;AAED,WAAS6N,qBAAT,CAA+BC,aAA/B,EAA0E;AACxE,QAAI/E,iBAAiB,KAAKtW,SAA1B,EAAqC;AACrC,UAAM;AAAEkN,MAAAA;AAAF,QAAaD,gBAAnB;AAEA,UAAMsD,aAAa,GAAGrD,MAAM,GAAGoJ,iBAAT,GAClBpJ,MAAM,GAAGmO,aAAT,IAA0BA,aAAa,IAAI/E,iBADzB,GAElBpJ,MAAM,GAAGmO,aAAT,IAA0BA,aAAa,IAAI/E,iBAF/C;AAIA,WAAO/F,aAAa,GAAGtD,gBAAgB,CAAChH,GAApB,GAA0BjG,SAA9C;AACD;;AAED,WAASsb,oBAAT,CAA8BpO,MAA9B,EAAgG;AAC9F,QAAID,gBAAgB,CAACC,MAAjB,KAA4BA,MAAhC,EAAwC;;AAExC,QAAID,gBAAgB,CAACwG,IAAjB,KAA0B,MAA9B,EAAsC;AACpC,aAAO;AACLA,QAAAA,IAAI,EAAE,MADD;AAELxN,QAAAA,GAAG,EAAEgH,gBAAgB,CAAChH,GAFjB;AAGLyN,QAAAA,SAAS,EAAEnQ,aAHN;AAILyO,QAAAA,WAAW,EAAE;AACXF,UAAAA,kBADW;AAEXxI,UAAAA,SAFW;AAGXvG,UAAAA,GAAG,EAAEkK,gBAAgB,CAAClK,GAHX;AAIX6N,UAAAA,WAAW,EAAE6J,qBAJF;AAKXc,UAAAA,OAAO,EAAEX;AALE;AAJR,OAAP;AAYD;;AAED,WAAO;AACLnH,MAAAA,IAAI,EAAE,QADD;AAELxN,MAAAA,GAAG,EAAEgH,gBAAgB,CAAChH,GAFjB;AAGL0N,MAAAA,OAAO,EAAEqF,WAHJ;AAILtF,MAAAA,SAAS,EAAEnQ,aAJN;AAKLiN,MAAAA,eAAe,EAAE8G,qBAAqB,IAAImC,cAAc,CAACxM,gBAAD,CAAvC,GACb;AAAEuO,QAAAA,WAAW,EAAElB,eAAf;AAAgC5J,QAAAA,aAAa,EAAEY;AAA/C,OADa,GAEbtR;AAPC,KAAP;AASD;;AAED,WAASyb,eAAT,GAA2B;AACzB,UAAMC,WAAW,GAAG,EAApB;AACA,QAAI1R,aAAa,GAAG,CAApB;;AACA,SAAK,IAAIkD,MAAM,GAAG1B,mBAAlB,EAAuC0B,MAAM,IAAIzB,iBAAjD,EAAoEyB,MAAM,EAA1E,EAA8E;AAC5E,YAAMnK,GAAG,GAAG8G,IAAI,CAACqD,MAAD,CAAhB;AACA,YAAMkF,GAAG,GAAGlF,MAAM,GAAG5D,SAAT,GAAqB4N,iBAAjC;;AACA,UAAI9L,UAAU,CAACrI,GAAD,CAAd,EAAqB;AACnB,SAAC;AAAEiH,UAAAA;AAAF,YAAoBjH,GAArB;AACA2Y,QAAAA,WAAW,CAAC/U,IAAZ,eACE/D,IAAC,gBAAD;AACE,wBAAYG,GAAG,CAAC8H,KAAJ,GAAY,CAD1B;AAEE,0BAAc9H,GAAG,CAACmI,OAFpB;AAGE,2BAAenI,GAAG,CAACgI,QAAJ,GAAe,CAHhC;AAIE,2BAAeiM,eAAe,GAAGhN,aAAlB,GAAkC,CAJnD;AAME,UAAA,EAAE,EAAEjH,GAAG,CAACiI,EANV;AAOE,UAAA,QAAQ,EAAEjI,GAAG,CAACI,QAPhB;AAQE,UAAA,eAAe,EAAEuF,eARnB;AASE,UAAA,SAAS,EAAE3F,GAAG,CAACoH,SATjB;AAUE,UAAA,MAAM,EAAE+C,MAVV;AAWE,UAAA,GAAG,EAAEkF,GAXP;AAYE,UAAA,KAAK,EAAErP,GAAG,CAAC8H,KAZb;AAaE,UAAA,UAAU,EAAE9H,GAAG,CAACK,UAblB;AAcE,UAAA,eAAe,EAAE6J,gBAAgB,CAACC,MAAjB,KAA4BA,MAA5B,GAAqCD,gBAAgB,CAAChH,GAAtD,GAA4DjG,SAd/E;AAeE,UAAA,aAAa,EAAEmX,YAAY,IAAIpU,GAAG,CAACoH,SAAJ,CAAcwR,KAAd,CAAoBC,EAAE,IAAI3G,YAAJ,oBAAIA,YAAY,CAAEvN,GAAd,CAAkBgI,YAAY,CAAEkM,EAAF,CAA9B,CAA1B,CAfjC;AAgBE,UAAA,OAAO,EAAE3O,gBAAgB,CAACC,MAAjB,KAA4BA,MAA5B,GAAqC8L,WAArC,GAAmDhZ,SAhB9D;AAiBE,UAAA,SAAS,EAAEiN,gBAAgB,CAACC,MAAjB,KAA4BA,MAA5B,GAAqC3J,aAArC,GAAqDvD,SAjBlE;AAkBE,UAAA,UAAU,EAAEgR,iBAlBd;AAmBE,UAAA,SAAS,EAAE6F,gBAnBb;AAoBE,UAAA,WAAW,EAAE/C;AApBf,WAKO/Q,GAAG,CAACiI,EALX,CADF;AAwBA;AACD;;AAEDhB,MAAAA,aAAa;AACb,UAAI/G,GAAc,GAAGmU,SAAS,GAAGpN,aAAH,GAAmBkD,MAAjD;AACA,UAAIxI,aAAa,GAAG,KAApB;;AACA,UAAI,OAAOgL,YAAP,KAAwB,UAA5B,EAAwC;AAAA;;AACtCzM,QAAAA,GAAG,GAAGyM,YAAY,CAAC3M,GAAD,CAAlB;AACA2B,QAAAA,aAAa,wBAAGuQ,YAAH,oBAAGA,YAAY,CAAEvN,GAAd,CAAkBzE,GAAlB,CAAH,gCAA6B,KAA1C;AACD;;AAEDyY,MAAAA,WAAW,CAAC/U,IAAZ,eACE/D,IAAC,WAAD;AACE,yBAAeoU,eAAe,IAAII,SAAS,GAAGpN,aAAH,GAAmBkD,MAAhC,CAAf,GAAyD,CAD1E;AAEE,yBAAeiK,YAAY,GAAGzS,aAAH,GAAmB1E,SAFhD;AAIE,QAAA,MAAM,EAAEkN,MAJV;AAKE,QAAA,GAAG,EAAEnK,GALP;AAME,QAAA,eAAe,EAAE2F,eANnB;AAOE,QAAA,aAAa,EAAEhE,aAPjB;AAQE,QAAA,UAAU,EAAE+L,UARd;AASE,QAAA,QAAQ,EAAE0C,QATZ;AAUE,QAAA,GAAG,EAAEf,GAVP;AAWE,QAAA,aAAa,EAAE8D,UAAU,KAAK,IAAf,IAAuBA,UAAU,CAACnT,GAAX,KAAmBA,GAA1C,GAAgD0C,OAAO,CAACoW,SAAR,CAAkBC,CAAC,IAAIA,CAAC,CAAC7Y,GAAF,KAAUiT,UAAU,CAACqD,SAA5C,CAAhD,GAAyGvZ,SAX1H;AAYE,QAAA,kBAAkB,EAAEob,qBAAqB,CAAClO,MAAD,CAZ3C;AAaE,QAAA,oBAAoB,EAAEkJ,UAAU,GAAGhD,oBAAH,GAA0BpT,SAb5D;AAcE,QAAA,iBAAiB,EAAEsb,oBAAoB,CAACpO,MAAD,CAdzC;AAeE,QAAA,WAAW,EAAE4J,+BAff;AAgBE,QAAA,UAAU,EAAE9F,iBAhBd;AAiBE,QAAA,SAAS,EAAE6F;AAjBb,SAGO5T,GAHP,CADF;AAqBD;;AAED,WAAOyY,WAAP;AACD;;AAGD,MAAIzO,gBAAgB,CAAChH,GAAjB,IAAwBR,OAAO,CAAC0C,MAAhC,IAA0C8E,gBAAgB,CAACC,MAAjB,IAA2BrD,IAAI,CAAC1B,MAA9E,EAAsF;AACpF8N,IAAAA,mBAAmB,CAAC;AAAEhQ,MAAAA,GAAG,EAAE,CAAC,CAAR;AAAWiH,MAAAA,MAAM,EAAE,CAAC,CAApB;AAAuBuG,MAAAA,IAAI,EAAE;AAA7B,KAAD,CAAnB;AACAL,IAAAA,oBAAoB,CAACpT,SAAD,CAApB;AACD;;AAED,MAAIiN,gBAAgB,CAACwG,IAAjB,KAA0B,MAA1B,IAAoC5J,IAAI,CAACoD,gBAAgB,CAACC,MAAlB,CAAJ,KAAkCD,gBAAgB,CAACqM,WAA3F,EAAwG;AAEtGT,IAAAA,WAAW;AACZ;;AAED,sBACElW;AACE,IAAA,IAAI,EAAEyU,SAAS,GAAG,UAAH,GAAgB,MADjC;AAEE,kBAAYlV,SAFd;AAGE,uBAAiBC,cAHnB;AAIE,wBAAkB0T,eAJpB;AAKE,4BAAsBsB,YAAY,GAAG,IAAH,GAAUnX,SAL9C;AAME,qBAAeyF,OAAO,CAAC0C,MANzB;AAOE,qBAAe6O,eAAe,GAAGrN,SAAlB,GAA8BsN,gBAP/C;AAQE,IAAA,SAAS,EAAE1H,IAAI,CAAC,KAAD,EAAiDD,SAAjD,EAAmC8G,UAAnC,IAAU,uBAAV,CARjB;AASE,IAAA,KAAK,EAAE,EACL,GAAGR,KADE;AAEL,6BAAwB,GAAEb,eAAgB,IAFrC;AAGL,6BAAwB,GAAEC,mBAAoB,IAHzC;AAIL,qBAAgB,GAAEnO,gBAAiB,IAJ9B;AAKL,sBAAiB,GAAEyC,SAAU,IALxB;AAML,SAAG1C;AANE,KATT;AAiBE,IAAA,GAAG,EAAEhG,OAjBP;AAkBE,IAAA,QAAQ,EAAEqY,YAlBZ;AAAA,4BAoBErW,IAAC6M,WAAD;AACE,MAAA,YAAY,EAAEC,YADhB;AAEE,MAAA,IAAI,EAAErG,OAFR;AAGE,MAAA,OAAO,EAAEX,eAHX;AAIE,MAAA,cAAc,EAAEoP,kBAJlB;AAKE,MAAA,eAAe,EAAE,CAAA7C,YAAY,QAAZ,YAAAA,YAAY,CAAE8G,IAAd,MAAuB1S,OAAO,CAAClB,MALlD;AAME,MAAA,oBAAoB,EAAEwH,oBANxB;AAOE,MAAA,UAAU,EAAE3D,UAPd;AAQE,MAAA,aAAa,EAAEC,aARjB;AASE,MAAA,MAAM,EAAEF;AATV,MApBF,EA+BG4J,eAAe,iBACd/S,IAACoN,WAAD;AACE,MAAA,OAAO,EAAEtH,eADX;AAEE,MAAA,OAAO,EAAEuH,OAFX;AAGE,MAAA,eAAe,EAAEC;AAHnB,MAhCJ,EAsCGrG,IAAI,CAAC1B,MAAL,KAAgB,CAAhB,IAAqBmN,iBAArB,gBAAyC1S,IAAC,iBAAD,KAAzC,gBACCD;AAAA,8BACEC;AACE,QAAA,GAAG,EAAE4T,YADP;AAEE,QAAA,QAAQ,EAAE,CAFZ;AAGE,QAAA,SAAS,EAAC,gBAHZ;AAIE,QAAA,SAAS,EAAEjT;AAJb,QADF,eAOEX;AAAK,QAAA,KAAK,EAAE;AAAEoZ,UAAAA,MAAM,EAAE3T,IAAI,CAACI,GAAL,CAASoB,IAAI,CAAC1B,MAAL,GAAcmB,SAAvB,EAAkChI,YAAlC;AAAV;AAAZ,QAPF,EAQGma,eAAe,EARlB,EASG5G,WATH,oBASGA,WAAW,CAAEhP,GAAb,CAAiB,CAAC9C,GAAD,EAAMmK,MAAN,kBAChBtK,IAAC4R,YAAD;AACE,yBAAewC,eAAe,GAAGrN,SAAlB,GAA8BuD,MAA9B,GAAuC,CADxD;AAGE,QAAA,MAAM,EAAEA,MAHV;AAIE,QAAA,GAAG,EAAEnK,GAJP;AAKE,QAAA,MAAM,EAAEuG,SAAS,IAAIuL,WAAW,CAAC1M,MAAZ,GAAqB,CAArB,GAAyB+E,MAA7B,CALnB;AAME,QAAA,eAAe,EAAExE;AANnB,SAEOwE,MAFP,CADD,CATH;AAAA,MAvCJ;AAAA,IADF;AA+DD;;AAED,gCAAewE,UAAU,CAACkD,QAAD,CAAzB;;ACl7BA,SAASqH,kBAAT,CAA4BC,KAA5B,EAA4D;AAC1DA,EAAAA,KAAK,QAAL,YAAAA,KAAK,CAAEva,KAAP;AACAua,EAAAA,KAAK,QAAL,YAAAA,KAAK,CAAEC,MAAP;AACD;;AAEc,SAASC,UAAT,CAAiD;AAC9DrZ,EAAAA,GAD8D;AAE9DC,EAAAA,MAF8D;AAG9D4N,EAAAA,WAH8D;AAI9D2K,EAAAA;AAJ8D,CAAjD,EAKoB;AACjC,sBACE3Y;AACE,IAAA,SAAS,EAAC,iBADZ;AAEE,IAAA,GAAG,EAAEqZ,kBAFP;AAGE,IAAA,KAAK,EAAElZ,GAAG,CAACC,MAAM,CAACC,GAAR,CAHZ;AAIE,IAAA,QAAQ,EAAES,KAAK,IAAIkN,WAAW,CAAC,EAAE,GAAG7N,GAAL;AAAU,OAACC,MAAM,CAACC,GAAR,GAAcS,KAAK,CAACnB,MAAN,CAAaT;AAArC,KAAD,CAJhC;AAKE,IAAA,MAAM,EAAE,MAAMyZ,OAAO,CAAC,IAAD;AALvB,IADF;AASD;;;;;"}