{"version":3,"file":"main.5e5c53b7d319c44137d3.js","mappings":"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","sources":["webpack://react-data-grid/webpack/runtime/chunk loaded","webpack://react-data-grid/webpack/runtime/create fake namespace object","webpack://react-data-grid/webpack/runtime/load script","webpack://react-data-grid/./website/Nav.tsx","webpack://react-data-grid/./src/hooks/useLayoutEffect.ts","webpack://react-data-grid/./src/hooks/useFocusRef.ts","webpack://react-data-grid/./src/DataGridDefaultRenderersProvider.ts","webpack://react-data-grid/./src/formatters/SelectCellFormatter.tsx","webpack://react-data-grid/./src/hooks/useRowSelection.ts","webpack://react-data-grid/./src/Columns.tsx","webpack://react-data-grid/./src/editors/textEditor.tsx","webpack://react-data-grid/./src/style/row.ts","webpack://react-data-grid/./src/formatters/valueFormatter.tsx","webpack://react-data-grid/./src/formatters/toggleGroupFormatter.tsx","webpack://react-data-grid/./src/utils/index.ts","webpack://react-data-grid/./src/utils/colSpanUtils.ts","webpack://react-data-grid/./src/hooks/useLatestFunc.ts","webpack://react-data-grid/./src/headerRenderer.tsx","webpack://react-data-grid/./src/style/cell.ts","webpack://react-data-grid/./src/utils/styleUtils.ts","webpack://react-data-grid/./src/utils/domUtils.ts","webpack://react-data-grid/./src/hooks/useRovingCellRef.ts","webpack://react-data-grid/./src/HeaderCell.tsx","webpack://react-data-grid/./src/HeaderRow.tsx","webpack://react-data-grid/./src/utils/selectedCellUtils.ts","webpack://react-data-grid/./src/utils/eventUtils.ts","webpack://react-data-grid/./src/Cell.tsx","webpack://react-data-grid/./src/Row.tsx","webpack://react-data-grid/./src/GroupCell.tsx","webpack://react-data-grid/./src/GroupRow.tsx","webpack://react-data-grid/./src/SummaryCell.tsx","webpack://react-data-grid/./src/SummaryRow.tsx","webpack://react-data-grid/./src/utils/keyboardUtils.ts","webpack://react-data-grid/./src/EditCell.tsx","webpack://react-data-grid/./src/DragHandle.tsx","webpack://react-data-grid/./src/sortStatus.tsx","webpack://react-data-grid/./src/formatters/checkboxFormatter.tsx","webpack://react-data-grid/./src/utils/renderMeasuringCells.tsx","webpack://react-data-grid/./src/DataGrid.tsx","webpack://react-data-grid/./src/hooks/useGridDimensions.ts","webpack://react-data-grid/./src/hooks/useCalculatedColumns.ts","webpack://react-data-grid/./src/hooks/useViewportRows.ts","webpack://react-data-grid/./src/hooks/useViewportColumns.ts","webpack://react-data-grid/./src/style/core.ts","webpack://react-data-grid/./website/demos/exportUtils.tsx","webpack://react-data-grid/./website/demos/CommonFeatures.tsx","webpack://react-data-grid/./website/demos/components/Editors/dropDownEditor.tsx","webpack://react-data-grid/./website/demos/components/Formatters/ImageFormatter.tsx","webpack://react-data-grid/./website/demos/AllFeatures.tsx","webpack://react-data-grid/./website/demos/CellNavigation.tsx","webpack://react-data-grid/./website/demos/ColumnSpanning.tsx","webpack://react-data-grid/./website/demos/components/HeaderRenderers/DraggableHeaderRenderer.tsx","webpack://react-data-grid/./website/demos/ColumnsReordering.tsx","webpack://react-data-grid/./website/demos/CustomizableRenderers.tsx","webpack://react-data-grid/./website/demos/ContextMenu.tsx","webpack://react-data-grid/./website/demos/Grouping.tsx","webpack://react-data-grid/./website/demos/HeaderFilters.tsx","webpack://react-data-grid/./website/demos/InfiniteScrolling.tsx","webpack://react-data-grid/./website/demos/components/Formatters/CellExpanderFormatter.tsx","webpack://react-data-grid/./website/demos/MasterDetail.tsx","webpack://react-data-grid/./website/demos/MillionCells.tsx","webpack://react-data-grid/./website/demos/NoRows.tsx","webpack://react-data-grid/./website/demos/Resizable.tsx","webpack://react-data-grid/./website/demos/components/RowRenderers/DraggableRowRenderer.tsx","webpack://react-data-grid/./website/demos/RowsReordering.tsx","webpack://react-data-grid/./website/demos/ScrollToRow.tsx","webpack://react-data-grid/./website/demos/components/Formatters/ChildRowDeleteButton.tsx","webpack://react-data-grid/./website/demos/TreeView.tsx","webpack://react-data-grid/./website/demos/VariableRowHeight.tsx","webpack://react-data-grid/./website/demos/Animation.tsx","webpack://react-data-grid/./website/root.tsx","webpack://react-data-grid/webpack/bootstrap","webpack://react-data-grid/webpack/runtime/define property getters","webpack://react-data-grid/webpack/runtime/ensure chunk","webpack://react-data-grid/webpack/runtime/get javascript chunk filename","webpack://react-data-grid/webpack/runtime/get mini-css chunk filename","webpack://react-data-grid/webpack/runtime/global","webpack://react-data-grid/webpack/runtime/hasOwnProperty shorthand","webpack://react-data-grid/webpack/runtime/make namespace object","webpack://react-data-grid/webpack/runtime/publicPath","webpack://react-data-grid/webpack/runtime/jsonp chunk loading","webpack://react-data-grid/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"react-data-grid:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","import { NavLink } from 'react-router-dom';\nimport { css } from '@linaria/core';\n\nimport type { Direction } from '../src/types';\n\nconst navClassname = css`\n  display: flex;\n  flex-direction: column;\n  white-space: nowrap;\n\n  @media (prefers-color-scheme: light) {\n    border-inline-start: 4px solid hsl(210deg 50% 80%);\n  }\n  @media (prefers-color-scheme: dark) {\n    border-inline-start: 4px solid hsl(210deg 50% 40%);\n  }\n\n  h1,\n  h2 {\n    margin: 8px;\n  }\n\n  a {\n    color: inherit;\n    font-size: 14px;\n    line-height: 22px;\n    text-decoration: none;\n    padding-block: 0;\n    padding-inline: 16px;\n    transition: 0.1s background-color;\n\n    &:hover {\n      @media (prefers-color-scheme: light) {\n        background-color: hsl(210deg 50% 90%);\n      }\n      @media (prefers-color-scheme: dark) {\n        background-color: hsl(210deg 50% 30%);\n      }\n    }\n  }\n`;\n\nconst activeNavClassname = css`\n  font-weight: 500;\n\n  @media (prefers-color-scheme: light) {\n    background-color: hsl(210deg 50% 80%);\n  }\n  @media (prefers-color-scheme: dark) {\n    background-color: hsl(210deg 50% 40%);\n  }\n\n  a&:hover {\n    @media (prefers-color-scheme: light) {\n      background-color: hsl(210deg 50% 70%);\n    }\n    @media (prefers-color-scheme: dark) {\n      background-color: hsl(210deg 50% 50%);\n    }\n  }\n`;\n\nconst rtlCheckboxClassname = css`\n  padding-inline-start: 8px;\n`;\n\ninterface Props {\n  direction: Direction;\n  onDirectionChange: (direction: Direction) => void;\n}\n\nexport default function Nav({ direction, onDirectionChange }: Props) {\n  return (\n    <nav className={navClassname}>\n      <h1>react-data-grid</h1>\n\n      <h2>Demos</h2>\n      <NavLink to=\"/common-features\" end className={getActiveClassname}>\n        Common Features\n      </NavLink>\n      <NavLink to=\"/all-features\" end className={getActiveClassname}>\n        All Features\n      </NavLink>\n      <NavLink to=\"/cell-navigation\" end className={getActiveClassname}>\n        Cell Navigation\n      </NavLink>\n      <NavLink to=\"/column-spanning\" end className={getActiveClassname}>\n        Column Spanning\n      </NavLink>\n      <NavLink to=\"/columns-reordering\" end className={getActiveClassname}>\n        Columns Reordering\n      </NavLink>\n      <NavLink to=\"/context-menu\" end className={getActiveClassname}>\n        Context Menu\n      </NavLink>\n      <NavLink to=\"/customizable-renderers\" end className={getActiveClassname}>\n        Customizable Renderers\n      </NavLink>\n      <NavLink to=\"/grouping\" end className={getActiveClassname}>\n        Grouping\n      </NavLink>\n      <NavLink to=\"/header-filters\" end className={getActiveClassname}>\n        Header Filters\n      </NavLink>\n      <NavLink to=\"/infinite-scrolling\" end className={getActiveClassname}>\n        Infinite Scrolling\n      </NavLink>\n      <NavLink to=\"/master-detail\" end className={getActiveClassname}>\n        Master Detail\n      </NavLink>\n      <NavLink to=\"/million-cells\" end className={getActiveClassname}>\n        A Million Cells\n      </NavLink>\n      <NavLink to=\"/no-rows\" end className={getActiveClassname}>\n        No Rows\n      </NavLink>\n      <NavLink to=\"/resizable-grid\" end className={getActiveClassname}>\n        Resizable Grid\n      </NavLink>\n      <NavLink to=\"/rows-reordering\" end className={getActiveClassname}>\n        Rows Reordering\n      </NavLink>\n      <NavLink to=\"/scroll-to-row\" end className={getActiveClassname}>\n        Scroll To Row\n      </NavLink>\n      <NavLink to=\"/tree-view\" end className={getActiveClassname}>\n        Tree View\n      </NavLink>\n      <NavLink to=\"/variable-row-height\" end className={getActiveClassname}>\n        Variable Row Height\n      </NavLink>\n      <NavLink to=\"/animation\" end className={getActiveClassname}>\n        Animation\n      </NavLink>\n\n      <h2>Links</h2>\n      <a\n        href=\"https://github.com/adazzle/react-data-grid/blob/main/README.md\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Documentation\n      </a>\n      <a\n        href=\"https://github.com/adazzle/react-data-grid/blob/main/CHANGELOG.md\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Changelog\n      </a>\n      <a\n        href=\"https://github.com/adazzle/react-data-grid/discussions\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        Discussions\n      </a>\n      <a href=\"https://github.com/adazzle/react-data-grid/issues\" target=\"_blank\" rel=\"noreferrer\">\n        Issues\n      </a>\n\n      <h2>Direction</h2>\n      <label className={rtlCheckboxClassname}>\n        <input\n          type=\"checkbox\"\n          checked={direction === 'rtl'}\n          onChange={() => onDirectionChange(direction === 'rtl' ? 'ltr' : 'rtl')}\n        />\n        Right to left\n      </label>\n    </nav>\n  );\n}\n\nfunction getActiveClassname({ isActive }: { isActive: boolean }) {\n  return isActive ? activeNavClassname : '';\n}\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isSelected: boolean) {\n  const ref = useRef<T>(null);\n\n  useLayoutEffect(() => {\n    if (!isSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  return {\n    ref,\n    tabIndex: isSelected ? 0 : -1\n  };\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Renderers, Maybe } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultRenderersContext = createContext<Maybe<Renderers<any, any>>>(undefined);\n\nexport const DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;\n\nexport function useDefaultRenderers<R, SR>(): Maybe<Renderers<R, SR>> {\n  return useContext(DataGridDefaultRenderersContext);\n}\n","import { useFocusRef } from '../hooks/useFocusRef';\nimport { useDefaultRenderers } from '../DataGridDefaultRenderersProvider';\nimport type { CheckboxFormatterProps } from '../types';\n\ntype SharedInputProps = Pick<CheckboxFormatterProps, 'disabled' | 'aria-label' | 'aria-labelledby'>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  isCellSelected,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLInputElement>(isCellSelected);\n  const checkboxFormatter = useDefaultRenderers()!.checkboxFormatter!;\n\n  return (\n    <>\n      {checkboxFormatter(\n        {\n          'aria-label': ariaLabel,\n          'aria-labelledby': ariaLabelledBy,\n          tabIndex,\n          disabled,\n          checked: value,\n          onChange\n        },\n        ref\n      )}\n    </>\n  );\n}\n","import { createContext, useContext } from 'react';\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { SelectCellFormatter } from './formatters';\nimport { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, FormatterProps, GroupFormatterProps, HeaderRendererProps } from './types';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction HeaderRenderer(props: HeaderRendererProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select All\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'HEADER', checked });\n      }}\n    />\n  );\n}\n\nfunction SelectFormatter(props: FormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: GroupFormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ type: 'ROW', row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return <HeaderRenderer {...props} />;\n  },\n  formatter(props) {\n    return <SelectFormatter {...props} />;\n  },\n  groupFormatter(props) {\n    return <SelectGroupFormatter {...props} />;\n  }\n};\n","import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditorInternalClassname = css`\n  @layer rdg.TextEditor {\n    appearance: none;\n\n    box-sizing: border-box;\n    inline-size: 100%;\n    block-size: 100%;\n    padding-block: 0;\n    padding-inline: 6px;\n    border: 2px solid #ccc;\n    vertical-align: top;\n    color: var(--rdg-color);\n    background-color: var(--rdg-background-color);\n\n    font-family: inherit;\n    font-size: var(--rdg-font-size);\n\n    &:focus {\n      border-color: var(--rdg-selection-color);\n      outline: none;\n    }\n\n    &::placeholder {\n      color: #999;\n      opacity: 1;\n    }\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function textEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  @layer rdg.Row {\n    display: contents;\n    line-height: var(--rdg-row-height);\n    background-color: var(--rdg-background-color);\n\n    &:hover {\n      background-color: var(--rdg-row-hover-background-color);\n    }\n\n    &[aria-selected='true'] {\n      background-color: var(--rdg-row-selected-background-color);\n\n      &:hover {\n        background-color: var(--rdg-row-selected-hover-background-color);\n      }\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  @layer rdg.FocusSink {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const rowSelectedClassname = 'rdg-row-selected';\n\nexport const rowSelectedWithFrozenCell = css`\n  @layer rdg.FocusSink {\n    &::before {\n      content: '';\n      display: inline-block;\n      height: 100%;\n      position: sticky;\n      inset-inline-start: 0;\n      border-inline-start: 2px solid var(--rdg-selection-color);\n    }\n  }\n`;\n","import type { FormatterProps } from '../types';\n\nexport function valueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import { css } from '@linaria/core';\nimport type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst groupCellContent = css`\n  @layer rdg.GroupCellContent {\n    outline: none;\n  }\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  @layer rdg.GroupCellCaret {\n    margin-inline-start: 4px;\n    stroke: currentColor;\n    stroke-width: 1.5px;\n    fill: transparent;\n    vertical-align: middle;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function toggleGroupFormatter<R, SR>(props: GroupFormatterProps<R, SR>) {\n  return <ToggleGroup {...props} />;\n}\n\nexport function ToggleGroup<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={ref}\n      className={groupCellContentClassname}\n      tabIndex={tabIndex}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey as string}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import type { CalculatedColumn } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './eventUtils';\nexport * from './keyboardUtils';\nexport * from './renderMeasuringCells';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, round, floor, sign, abs } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","import { useRef, useEffect, useCallback } from 'react';\nimport type { Maybe } from '../types';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends Maybe<(...args: any[]) => any>>(fn: T): T {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  const callbackFn = useCallback((...args: Parameters<NonNullable<T>>) => {\n    ref.current!(...args);\n  }, []);\n\n  // @ts-expect-error\n  return fn ? callbackFn : fn;\n}\n","import { css } from '@linaria/core';\n\nimport { useFocusRef } from './hooks';\nimport type { HeaderRendererProps } from './types';\nimport { useDefaultRenderers } from './DataGridDefaultRenderersProvider';\n\nconst headerSortCell = css`\n  @layer rdg.SortableHeaderCell {\n    cursor: pointer;\n    display: flex;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  @layer rdg.SortableHeaderCellName {\n    flex-grow: 1;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function headerRenderer<R, SR>({\n  column,\n  sortDirection,\n  priority,\n  onSort,\n  isCellSelected\n}: HeaderRendererProps<R, SR>) {\n  if (!column.sortable) return <>{column.name}</>;\n\n  return (\n    <SortableHeaderCell\n      onSort={onSort}\n      sortDirection={sortDirection}\n      priority={priority}\n      isCellSelected={isCellSelected}\n    >\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  HeaderRendererProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'isCellSelected'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  isCellSelected\n}: SortableHeaderCellProps<R, SR>) {\n  const sortStatus = useDefaultRenderers<R, SR>()!.sortStatus!;\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      ref={ref}\n      tabIndex={tabIndex}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{sortStatus({ sortDirection, priority })}</span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  @layer rdg.Cell {\n    /* max-content does not work with size containment\n     * dynamically switching between different containment styles incurs a heavy relayout penalty\n     * Chromium bug: at odd zoom levels or subpixel positioning, layout/paint containment can make cell borders disappear\n     *   https://bugs.chromium.org/p/chromium/issues/detail?id=1326946\n     */\n    contain: style;\n    position: relative; /* needed for absolute positioning to work */\n    padding-block: 0;\n    padding-inline: 8px;\n    border-inline-end: 1px solid var(--rdg-border-color);\n    border-block-end: 1px solid var(--rdg-border-color);\n    grid-row-start: var(--rdg-grid-row-start);\n    background-color: inherit;\n\n    white-space: nowrap;\n    overflow: hidden;\n    overflow: clip;\n    text-overflow: ellipsis;\n    outline: none;\n\n    &[aria-selected='true'] {\n      outline: 2px solid var(--rdg-selection-color);\n      outline-offset: -2px;\n    }\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nexport const cellFrozen = css`\n  @layer rdg.Cell {\n    position: sticky;\n    /* Should have a higher value than 0 to show up above unfrozen cells */\n    z-index: 1;\n  }\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  @layer rdg.Cell {\n    box-shadow: calc(2px * var(--rdg-sign)) 0 5px -2px rgba(136, 136, 136, 0.3);\n  }\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style';\n\nexport function getRowStyle(rowIdx: number, height?: number): CSSProperties {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    } as unknown as CSSProperties;\n  }\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import type { Maybe } from '../types';\n\nexport function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function scrollIntoView(element: Maybe<HTMLDivElement>) {\n  element?.scrollIntoView({ inline: 'nearest', block: 'nearest' });\n}\n","import { useCallback, useState, type MutableRefObject } from 'react';\nimport { scrollIntoView } from '../utils';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingCellRef(\n  isSelected: boolean,\n  skipCellFocusRef?: MutableRefObject<boolean>\n) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  const ref = useCallback(\n    (cell: HTMLDivElement | null) => {\n      if (cell === null) return;\n      if (skipCellFocusRef?.current) {\n        skipCellFocusRef.current = false;\n        return;\n      }\n      scrollIntoView(cell);\n      if (cell.contains(document.activeElement)) return;\n      cell.focus({ preventScroll: true });\n    },\n    [skipCellFocusRef]\n  );\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocusable = isSelected && !isChildFocused;\n\n  return {\n    ref: isSelected ? ref : undefined,\n    tabIndex: isFocusable ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport defaultHeaderRenderer from './headerRenderer';\nimport { getCellStyle, getCellClassname } from './utils';\nimport { useRovingCellRef } from './hooks';\n\nconst cellResizable = css`\n  @layer rdg.HeaderCell {\n    touch-action: none;\n\n    &::after {\n      content: '';\n      cursor: col-resize;\n      position: absolute;\n      inset-block-start: 0;\n      inset-inline-end: 0;\n      inset-block-end: 0;\n      inline-size: 10px;\n    }\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderCellProps<R, SR>) {\n  const isRtl = direction === 'rtl';\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  const headerRenderer = column.headerRenderer ?? defaultHeaderRenderer;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right, left } = currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      // prevents text selection in Chrome, which fixes scrolling the grid while dragging, and fixes re-size on an autosized column\n      event.preventDefault();\n      const { right, left } = currentTarget.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, width);\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst === true && sortDirection === 'DESC') ||\n        (sortDescendingFirst !== true && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function onDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    const { right, left } = event.currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    onColumnResize(column, 'max-content');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell(0);\n    }\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      ref={ref}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onDoubleClick={column.resizable ? onDoubleClick : undefined}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {headerRenderer({\n        column,\n        sortDirection,\n        priority,\n        onSort,\n        isCellSelected\n      })}\n    </div>\n  );\n}\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn, Direction } from './types';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { DataGridProps } from './DataGrid';\nimport { cell, cellFrozen, rowSelectedClassname } from './style';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'max-content') => void;\n  selectCell: (columnIdx: number) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  @layer rdg.HeaderRow {\n    display: contents;\n    line-height: var(--rdg-header-row-height);\n    background-color: var(--rdg-header-background-color);\n    font-weight: bold;\n\n    & > .${cell} {\n      /* Should have a higher value than 0 to show up above regular cells */\n      z-index: 1;\n      position: sticky;\n      inset-block-start: 0;\n    }\n\n    & > .${cellFrozen} {\n      z-index: 2;\n    }\n  }\n`;\n\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n      style={getRowStyle(1)}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import type { CalculatedColumn, Position, GroupRow, CellNavigationMode, Maybe } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.editor != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function getSelectedCellColSpan<R, SR>({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column,\n  isGroupRow\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'topSummaryRows' | 'bottomSummaryRows' | 'isGroupRow' | 'lastFrozenColumnIndex'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const minRowIdx = -1 - topSummaryRowsCount;\n  if (rowIdx === minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (topSummaryRows && rowIdx > minRowIdx && rowIdx <= topSummaryRowsCount + minRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    }\n    return undefined;\n  }\n\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // Exit the grid if we're at the first or last cell of the grid\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\n","import type { CellEvent } from '../types';\n\nexport function createCellEvent<E extends React.SyntheticEvent<HTMLDivElement>>(\n  event: E\n): CellEvent<E> {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n\n  return cellEvent;\n}\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname, isCellEditable, createCellEvent } from './utils';\nimport type { CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nconst cellCopied = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n  }\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  @layer rdg.Cell {\n    background-color: #ccccff;\n\n    &.${cellCopied} {\n      background-color: #9999ff;\n    }\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  rowIdx,\n  dragHandle,\n  skipCellFocusRef,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected, skipCellFocusRef);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n  const isEditable = isCellEditable(column, row);\n\n  function selectCellWrapper(openEditor?: boolean) {\n    selectCell({ rowIdx, idx: column.idx }, openEditor);\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onClick) {\n      const cellEvent = createCellEvent(event);\n      onClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleContextMenu(event: React.MouseEvent<HTMLDivElement>) {\n    if (onContextMenu) {\n      const cellEvent = createCellEvent(event);\n      onContextMenu({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    if (onDoubleClick) {\n      const cellEvent = createCellEvent(event);\n      onDoubleClick({ row, column, selectCell: selectCellWrapper }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper(true);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(column, newRow);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isEditable || undefined}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          {column.formatter({\n            column,\n            row,\n            isCellSelected,\n            isCellEditable: isEditable,\n            onRowChange: handleRowChange\n          })}\n          {dragHandle}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { memo, forwardRef, type RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport { rowClassname, rowSelectedClassname } from './style';\nimport type { CalculatedColumn, RowRendererProps } from './types';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    skipCellFocusRef,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RowRendererProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((column: CalculatedColumn<R, SR>, newRow: R) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          rowIdx={rowIdx}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onClick={onCellClick}\n          onDoubleClick={onCellDoubleClick}\n          onContextMenu={onCellContextMenu}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n          skipCellFocusRef={skipCellFocusRef}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nconst RowComponent = memo(forwardRef(Row)) as <R, SR>(\n  props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nexport default RowComponent;\n\nexport function defaultRowRenderer<R, SR>(key: React.Key, props: RowRendererProps<R, SR>) {\n  return <RowComponent key={key} {...props} />;\n}\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\nimport { useRovingCellRef } from './hooks';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) &&\n        column.groupFormatter?.({\n          groupKey,\n          childRows,\n          column,\n          row,\n          isExpanded,\n          isCellSelected,\n          toggleGroup\n        })}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozenLast, rowClassname, rowSelectedClassname } from './style';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport type { CalculatedColumn, GroupRow, Omit } from './types';\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  row: GroupRow<R>;\n  gridRowStart: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectGroup: (rowIdx: number) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nconst groupRow = css`\n  @layer rdg.GroupedRow {\n    &:not([aria-selected='true']) {\n      background-color: var(--rdg-header-background-color);\n    }\n\n    > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n      border-inline-end: none;\n    }\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  gridRowStart,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          {\n            [rowSelectedClassname]: selectedCellIdx === -1\n          }\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nexport const summaryCellClassname = css`\n  @layer rdg.SummaryCell {\n    inset-block-start: var(--rdg-summary-row-top);\n    inset-block-end: var(--rdg-summary-row-bottom);\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<\n  CellRendererProps<R, SR>,\n  'rowIdx' | 'column' | 'colSpan' | 'isCellSelected' | 'selectCell'\n>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const { summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell({ rowIdx, idx: column.idx });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {column.summaryFormatter?.({ column, row, isCellSelected })}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozen, rowClassname, rowSelectedClassname } from './style';\nimport { getColSpan, getRowStyle } from './utils';\nimport SummaryCell from './SummaryCell';\nimport type { RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<\n  RowRendererProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart' | 'selectCell'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  isTop: boolean;\n  showBorder: boolean;\n}\n\nconst summaryRow = css`\n  @layer rdg.SummaryRow {\n    line-height: var(--rdg-summary-row-height);\n\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst topSummaryRow = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      z-index: 1;\n    }\n\n    > .${cellFrozen} {\n      z-index: 2;\n    }\n  }\n`;\n\nexport const topSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-end: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nexport const bottomSummaryRowBorderClassname = css`\n  @layer rdg.SummaryRow {\n    > .${cell} {\n      border-block-start: 2px solid var(--rdg-summary-border-color);\n    }\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nconst topSummaryRowClassname = `rdg-top-summary-row ${topSummaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  showBorder,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [rowSelectedClassname]: selectedCellIdx === -1,\n          [topSummaryRowClassname]: isTop,\n          [topSummaryRowBorderClassname]: isTop && showBorder,\n          [bottomSummaryRowBorderClassname]: !isTop && showBorder,\n          'rdg-bottom-summary-row': !isTop\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return target.matches(\n      '.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child, .rdg-editor-container > div:only-child > label:only-child > :only-child'\n    );\n  }\n  return false;\n}\n","import { useEffect, useRef, type MutableRefObject, useCallback } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { getCellStyle, getCellClassname, onEditorNavigation, createCellEvent } from './utils';\nimport type {\n  CellKeyboardEvent,\n  CellRendererProps,\n  EditCellKeyDownArgs,\n  EditorProps,\n  Maybe,\n  Omit\n} from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  @layer rdg.EditCell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<EditorProps<R, SR>, 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  rowIdx: number;\n  skipCellFocusRef: MutableRefObject<boolean>;\n  closeEditor: () => void;\n  navigate: (event: React.KeyboardEvent<HTMLDivElement>) => void;\n  onKeyDown: Maybe<(args: EditCellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  skipCellFocusRef,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true);\n  });\n\n  const cancelFrameRequest = useCallback(() => {\n    skipCellFocusRef.current = false;\n    if (commitOnOutsideClick) {\n      cancelAnimationFrame(frameRequestRef.current!);\n    }\n  }, [commitOnOutsideClick, skipCellFocusRef]);\n\n  useEffect(() => {\n    function onWindowCaptureMouseDown() {\n      skipCellFocusRef.current = true;\n      if (commitOnOutsideClick) {\n        frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n      }\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [cancelFrameRequest, commitOnOutsideClick, commitOnOutsideMouseDown, skipCellFocusRef]);\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown(\n        {\n          mode: 'EDIT',\n          row,\n          column,\n          rowIdx,\n          navigate() {\n            navigate(event);\n          },\n          onClose\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n\n    if (event.key === 'Escape') {\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n\n  function onClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      onRowChange(row, true);\n    } else {\n      closeEditor();\n    }\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.renderFormatter && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={handleKeyDown}\n      onMouseDownCapture={cancelFrameRequest}\n    >\n      {column.editor != null && (\n        <>\n          {column.editor({\n            column,\n            row,\n            onRowChange,\n            onClose\n          })}\n          {column.editorOptions?.renderFormatter &&\n            column.formatter({\n              column,\n              row,\n              isCellSelected: true,\n              isCellEditable: true,\n              onRowChange\n            })}\n        </>\n      )}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  @layer rdg.DragHandle {\n    cursor: move;\n    position: absolute;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 8px;\n    block-size: 8px;\n    background-color: var(--rdg-selection-color);\n\n    &:hover {\n      inline-size: 16px;\n      block-size: 16px;\n      border: 2px solid var(--rdg-selection-color);\n      background-color: var(--rdg-background-color);\n    }\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { css } from '@linaria/core';\nimport type { SortStatusProps, SortIconProps, SortPriorityProps } from './types';\n\nconst arrow = css`\n  @layer rdg.SortIcon {\n    fill: currentColor;\n\n    > path {\n      transition: d 0.1s;\n    }\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function sortStatus({ sortDirection, priority }: SortStatusProps) {\n  return (\n    <>\n      {sortIcon({ sortDirection })}\n      {sortPriority({ priority })}\n    </>\n  );\n}\n\nexport function sortIcon({ sortDirection }: SortIconProps) {\n  if (sortDirection === undefined) return null;\n\n  return (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  );\n}\n\nexport function sortPriority({ priority }: SortPriorityProps) {\n  return priority;\n}\n","import clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport type { CheckboxFormatterProps } from '../types';\n\nconst checkboxLabel = css`\n  @layer rdg.CheckboxLabel {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    inset: 0;\n    margin-inline-end: 1px; /* align checkbox in row group cell */\n  }\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  @layer rdg.CheckboxInput {\n    all: unset;\n  }\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  @layer rdg.CheckboxIcon {\n    content: '';\n    inline-size: 20px;\n    block-size: 20px;\n    border: 2px solid var(--rdg-border-color);\n    background-color: var(--rdg-background-color);\n\n    .${checkboxInput}:checked + & {\n      background-color: var(--rdg-checkbox-color);\n      outline: 4px solid var(--rdg-background-color);\n      outline-offset: -6px;\n    }\n\n    .${checkboxInput}:focus + & {\n      border-color: var(--rdg-checkbox-focus-color);\n    }\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  @layer rdg.CheckboxLabel {\n    cursor: default;\n\n    .${checkbox} {\n      border-color: var(--rdg-checkbox-disabled-border-color);\n      background-color: var(--rdg-checkbox-disabled-background-color);\n    }\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nexport function checkboxFormatter(\n  { onChange, ...props }: CheckboxFormatterProps,\n  ref: React.RefObject<HTMLInputElement>\n) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label\n      className={clsx(checkboxLabelClassname, {\n        [checkboxLabelDisabledClassname]: props.disabled\n      })}\n    >\n      <input\n        type=\"checkbox\"\n        ref={ref}\n        {...props}\n        className={checkboxInputClassname}\n        onChange={handleChange}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","import { css } from '@linaria/core';\nimport type { CalculatedColumn } from '../types';\n\nconst measuringCellClassname = css`\n  @layer rdg.MeasuringCell {\n    contain: strict;\n    grid-row: 1;\n    visibility: hidden;\n  }\n`;\n\nexport function renderMeasuringCells<R, SR>(viewportColumns: readonly CalculatedColumn<R, SR>[]) {\n  return (\n    <>\n      {viewportColumns.map(({ key, idx, minWidth, maxWidth }) => (\n        <div\n          key={key}\n          className={measuringCellClassname}\n          style={{ gridColumnStart: idx + 1, minWidth, maxWidth }}\n          data-measuring-cell-key={key}\n        />\n      ))}\n    </>\n  );\n}\n","import { forwardRef, useState, useRef, useImperativeHandle, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes, KeyboardEvent } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\n\nimport {\n  rootClassname,\n  viewportDraggingClassname,\n  focusSinkClassname,\n  rowSelected,\n  rowSelectedWithFrozenCell\n} from './style';\nimport {\n  useLayoutEffect,\n  useGridDimensions,\n  useCalculatedColumns,\n  useViewportColumns,\n  useViewportRows,\n  useLatestFunc,\n  RowSelectionChangeProvider,\n  RowSelectionProvider\n} from './hooks';\nimport HeaderRow from './HeaderRow';\nimport { defaultRowRenderer } from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport EditCell from './EditCell';\nimport DragHandle from './DragHandle';\nimport { default as defaultSortStatus } from './sortStatus';\nimport { checkboxFormatter as defaultCheckboxFormatter } from './formatters';\nimport {\n  DataGridDefaultRenderersProvider,\n  useDefaultRenderers\n} from './DataGridDefaultRenderersProvider';\nimport {\n  assertIsValidKeyGetter,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  getColSpan,\n  sign,\n  abs,\n  getSelectedCellColSpan,\n  renderMeasuringCells,\n  scrollIntoView,\n  createCellEvent\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Position,\n  RowsChangeData,\n  SelectRowEvent,\n  FillEvent,\n  CopyEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortColumn,\n  RowHeightArgs,\n  Maybe,\n  Renderers,\n  Direction,\n  CellMouseEvent,\n  CellClickArgs,\n  CellKeyDownArgs,\n  CellKeyboardEvent\n} from './types';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'formatter' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable'\n>;\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the top of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  topSummaryRows?: Maybe<readonly SR[]>;\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   */\n  bottomSummaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  groupBy?: Maybe<readonly string[]>;\n  rowGrouper?: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds?: Maybe<ReadonlySet<unknown>>;\n  onExpandedGroupIdsChange?: Maybe<(expandedGroupIds: Set<unknown>) => void>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onCopy?: Maybe<(event: CopyEvent<R>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a cell is clicked */\n  onCellClick?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  /** Function called whenever a cell is double clicked */\n  onCellDoubleClick?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  /** Function called whenever a cell is right clicked */\n  onCellContextMenu?: Maybe<(args: CellClickArgs<R, SR>, event: CellMouseEvent) => void>;\n  onCellKeyDown?: Maybe<(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  renderers?: Maybe<Renderers<R, SR>>;\n  rowClass?: Maybe<(row: R) => Maybe<string>>;\n  /** @default 'ltr' */\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  props: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  const {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Event props\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    enableVirtualization: rawEnableVirtualization,\n    // Miscellaneous\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction: rawDirection,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  } = props;\n\n  /**\n   * defaults\n   */\n  const defaultRenderers = useDefaultRenderers<R, SR>();\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const rowRenderer = renderers?.rowRenderer ?? defaultRenderers?.rowRenderer ?? defaultRowRenderer;\n  const sortStatus = renderers?.sortStatus ?? defaultRenderers?.sortStatus ?? defaultSortStatus;\n  const checkboxFormatter =\n    renderers?.checkboxFormatter ?? defaultRenderers?.checkboxFormatter ?? defaultCheckboxFormatter;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n\n  const headerRowsCount = 1;\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState((): ReadonlyMap<string, number> => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>(\n    () => ({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' })\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const rowRef = useRef<HTMLDivElement>(null);\n  const skipCellFocusRef = useRef(false);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight, isWidthInitialized] = useGridDimensions();\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      sortStatus,\n      checkboxFormatter\n    }),\n    [sortStatus, checkboxFormatter]\n  );\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const { viewportColumns, flexWidthViewportColumns } = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    columnWidths,\n    isGroupRow\n  });\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectGroupLatest = useLatestFunc((rowIdx: number) => {\n    selectCell({ rowIdx, idx: -1 });\n  });\n  const selectHeaderCellLatest = useLatestFunc((idx: number) => {\n    selectCell({ rowIdx: minRowIdx, idx });\n  });\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n\n    if (selectedPosition.idx === -1) {\n      rowRef.current!.focus({ preventScroll: true });\n      scrollIntoView(rowRef.current);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (!isWidthInitialized || flexWidthViewportColumns.length === 0) return;\n\n    setColumnWidths((columnWidths) => {\n      const newColumnWidths = new Map(columnWidths);\n      const grid = gridRef.current!;\n\n      for (const column of flexWidthViewportColumns) {\n        const measuringCell = grid.querySelector(`[data-measuring-cell-key=\"${column.key}\"]`)!;\n        // Set the actual width of the column after it is rendered\n        const { width } = measuringCell.getBoundingClientRect();\n        newColumnWidths.set(column.key, width);\n      }\n\n      return newColumnWidths;\n    });\n  }, [isWidthInitialized, flexWidthViewportColumns, gridRef]);\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn,\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: getRowTop(rowIdx),\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function handleColumnResize(column: CalculatedColumn<R, SR>, width: number | 'max-content') {\n    const { style } = gridRef.current!;\n    const newTemplateColumns = [...templateColumns];\n    newTemplateColumns[column.idx] = width === 'max-content' ? width : `${width}px`;\n    style.gridTemplateColumns = newTemplateColumns.join(' ');\n\n    const measuringCell = gridRef.current!.querySelector(\n      `[data-measuring-cell-key=\"${column.key}\"]`\n    )!;\n    const measuredWidth = measuringCell.getBoundingClientRect().width;\n    const measuredWidthPx = `${measuredWidth}px`;\n\n    // Immediately update `grid-template-columns` to prevent the column from jumping to its min/max allowed width.\n    // Only measuring cells have the min/max width set for proper colSpan support,\n    // which is why other cells may render at the previously set width, beyond the min/max.\n    // An alternative for the above would be to use flushSync.\n    // We also have to reset `max-content` so it doesn't remain stuck on `max-content`.\n    if (newTemplateColumns[column.idx] !== measuredWidthPx) {\n      newTemplateColumns[column.idx] = measuredWidthPx;\n      style.gridTemplateColumns = newTemplateColumns.join(' ');\n    }\n\n    if (columnWidths.get(column.key) === measuredWidth) return;\n\n    const newColumnWidths = new Map(columnWidths);\n    newColumnWidths.set(column.key, measuredWidth);\n    setColumnWidths(newColumnWidths);\n\n    onColumnResize?.(column.idx, measuredWidth);\n  }\n\n  function selectRow(args: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n    if (args.type === 'HEADER') {\n      selectAllRows(args.checked);\n      return;\n    }\n\n    const { row, checked, isShiftClick } = args;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked: boolean) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: KeyboardEvent<HTMLDivElement>) {\n    const { idx, rowIdx, mode } = selectedPosition;\n    if (mode === 'EDIT') return;\n\n    const row = rows[rowIdx];\n    if (!isGroupRow(row) && onCellKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown(\n        {\n          mode: 'SELECT',\n          row,\n          column: columns[idx],\n          rowIdx,\n          selectCell\n        },\n        cellEvent\n      );\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = hasGroups && event.target === rowRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { key, keyCode } = event;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event) &&\n      !isGroupRow(rows[rowIdx])\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (\n      isRowIdxWithinViewportBounds(rowIdx) &&\n      isGroupRow(row) &&\n      selectedPosition.idx === -1 &&\n      // Collapse the current group row if it is focused and is in expanded state\n      ((key === leftKey && row.isExpanded) ||\n        // Expand the current group row if it is focused and is in collapsed state\n        (key === rightKey && !row.isExpanded))\n    ) {\n      event.preventDefault(); // Prevents scrolling\n      toggleGroup(row.id);\n      return;\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      // scrollLeft is nagative when direction is rtl\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(column: CalculatedColumn<R, SR>, rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[getRawRowIdx(rowIdx)];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ type: 'ROW', row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (isSamePosition(selectedPosition, position)) {\n      // Avoid re-renders if the selected cell state is the same\n      scrollIntoView(gridRef.current?.querySelector('[tabindex=\"0\"]'));\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n  }\n\n  function scrollToColumn(idx: number): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (idx > lastFrozenColumnIndex) {\n      const { rowIdx } = selectedPosition;\n      if (!isCellWithinSelectionBounds({ rowIdx, idx })) return;\n      const { clientWidth } = current;\n      const column = columns[idx];\n      const { left, width } = columnMetrics.get(column)!;\n      let right = left + width;\n\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan !== undefined) {\n        const { left, width } = columnMetrics.get(columns[column.idx + colSpan - 1])!;\n        right = left + width;\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\n      const sign = isRtl ? -1 : 1;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = (left - totalFrozenColumnWidth) * sign;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = (right - clientWidth) * sign;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (key === leftKey && isRowSelected && isGroupRow(row) && !row.isExpanded && row.level !== 0) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let cellNavigationMode: CellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n\n    // Do not allow focus to leave and prevent scrolling\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getLayoutCssVars() {\n    if (flexWidthViewportColumns.length === 0) return layoutCssVars;\n    const newTemplateColumns = [...templateColumns];\n    for (const column of flexWidthViewportColumns) {\n      newTemplateColumns[column.idx] = column.width as string;\n    }\n\n    return {\n      ...layoutCssVars,\n      gridTemplateColumns: newTemplateColumns.join(' ')\n    };\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (\n      selectedPosition.rowIdx !== rowIdx ||\n      selectedPosition.mode === 'EDIT' ||\n      hasGroups || // drag fill is not supported when grouping is enabled\n      onFill == null\n    ) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rawRows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = () => {\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges?: boolean) => {\n      if (commitChanges) {\n        // Prevents two issues when editor is closed by clicking on a different cell\n        //\n        // Otherwise commitEditorChanges may be called before the cell state is changed to\n        // SELECT and this results in onRowChange getting called twice.\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor();\n        });\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor();\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        rowIdx={rowIdx}\n        skipCellFocusRef={skipCellFocusRef}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        onKeyDown={onCellKeyDown}\n        navigate={navigate}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    const selectedColumn = columns[selectedPosition.idx];\n    if (\n      // idx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements: React.ReactNode[] = [];\n    let startRowIndex = 0;\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      // selectedIdx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        const isGroupRowSelected =\n          isSelectable && row.childRows.every((cr) => selectedRows.has(rowKeyGetter!(cr)));\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerAndTopSummaryRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={rowColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            row={row}\n            gridRowStart={gridRowStart}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n            isRowSelected={isGroupRowSelected}\n            selectGroup={selectGroupLatest}\n            toggleGroup={toggleGroupLatest}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(\n        rowRenderer(key, {\n          // aria-rowindex is 1 based\n          'aria-rowindex': headerAndTopSummaryRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1,\n          'aria-selected': isSelectable ? isRowSelected : undefined,\n          rowIdx,\n          row,\n          viewportColumns: rowColumns,\n          isRowSelected,\n          onCellClick: onCellClickLatest,\n          onCellDoubleClick: onCellDoubleClickLatest,\n          onCellContextMenu: onCellContextMenuLatest,\n          rowClass,\n          gridRowStart,\n          height: getRowHeight(rowIdx),\n          copiedCellIdx:\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined,\n\n          selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n          draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n          setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n          lastFrozenColumnIndex,\n          onRowChange: handleFormatterRowChangeLatest,\n          selectCell: selectCellLatest,\n          selectedCellDragHandle: getDragHandle(rowIdx),\n          selectedCellEditor: getCellEditor(rowIdx),\n          skipCellFocusRef\n        })\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({ idx: -1, rowIdx: minRowIdx - 1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `${headerRowHeight}px`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused =\n    selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          // set scrollPadding to correctly position non-sticky cells after scrolling\n          scrollPaddingInlineStart:\n            selectedPosition.idx > lastFrozenColumnIndex\n              ? `${totalFrozenColumnWidth}px`\n              : undefined,\n          scrollPaddingBlock:\n            selectedPosition.rowIdx >= 0 && selectedPosition.rowIdx < rows.length\n              ? `${headerRowHeight + topSummaryRowsCount * summaryRowHeight}px ${\n                  bottomSummaryRowsCount * summaryRowHeight\n                }px`\n              : undefined,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-summary-row-height': `${summaryRowHeight}px`,\n          '--rdg-sign': isRtl ? -1 : 1,\n          ...getLayoutCssVars()\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      {/* extra div is needed for row navigation in a treegrid */}\n      {hasGroups && (\n        <div\n          ref={rowRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n          }}\n          onKeyDown={handleKeyDown}\n        />\n      )}\n      <DataGridDefaultRenderersProvider value={defaultGridComponents}>\n        <RowSelectionChangeProvider value={selectRowLatest}>\n          <RowSelectionProvider value={allRowsSelected}>\n            <HeaderRow\n              columns={getRowViewportColumns(-1)}\n              onColumnResize={handleColumnResizeLatest}\n              sortColumns={sortColumns}\n              onSortColumnsChange={onSortColumnsChangeLatest}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n              selectedCellIdx={\n                selectedPosition.rowIdx === minRowIdx ? selectedPosition.idx : undefined\n              }\n              selectCell={selectHeaderCellLatest}\n              shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n              direction={direction}\n            />\n          </RowSelectionProvider>\n        </RowSelectionChangeProvider>\n        {rows.length === 0 && noRowsFallback ? (\n          noRowsFallback\n        ) : (\n          <>\n            {topSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + rowIdx + 1;\n              const summaryRowIdx = rowIdx + minRowIdx + 1;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top = headerRowHeight + summaryRowHeight * rowIdx;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={gridRowStart}\n                  key={rowIdx}\n                  rowIdx={summaryRowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={undefined}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  isTop\n                  showBorder={rowIdx === topSummaryRowsCount - 1}\n                  selectCell={selectCellLatest}\n                />\n              );\n            })}\n            <RowSelectionChangeProvider value={selectRowLatest}>\n              {getViewportRows()}\n            </RowSelectionChangeProvider>\n            {bottomSummaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n              const summaryRowIdx = rows.length + rowIdx;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top =\n                clientHeight > totalRowHeight\n                  ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx)\n                  : undefined;\n              const bottom =\n                top === undefined\n                  ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx)\n                  : undefined;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={headerAndTopSummaryRowsCount + rowsCount + rowIdx + 1}\n                  key={rowIdx}\n                  rowIdx={summaryRowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={bottom}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  isTop={false}\n                  showBorder={rowIdx === 0}\n                  selectCell={selectCellLatest}\n                />\n              );\n            })}\n          </>\n        )}\n\n        {/* render empty cells that span only 1 column so we can safely measure column widths, regardless of colSpan */}\n        {renderMeasuringCells(viewportColumns)}\n      </DataGridDefaultRenderersProvider>\n    </div>\n  );\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useGridDimensions(): [\n  ref: React.RefObject<HTMLDivElement>,\n  width: number,\n  height: number,\n  isWidthInitialized: boolean\n] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n  const [isWidthInitialized, setWidthInitialized] = useState(false);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jest/jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - offsetHeight + clientHeight;\n\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n    setWidthInitialized(true);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      setInlineSize(size.inlineSize);\n      setBlockSize(size.blockSize);\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize, isWidthInitialized];\n}\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column, Maybe } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { valueFormatter, toggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport { clampColumnWidth, max, min } from '../utils';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 80;\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy: Maybe<readonly string[]>;\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? valueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n    groupBy: readonly string[];\n  } => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        width: rawColumn.width ?? defaultWidth,\n        minWidth: rawColumn.minWidth ?? defaultMinWidth,\n        maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ??= toggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultFormatter,\n    defaultResizable,\n    defaultSortable,\n    rawGroupBy\n  ]);\n\n  const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    templateColumns: readonly string[];\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns: string[] = [];\n\n    for (const column of columns) {\n      let width = columnWidths.get(column.key) ?? column.width;\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        // This is a placeholder width so we can continue to use virtualization.\n        // The actual value is set after the column is rendered\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, { width, left });\n      left += width;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {\n      gridTemplateColumns: templateColumns.join(' ')\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [columnWidths, columns, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n","import { useMemo } from 'react';\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, Maybe, RowHeightArgs } from '../types';\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds: Maybe<ReadonlySet<unknown>>;\n  enableVirtualization: boolean;\n}\n\n// TODO: https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  topSummaryRows: Maybe<readonly SR[]>;\n  bottomSummaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  columnWidths: ReadonlyMap<string, number>;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  columnWidths,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n  const { viewportColumns, flexWidthViewportColumns } = useMemo((): {\n    viewportColumns: readonly CalculatedColumn<R, SR>[];\n    flexWidthViewportColumns: readonly CalculatedColumn<R, SR>[];\n  } => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    const flexWidthViewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n      if (typeof column.width === 'string') {\n        flexWidthViewportColumns.push(column);\n      }\n    }\n\n    return { viewportColumns, flexWidthViewportColumns };\n  }, [startIdx, colOverscanEndIdx, columns]);\n\n  const unsizedFlexWidthViewportColumns = useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    return flexWidthViewportColumns.filter((column) => !columnWidths.has(column.key));\n  }, [flexWidthViewportColumns, columnWidths]);\n\n  return {\n    viewportColumns,\n    flexWidthViewportColumns: unsizedFlexWidthViewportColumns\n  };\n}\n","import { css } from '@linaria/core';\nimport { row } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --rdg-row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  @layer rdg {\n    @layer Defaults,\n      FocusSink,\n      CheckboxInput,\n      CheckboxIcon,\n      CheckboxLabel,\n      Cell,\n      HeaderCell,\n      SummaryCell,\n      EditCell,\n      Row,\n      HeaderRow,\n      SummaryRow,\n      GroupedRow,\n      Root;\n\n    @layer Defaults {\n      *,\n      *::before,\n      *::after {\n        box-sizing: inherit;\n      }\n    }\n\n    @layer Root {\n      ${lightTheme}\n      --rdg-selection-color: #66afe9;\n      --rdg-font-size: 14px;\n\n      display: grid;\n\n      color-scheme: var(--rdg-color-scheme, light dark);\n\n      /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n      /* We set a stacking context so internal elements don't render on top of external elements. */\n      contain: strict;\n      content-visibility: auto;\n      block-size: 350px;\n      border: 1px solid var(--rdg-border-color);\n      box-sizing: border-box;\n      overflow: auto;\n      background-color: var(--rdg-background-color);\n      color: var(--rdg-color);\n      font-size: var(--rdg-font-size);\n\n      /* needed on Firefox */\n      &::before {\n        content: '';\n        grid-column: 1/-1;\n        grid-row: 1/-1;\n      }\n\n      &.rdg-dark {\n        --rdg-color-scheme: dark;\n        ${darkTheme}\n      }\n\n      &.rdg-light {\n        --rdg-color-scheme: light;\n      }\n\n      @media (prefers-color-scheme: dark) {\n        &:not(.rdg-light) {\n          ${darkTheme}\n        }\n      }\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  @layer rdg.Root {\n    user-select: none;\n\n    & .${row} {\n      cursor: move;\n    }\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  @layer rdg.FocusSink {\n    grid-column: 1/-1;\n    pointer-events: none;\n    /* Should have a higher value than 2 to show up above header row */\n    z-index: 3;\n  }\n`;\n","import { cloneElement } from 'react';\nimport type { ReactElement } from 'react';\n\nimport type { DataGridProps } from '../../src';\n\nexport async function exportToCsv<R, SR>(\n  gridElement: ReactElement<DataGridProps<R, SR>>,\n  fileName: string\n) {\n  const { head, body, foot } = await getGridContent(gridElement);\n  const content = [...head, ...body, ...foot]\n    .map((cells) => cells.map(serialiseCellValue).join(','))\n    .join('\\n');\n\n  downloadFile(fileName, new Blob([content], { type: 'text/csv;charset=utf-8;' }));\n}\n\nexport async function exportToXlsx<R, SR>(\n  gridElement: ReactElement<DataGridProps<R, SR>>,\n  fileName: string\n) {\n  const [{ utils, writeFile }, { head, body, foot }] = await Promise.all([\n    import('xlsx'),\n    getGridContent(gridElement)\n  ]);\n  const wb = utils.book_new();\n  const ws = utils.aoa_to_sheet([...head, ...body, ...foot]);\n  utils.book_append_sheet(wb, ws, 'Sheet 1');\n  writeFile(wb, fileName);\n}\n\nexport async function exportToPdf<R, SR>(\n  gridElement: ReactElement<DataGridProps<R, SR>>,\n  fileName: string\n) {\n  const [{ jsPDF }, autoTable, { head, body, foot }] = await Promise.all([\n    import('jspdf'),\n    (await import('jspdf-autotable')).default,\n    await getGridContent(gridElement)\n  ]);\n  const doc = new jsPDF({\n    orientation: 'l',\n    unit: 'px'\n  });\n\n  autoTable(doc, {\n    head,\n    body,\n    foot,\n    horizontalPageBreak: true,\n    styles: { cellPadding: 1.5, fontSize: 8, cellWidth: 'wrap' },\n    tableWidth: 'wrap'\n  });\n  doc.save(fileName);\n}\n\nasync function getGridContent<R, SR>(gridElement: ReactElement<DataGridProps<R, SR>>) {\n  const { renderToStaticMarkup } = await import('react-dom/server');\n  const grid = document.createElement('div');\n  grid.innerHTML = renderToStaticMarkup(\n    cloneElement(gridElement, {\n      enableVirtualization: false\n    })\n  );\n\n  return {\n    head: getRows('.rdg-header-row'),\n    body: getRows('.rdg-row:not(.rdg-summary-row)'),\n    foot: getRows('.rdg-summary-row')\n  };\n\n  function getRows(selector: string) {\n    return Array.from(grid.querySelectorAll<HTMLDivElement>(selector)).map((gridRow) => {\n      return Array.from(gridRow.querySelectorAll<HTMLDivElement>('.rdg-cell')).map(\n        (gridCell) => gridCell.innerText\n      );\n    });\n  }\n}\n\nfunction serialiseCellValue(value: unknown) {\n  if (typeof value === 'string') {\n    const formattedValue = value.replace(/\"/g, '\"\"');\n    return formattedValue.includes(',') ? `\"${formattedValue}\"` : formattedValue;\n  }\n  return value;\n}\n\nfunction downloadFile(fileName: string, data: Blob) {\n  const downloadLink = document.createElement('a');\n  downloadLink.download = fileName;\n  const url = URL.createObjectURL(data);\n  downloadLink.href = url;\n  downloadLink.click();\n  URL.revokeObjectURL(url);\n}\n","import { useState, useMemo } from 'react';\nimport { createPortal } from 'react-dom';\nimport { css } from '@linaria/core';\nimport { faker } from '@faker-js/faker';\n\nimport DataGrid, { SelectColumn, textEditor, SelectCellFormatter } from '../../src';\nimport type { Column, SortColumn } from '../../src';\nimport { exportToCsv, exportToXlsx, exportToPdf } from './exportUtils';\nimport { textEditorClassname } from '../../src/editors/textEditor';\nimport type { Props } from './types';\nimport type { Direction } from '../../src/types';\n\nconst toolbarClassname = css`\n  display: flex;\n  justify-content: flex-end;\n  gap: 8px;\n  margin-block-end: 8px;\n`;\n\nconst dialogContainerClassname = css`\n  position: absolute;\n  inset: 0;\n  display: flex;\n  place-items: center;\n  background: rgba(0, 0, 0, 0.1);\n\n  > dialog {\n    width: 300px;\n    > input {\n      width: 100%;\n    }\n\n    > menu {\n      text-align: end;\n    }\n  }\n`;\n\nconst dateFormatter = new Intl.DateTimeFormat(navigator.language);\nconst currencyFormatter = new Intl.NumberFormat(navigator.language, {\n  style: 'currency',\n  currency: 'eur'\n});\n\nfunction TimestampFormatter({ timestamp }: { timestamp: number }) {\n  return <>{dateFormatter.format(timestamp)}</>;\n}\n\nfunction CurrencyFormatter({ value }: { value: number }) {\n  return <>{currencyFormatter.format(value)}</>;\n}\n\ninterface SummaryRow {\n  id: string;\n  totalCount: number;\n  yesCount: number;\n}\n\ninterface Row {\n  id: number;\n  title: string;\n  client: string;\n  area: string;\n  country: string;\n  contact: string;\n  assignee: string;\n  progress: number;\n  startTimestamp: number;\n  endTimestamp: number;\n  budget: number;\n  transaction: string;\n  account: string;\n  version: string;\n  available: boolean;\n}\n\nfunction getColumns(countries: string[], direction: Direction): readonly Column<Row, SummaryRow>[] {\n  return [\n    SelectColumn,\n    {\n      key: 'id',\n      name: 'ID',\n      width: 60,\n      frozen: true,\n      resizable: false,\n      summaryFormatter() {\n        return <strong>Total</strong>;\n      }\n    },\n    {\n      key: 'title',\n      name: 'Task',\n      width: 120,\n      frozen: true,\n      editor: textEditor,\n      summaryFormatter({ row }) {\n        return <>{row.totalCount} records</>;\n      }\n    },\n    {\n      key: 'client',\n      name: 'Client',\n      width: 'max-content',\n      editor: textEditor\n    },\n    {\n      key: 'area',\n      name: 'Area',\n      width: 120,\n      editor: textEditor\n    },\n    {\n      key: 'country',\n      name: 'Country',\n      width: 180,\n      editor: (p) => (\n        <select\n          autoFocus\n          className={textEditorClassname}\n          value={p.row.country}\n          onChange={(e) => p.onRowChange({ ...p.row, country: e.target.value }, true)}\n        >\n          {countries.map((country) => (\n            <option key={country}>{country}</option>\n          ))}\n        </select>\n      )\n    },\n    {\n      key: 'contact',\n      name: 'Contact',\n      width: 160,\n      editor: textEditor\n    },\n    {\n      key: 'assignee',\n      name: 'Assignee',\n      width: 150,\n      editor: textEditor\n    },\n    {\n      key: 'progress',\n      name: 'Completion',\n      width: 110,\n      formatter(props) {\n        const value = props.row.progress;\n        return (\n          <>\n            <progress max={100} value={value} style={{ inlineSize: 50 }} /> {Math.round(value)}%\n          </>\n        );\n      },\n      editor({ row, onRowChange, onClose }) {\n        return createPortal(\n          <div\n            dir={direction}\n            className={dialogContainerClassname}\n            onKeyDown={(event) => {\n              if (event.key === 'Escape') {\n                onClose();\n              }\n            }}\n          >\n            <dialog open>\n              <input\n                autoFocus\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                value={row.progress}\n                onChange={(e) => onRowChange({ ...row, progress: e.target.valueAsNumber })}\n              />\n              <menu>\n                <button onClick={() => onClose()}>Cancel</button>\n                <button onClick={() => onClose(true)}>Save</button>\n              </menu>\n            </dialog>\n          </div>,\n          document.body\n        );\n      },\n      editorOptions: {\n        renderFormatter: true\n      }\n    },\n    {\n      key: 'startTimestamp',\n      name: 'Start date',\n      width: 100,\n      formatter(props) {\n        return <TimestampFormatter timestamp={props.row.startTimestamp} />;\n      }\n    },\n    {\n      key: 'endTimestamp',\n      name: 'Deadline',\n      width: 100,\n      formatter(props) {\n        return <TimestampFormatter timestamp={props.row.endTimestamp} />;\n      }\n    },\n    {\n      key: 'budget',\n      name: 'Budget',\n      width: 100,\n      formatter(props) {\n        return <CurrencyFormatter value={props.row.budget} />;\n      }\n    },\n    {\n      key: 'transaction',\n      name: 'Transaction type'\n    },\n    {\n      key: 'account',\n      name: 'Account',\n      width: 150\n    },\n    {\n      key: 'version',\n      name: 'Version',\n      editor: textEditor\n    },\n    {\n      key: 'available',\n      name: 'Available',\n      width: 80,\n      formatter({ row, onRowChange, isCellSelected }) {\n        return (\n          <SelectCellFormatter\n            value={row.available}\n            onChange={() => {\n              onRowChange({ ...row, available: !row.available });\n            }}\n            isCellSelected={isCellSelected}\n          />\n        );\n      },\n      summaryFormatter({ row: { yesCount, totalCount } }) {\n        return <>{`${Math.floor((100 * yesCount) / totalCount)}% ✔️`}</>;\n      }\n    }\n  ];\n}\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nfunction createRows(): readonly Row[] {\n  const now = Date.now();\n  const rows: Row[] = [];\n\n  for (let i = 0; i < 1000; i++) {\n    rows.push({\n      id: i,\n      title: `Task #${i + 1}`,\n      client: faker.company.name(),\n      area: faker.name.jobArea(),\n      country: faker.address.country(),\n      contact: faker.internet.exampleEmail(),\n      assignee: faker.name.fullName(),\n      progress: Math.random() * 100,\n      startTimestamp: now - Math.round(Math.random() * 1e10),\n      endTimestamp: now + Math.round(Math.random() * 1e10),\n      budget: 500 + Math.random() * 10500,\n      transaction: faker.finance.transactionType(),\n      account: faker.finance.iban(),\n      version: faker.system.semver(),\n      available: Math.random() > 0.5\n    });\n  }\n\n  return rows;\n}\n\ntype Comparator = (a: Row, b: Row) => number;\nfunction getComparator(sortColumn: string): Comparator {\n  switch (sortColumn) {\n    case 'assignee':\n    case 'title':\n    case 'client':\n    case 'area':\n    case 'country':\n    case 'contact':\n    case 'transaction':\n    case 'account':\n    case 'version':\n      return (a, b) => {\n        return a[sortColumn].localeCompare(b[sortColumn]);\n      };\n    case 'available':\n      return (a, b) => {\n        return a[sortColumn] === b[sortColumn] ? 0 : a[sortColumn] ? 1 : -1;\n      };\n    case 'id':\n    case 'progress':\n    case 'startTimestamp':\n    case 'endTimestamp':\n    case 'budget':\n      return (a, b) => {\n        return a[sortColumn] - b[sortColumn];\n      };\n    default:\n      throw new Error(`unsupported sortColumn: \"${sortColumn}\"`);\n  }\n}\n\nexport default function CommonFeatures({ direction }: Props) {\n  const [rows, setRows] = useState(createRows);\n  const [sortColumns, setSortColumns] = useState<readonly SortColumn[]>([]);\n  const [selectedRows, setSelectedRows] = useState<ReadonlySet<number>>(() => new Set());\n\n  const countries = useMemo(() => {\n    return [...new Set(rows.map((r) => r.country))].sort(new Intl.Collator().compare);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const columns = useMemo(() => getColumns(countries, direction), [countries, direction]);\n\n  const summaryRows = useMemo(() => {\n    const summaryRow: SummaryRow = {\n      id: 'total_0',\n      totalCount: rows.length,\n      yesCount: rows.filter((r) => r.available).length\n    };\n    return [summaryRow];\n  }, [rows]);\n\n  const sortedRows = useMemo((): readonly Row[] => {\n    if (sortColumns.length === 0) return rows;\n\n    return [...rows].sort((a, b) => {\n      for (const sort of sortColumns) {\n        const comparator = getComparator(sort.columnKey);\n        const compResult = comparator(a, b);\n        if (compResult !== 0) {\n          return sort.direction === 'ASC' ? compResult : -compResult;\n        }\n      }\n      return 0;\n    });\n  }, [rows, sortColumns]);\n\n  const gridElement = (\n    <DataGrid\n      rowKeyGetter={rowKeyGetter}\n      columns={columns}\n      rows={sortedRows}\n      defaultColumnOptions={{\n        sortable: true,\n        resizable: true\n      }}\n      selectedRows={selectedRows}\n      onSelectedRowsChange={setSelectedRows}\n      onRowsChange={setRows}\n      sortColumns={sortColumns}\n      onSortColumnsChange={setSortColumns}\n      topSummaryRows={summaryRows}\n      bottomSummaryRows={summaryRows}\n      className=\"fill-grid\"\n      direction={direction}\n    />\n  );\n\n  return (\n    <>\n      <div className={toolbarClassname}>\n        <ExportButton onExport={() => exportToCsv(gridElement, 'CommonFeatures.csv')}>\n          Export to CSV\n        </ExportButton>\n        <ExportButton onExport={() => exportToXlsx(gridElement, 'CommonFeatures.xlsx')}>\n          Export to XSLX\n        </ExportButton>\n        <ExportButton onExport={() => exportToPdf(gridElement, 'CommonFeatures.pdf')}>\n          Export to PDF\n        </ExportButton>\n      </div>\n      {gridElement}\n    </>\n  );\n}\n\nfunction ExportButton({\n  onExport,\n  children\n}: {\n  onExport: () => Promise<unknown>;\n  children: React.ReactChild;\n}) {\n  const [exporting, setExporting] = useState(false);\n  return (\n    <button\n      disabled={exporting}\n      onClick={async () => {\n        setExporting(true);\n        await onExport();\n        setExporting(false);\n      }}\n    >\n      {exporting ? 'Exporting' : children}\n    </button>\n  );\n}\n","import { textEditorClassname } from '../../../../src/editors/textEditor';\nimport type { EditorProps } from '../../../../src';\nimport type { Row } from '../../AllFeatures';\n\nconst titles = ['Dr.', 'Mr.', 'Mrs.', 'Miss', 'Ms.'] as const;\n\nexport default function dropDownEditor({ row, onRowChange }: EditorProps<Row>) {\n  return (\n    <select\n      className={textEditorClassname}\n      value={row.title}\n      onChange={(event) => onRowChange({ ...row, title: event.target.value }, true)}\n      autoFocus\n    >\n      {titles.map((title) => (\n        <option key={title} value={title}>\n          {title}\n        </option>\n      ))}\n    </select>\n  );\n}\n","import { css } from '@linaria/core';\n\nconst wrapperClassname = css`\n  display: flex;\n  justify-content: space-around;\n`;\n\nconst imageCellClassname = css`\n  background: #efefef;\n  background-size: 100%;\n  display: inline-block;\n  block-size: 28px;\n  inline-size: 28px;\n  vertical-align: middle;\n  background-position: center;\n`;\n\ninterface Props {\n  /** image url, used as background-image */\n  value: string;\n}\n\nexport function ImageFormatter({ value }: Props) {\n  return (\n    <div className={wrapperClassname}>\n      <div className={imageCellClassname} style={{ backgroundImage: `url(${value})` }} />\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport { css } from '@linaria/core';\nimport { faker } from '@faker-js/faker';\n\nimport DataGrid, { SelectColumn, textEditor } from '../../src';\nimport type { Column, FillEvent, CopyEvent, PasteEvent } from '../../src';\nimport dropDownEditor from './components/Editors/dropDownEditor';\nimport { ImageFormatter } from './components/Formatters';\nimport type { Props } from './types';\n\nconst highlightClassname = css`\n  .rdg-cell {\n    background-color: #9370db;\n    color: white;\n  }\n\n  &:hover .rdg-cell {\n    background-color: #800080;\n  }\n`;\n\nexport interface Row {\n  id: string;\n  avatar: string;\n  email: string;\n  title: string;\n  firstName: string;\n  lastName: string;\n  street: string;\n  zipCode: string;\n  date: string;\n  bs: string;\n  catchPhrase: string;\n  companyName: string;\n  words: string;\n  sentence: string;\n}\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nconst columns: readonly Column<Row>[] = [\n  SelectColumn,\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80,\n    resizable: true,\n    frozen: true\n  },\n  {\n    key: 'avatar',\n    name: 'Avatar',\n    width: 40,\n    resizable: true,\n    headerRenderer: () => <ImageFormatter value={faker.image.cats()} />,\n    formatter: ({ row }) => <ImageFormatter value={row.avatar} />\n  },\n  {\n    key: 'title',\n    name: 'Title',\n    width: 200,\n    resizable: true,\n    formatter(props) {\n      return <>{props.row.title}</>;\n    },\n    editor: dropDownEditor\n  },\n  {\n    key: 'firstName',\n    name: 'First Name',\n    width: 200,\n    resizable: true,\n    frozen: true,\n    editor: textEditor\n  },\n  {\n    key: 'lastName',\n    name: 'Last Name',\n    width: 200,\n    resizable: true,\n    frozen: true,\n    editor: textEditor\n  },\n  {\n    key: 'email',\n    name: 'Email',\n    width: 'max-content',\n    resizable: true,\n    editor: textEditor\n  },\n  {\n    key: 'street',\n    name: 'Street',\n    width: 200,\n    resizable: true,\n    editor: textEditor\n  },\n  {\n    key: 'zipCode',\n    name: 'ZipCode',\n    width: 200,\n    resizable: true,\n    editor: textEditor\n  },\n  {\n    key: 'date',\n    name: 'Date',\n    width: 200,\n    resizable: true,\n    editor: textEditor\n  },\n  {\n    key: 'bs',\n    name: 'bs',\n    width: 200,\n    resizable: true,\n    editor: textEditor\n  },\n  {\n    key: 'catchPhrase',\n    name: 'Catch Phrase',\n    width: 'max-content',\n    resizable: true,\n    editor: textEditor\n  },\n  {\n    key: 'companyName',\n    name: 'Company Name',\n    width: 200,\n    resizable: true,\n    editor: textEditor\n  },\n  {\n    key: 'sentence',\n    name: 'Sentence',\n    width: 'max-content',\n    resizable: true,\n    editor: textEditor\n  }\n];\n\nfunction createRows(): Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 0; i < 2000; i++) {\n    rows.push({\n      id: `id_${i}`,\n      avatar: faker.image.avatar(),\n      email: faker.internet.email(),\n      title: faker.name.prefix(),\n      firstName: faker.name.firstName(),\n      lastName: faker.name.lastName(),\n      street: faker.address.street(),\n      zipCode: faker.address.zipCode(),\n      date: faker.date.past().toLocaleDateString(),\n      bs: faker.company.bs(),\n      catchPhrase: faker.company.catchPhrase(),\n      companyName: faker.company.name(),\n      words: faker.lorem.words(),\n      sentence: faker.lorem.sentence()\n    });\n  }\n\n  return rows;\n}\n\nexport default function AllFeatures({ direction }: Props) {\n  const [rows, setRows] = useState(createRows);\n  const [selectedRows, setSelectedRows] = useState<ReadonlySet<string>>(() => new Set());\n\n  function handleFill({ columnKey, sourceRow, targetRow }: FillEvent<Row>): Row {\n    return { ...targetRow, [columnKey]: sourceRow[columnKey as keyof Row] };\n  }\n\n  function handlePaste({\n    sourceColumnKey,\n    sourceRow,\n    targetColumnKey,\n    targetRow\n  }: PasteEvent<Row>): Row {\n    const incompatibleColumns = ['email', 'zipCode', 'date'];\n    if (\n      sourceColumnKey === 'avatar' ||\n      ['id', 'avatar'].includes(targetColumnKey) ||\n      ((incompatibleColumns.includes(targetColumnKey) ||\n        incompatibleColumns.includes(sourceColumnKey)) &&\n        sourceColumnKey !== targetColumnKey)\n    ) {\n      return targetRow;\n    }\n\n    return { ...targetRow, [targetColumnKey]: sourceRow[sourceColumnKey as keyof Row] };\n  }\n\n  function handleCopy({ sourceRow, sourceColumnKey }: CopyEvent<Row>): void {\n    if (window.isSecureContext) {\n      navigator.clipboard.writeText(sourceRow[sourceColumnKey as keyof Row]);\n    }\n  }\n\n  return (\n    <DataGrid\n      columns={columns}\n      rows={rows}\n      rowKeyGetter={rowKeyGetter}\n      onRowsChange={setRows}\n      onFill={handleFill}\n      onCopy={handleCopy}\n      onPaste={handlePaste}\n      rowHeight={30}\n      selectedRows={selectedRows}\n      onSelectedRowsChange={setSelectedRows}\n      className=\"fill-grid\"\n      rowClass={(row) => (row.id.includes('7') ? highlightClassname : undefined)}\n      direction={direction}\n      onCellClick={(args, event) => {\n        if (args.column.key === 'title') {\n          event.preventGridDefault();\n          args.selectCell(true);\n        }\n      }}\n    />\n  );\n}\n","import { useState } from 'react';\n\nimport DataGrid from '../../src';\nimport type { Column, CellKeyDownArgs, CellKeyboardEvent } from '../../src';\nimport type { Props } from './types';\n\ninterface Row {\n  id: number;\n  task: string;\n  complete: number;\n  priority: string;\n  issueType: string;\n  startDate: string;\n  completeDate: string;\n}\n\ntype CellNavigationMode = 'NONE' | 'CHANGE_ROW' | 'LOOP_OVER_ROW' | 'LOOP_OVER_COLUMN' | 'NO_TAB';\n\nconst columns: Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80\n  },\n  {\n    key: 'task',\n    name: 'Title'\n  },\n  {\n    key: 'priority',\n    name: 'Priority'\n  },\n  {\n    key: 'issueType',\n    name: 'Issue Type'\n  },\n  {\n    key: 'complete',\n    name: '% Complete'\n  },\n  {\n    key: 'startDate',\n    name: 'Start Date'\n  },\n  {\n    key: 'completeDate',\n    name: 'Expected Complete',\n    width: 200\n  }\n];\n\nfunction getRandomDate(start: Date, end: Date) {\n  return new Date(\n    start.getTime() + Math.random() * (end.getTime() - start.getTime())\n  ).toLocaleDateString();\n}\n\nfunction createRows(): Row[] {\n  const rows = [];\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.floor(Math.random() * 3 + 1)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.floor(Math.random() * 3 + 1)],\n      startDate: getRandomDate(new Date(2015, 3, 1), new Date()),\n      completeDate: getRandomDate(new Date(), new Date(2016, 0, 1))\n    });\n  }\n\n  return rows;\n}\n\nexport default function CellNavigation({ direction }: Props) {\n  const [rows] = useState(createRows);\n  const [cellNavigationMode, setCellNavigationMode] = useState<CellNavigationMode>('CHANGE_ROW');\n\n  function handleCellKeyDown(args: CellKeyDownArgs<Row>, event: CellKeyboardEvent) {\n    if (args.mode === 'EDIT') return;\n    const { column, rowIdx, selectCell } = args;\n    const { idx } = column;\n    const { key, shiftKey } = event;\n\n    const preventDefault = () => {\n      event.preventGridDefault();\n      event.preventDefault();\n    };\n\n    const loopOverNavigation = () => {\n      if ((key === 'ArrowRight' || (key === 'Tab' && !shiftKey)) && idx === columns.length - 1) {\n        selectCell({ rowIdx, idx: 0 });\n        preventDefault();\n      } else if ((key === 'ArrowLeft' || (key === 'Tab' && shiftKey)) && idx === 0) {\n        selectCell({ rowIdx, idx: columns.length - 1 });\n        preventDefault();\n      }\n    };\n\n    const changeRowNavigation = () => {\n      if (key === 'ArrowRight' && idx === columns.length - 1) {\n        if (rows.length === 0) return;\n        if (rowIdx === -1) {\n          selectCell({ rowIdx: 0, idx: 0 });\n        } else {\n          if (rowIdx === rows.length - 1) return;\n          selectCell({ rowIdx: rowIdx + 1, idx: 0 });\n        }\n        preventDefault();\n      } else if (key === 'ArrowLeft' && idx === 0) {\n        if (rowIdx === -1) return;\n        selectCell({ rowIdx: rowIdx - 1, idx: columns.length - 1 });\n        preventDefault();\n      }\n    };\n\n    const loopOverColumnNavigation = () => {\n      let newRowIdx: number;\n      if (rowIdx === -1) {\n        newRowIdx = shiftKey ? rows.length - 1 : 0;\n      } else {\n        newRowIdx = shiftKey ? rowIdx - 1 : rowIdx === rows.length - 1 ? -1 : rowIdx + 1;\n      }\n      selectCell({ rowIdx: newRowIdx, idx });\n      preventDefault();\n    };\n\n    if (cellNavigationMode === 'LOOP_OVER_ROW') {\n      loopOverNavigation();\n    } else if (cellNavigationMode === 'CHANGE_ROW') {\n      changeRowNavigation();\n    } else if (cellNavigationMode === 'LOOP_OVER_COLUMN' && key === 'Tab') {\n      loopOverColumnNavigation();\n    } else if (cellNavigationMode === 'NO_TAB' && key === 'Tab') {\n      // Need to allow default event to focus the next element\n      event.preventGridDefault();\n    }\n  }\n\n  return (\n    <>\n      <div style={{ marginBlockEnd: 5 }}>\n        Cell Navigation Modes:\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'NONE'}\n            onChange={() => setCellNavigationMode('NONE')}\n          />\n          None\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'CHANGE_ROW'}\n            onChange={() => setCellNavigationMode('CHANGE_ROW')}\n          />\n          Change Row\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'LOOP_OVER_ROW'}\n            onChange={() => setCellNavigationMode('LOOP_OVER_ROW')}\n          />\n          Loop Over Row\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'LOOP_OVER_COLUMN'}\n            onChange={() => setCellNavigationMode('LOOP_OVER_COLUMN')}\n          />\n          Loop Over Column\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"mode\"\n            checked={cellNavigationMode === 'NO_TAB'}\n            onChange={() => setCellNavigationMode('NO_TAB')}\n          />\n          No Tab\n        </label>\n      </div>\n      <DataGrid\n        columns={columns}\n        rows={rows}\n        direction={direction}\n        onCellKeyDown={handleCellKeyDown}\n      />\n    </>\n  );\n}\n","import { useMemo } from 'react';\nimport { css } from '@linaria/core';\n\nimport DataGrid from '../../src';\nimport type { Column, FormatterProps } from '../../src';\nimport type { Props } from './types';\n\ntype Row = number;\nconst rows: readonly Row[] = [...Array(100).keys()];\n\nconst colSpanClassname = css`\n  background-color: #ffb300;\n  color: black;\n  text-align: center;\n`;\n\nfunction cellFormatter(props: FormatterProps<Row>) {\n  return (\n    <>\n      {props.column.key}&times;{props.row}\n    </>\n  );\n}\n\nexport default function ColumnSpanning({ direction }: Props) {\n  const columns = useMemo((): readonly Column<Row>[] => {\n    const columns: Column<Row>[] = [];\n\n    for (let i = 0; i < 30; i++) {\n      const key = String(i);\n      columns.push({\n        key,\n        name: key,\n        frozen: i < 5,\n        resizable: true,\n        formatter: cellFormatter,\n        colSpan(args) {\n          if (args.type === 'ROW') {\n            if (key === '2' && args.row === 2) return 3;\n            if (key === '4' && args.row === 4) return 6; // Will not work as colspan includes both frozen and regular columns\n            if (key === '0' && args.row === 5) return 5;\n            if (key === '27' && args.row === 8) return 3;\n            if (key === '6' && args.row < 8) return 2;\n          }\n          if (args.type === 'HEADER' && key === '8') {\n            return 3;\n          }\n          return undefined;\n        },\n        cellClass(row) {\n          if (\n            (key === '0' && row === 5) ||\n            (key === '2' && row === 2) ||\n            (key === '27' && row === 8) ||\n            (key === '6' && row < 8)\n          ) {\n            return colSpanClassname;\n          }\n          return undefined;\n        }\n      });\n    }\n\n    return columns;\n  }, []);\n\n  return (\n    <DataGrid\n      columns={columns}\n      rows={rows}\n      rowHeight={22}\n      className=\"fill-grid\"\n      direction={direction}\n    />\n  );\n}\n","import { useDrag, useDrop } from 'react-dnd';\n\nimport { headerRenderer } from '../../../../src';\nimport type { HeaderRendererProps } from '../../../../src';\n\ninterface DraggableHeaderRendererProps<R> extends HeaderRendererProps<R> {\n  onColumnsReorder: (sourceKey: string, targetKey: string) => void;\n}\n\nexport function DraggableHeaderRenderer<R>({\n  onColumnsReorder,\n  column,\n  ...props\n}: DraggableHeaderRendererProps<R>) {\n  const [{ isDragging }, drag] = useDrag({\n    type: 'COLUMN_DRAG',\n    item: { key: column.key },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n\n  const [{ isOver }, drop] = useDrop({\n    accept: 'COLUMN_DRAG',\n    drop({ key }: { key: string }) {\n      onColumnsReorder(key, column.key);\n    },\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  });\n\n  return (\n    <div\n      ref={(ref) => {\n        drag(ref);\n        drop(ref);\n      }}\n      style={{\n        opacity: isDragging ? 0.5 : 1,\n        backgroundColor: isOver ? '#ececec' : undefined,\n        cursor: 'move'\n      }}\n    >\n      {headerRenderer({ column, ...props })}\n    </div>\n  );\n}\n","import { useState, useMemo, useCallback } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nimport { DraggableHeaderRenderer } from './components/HeaderRenderers';\nimport DataGrid from '../../src';\nimport type { Column, HeaderRendererProps, SortColumn } from '../../src';\nimport type { Props } from './types';\n\ninterface Row {\n  readonly id: number;\n  readonly task: string;\n  readonly complete: number;\n  readonly priority: string;\n  readonly issueType: string;\n}\n\nfunction createRows(): Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.round(Math.random() * 3)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.round(Math.random() * 3)]\n    });\n  }\n\n  return rows;\n}\n\nfunction createColumns(): Column<Row>[] {\n  return [\n    {\n      key: 'id',\n      name: 'ID',\n      width: 80\n    },\n    {\n      key: 'task',\n      name: 'Title',\n      resizable: true,\n      sortable: true\n    },\n    {\n      key: 'priority',\n      name: 'Priority',\n      resizable: true,\n      sortable: true\n    },\n    {\n      key: 'issueType',\n      name: 'Issue Type',\n      resizable: true,\n      sortable: true\n    },\n    {\n      key: 'complete',\n      name: '% Complete',\n      resizable: true,\n      sortable: true\n    }\n  ];\n}\n\nexport default function ColumnsReordering({ direction }: Props) {\n  const [rows] = useState(createRows);\n  const [columns, setColumns] = useState(createColumns);\n  const [sortColumns, setSortColumns] = useState<readonly SortColumn[]>([]);\n  const onSortColumnsChange = useCallback((sortColumns: SortColumn[]) => {\n    setSortColumns(sortColumns.slice(-1));\n  }, []);\n\n  const draggableColumns = useMemo(() => {\n    function headerRenderer(props: HeaderRendererProps<Row>) {\n      return <DraggableHeaderRenderer {...props} onColumnsReorder={handleColumnsReorder} />;\n    }\n\n    function handleColumnsReorder(sourceKey: string, targetKey: string) {\n      const sourceColumnIndex = columns.findIndex((c) => c.key === sourceKey);\n      const targetColumnIndex = columns.findIndex((c) => c.key === targetKey);\n      const reorderedColumns = [...columns];\n\n      reorderedColumns.splice(\n        targetColumnIndex,\n        0,\n        reorderedColumns.splice(sourceColumnIndex, 1)[0]\n      );\n\n      setColumns(reorderedColumns);\n    }\n\n    return columns.map((c) => {\n      if (c.key === 'id') return c;\n      return { ...c, headerRenderer };\n    });\n  }, [columns]);\n\n  const sortedRows = useMemo((): readonly Row[] => {\n    if (sortColumns.length === 0) return rows;\n    const { columnKey, direction } = sortColumns[0];\n\n    let sortedRows: Row[] = [...rows];\n\n    switch (columnKey) {\n      case 'task':\n      case 'priority':\n      case 'issueType':\n        sortedRows = sortedRows.sort((a, b) => a[columnKey].localeCompare(b[columnKey]));\n        break;\n      case 'complete':\n        sortedRows = sortedRows.sort((a, b) => a[columnKey] - b[columnKey]);\n        break;\n      default:\n    }\n    return direction === 'DESC' ? sortedRows.reverse() : sortedRows;\n  }, [rows, sortColumns]);\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <DataGrid\n        columns={draggableColumns}\n        rows={sortedRows}\n        sortColumns={sortColumns}\n        onSortColumnsChange={onSortColumnsChange}\n        direction={direction}\n        defaultColumnOptions={{ width: '1fr' }}\n      />\n    </DndProvider>\n  );\n}\n","import { useMemo, useState } from 'react';\nimport { css } from '@linaria/core';\n\nimport DataGrid, { SelectColumn, textEditor } from '../../src';\nimport type { Column, CheckboxFormatterProps, SortColumn, SortStatusProps } from '../../src';\nimport type { Props } from './types';\n\nconst selectCellClassname = css`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  > input {\n    margin: 0;\n  }\n`;\n\nconst sortPriorityClassname = css`\n  color: grey;\n  margin-left: 2px;\n`;\n\ninterface Row {\n  id: number;\n  task: string;\n  complete: number;\n  priority: string;\n  issueType: string;\n}\n\nfunction createRows(): readonly Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.round(Math.random() * 3)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.round(Math.random() * 3)]\n    });\n  }\n\n  return rows;\n}\n\nconst columns: readonly Column<Row>[] = [\n  {\n    ...SelectColumn,\n    headerCellClass: selectCellClassname,\n    cellClass: selectCellClassname\n  },\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80\n  },\n  {\n    key: 'task',\n    name: 'Title',\n    editor: textEditor,\n    sortable: true\n  },\n  {\n    key: 'priority',\n    name: 'Priority',\n    sortable: true\n  },\n  {\n    key: 'issueType',\n    name: 'Issue Type',\n    sortable: true\n  },\n  {\n    key: 'complete',\n    name: '% Complete',\n    sortable: true\n  }\n];\n\nexport default function CustomizableRenderers({ direction }: Props) {\n  const [rows, setRows] = useState(createRows);\n  const [sortColumns, setSortColumns] = useState<readonly SortColumn[]>([]);\n  const [selectedRows, setSelectedRows] = useState<ReadonlySet<number>>(() => new Set());\n\n  const sortedRows = useMemo((): readonly Row[] => {\n    if (sortColumns.length === 0) return rows;\n\n    return [...rows].sort((a, b) => {\n      for (const sort of sortColumns) {\n        const comparator = getComparator(sort.columnKey);\n        const compResult = comparator(a, b);\n        if (compResult !== 0) {\n          return sort.direction === 'ASC' ? compResult : -compResult;\n        }\n      }\n      return 0;\n    });\n  }, [rows, sortColumns]);\n\n  return (\n    <DataGrid\n      className=\"fill-grid\"\n      columns={columns}\n      rows={sortedRows}\n      rowKeyGetter={rowKeyGetter}\n      onRowsChange={setRows}\n      sortColumns={sortColumns}\n      onSortColumnsChange={setSortColumns}\n      selectedRows={selectedRows}\n      onSelectedRowsChange={setSelectedRows}\n      renderers={{ sortStatus, checkboxFormatter }}\n      direction={direction}\n    />\n  );\n}\n\nfunction checkboxFormatter(\n  { onChange, ...props }: CheckboxFormatterProps,\n  ref: React.RefObject<HTMLInputElement>\n) {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return <input type=\"checkbox\" ref={ref} {...props} onChange={handleChange} />;\n}\n\nfunction sortStatus({ sortDirection, priority }: SortStatusProps) {\n  return (\n    <>\n      {sortDirection !== undefined ? (sortDirection === 'ASC' ? '\\u2B9D' : '\\u2B9F') : null}\n      <span className={sortPriorityClassname}>{priority}</span>\n    </>\n  );\n}\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\ntype Comparator = (a: Row, b: Row) => number;\nfunction getComparator(sortColumn: string): Comparator {\n  switch (sortColumn) {\n    case 'task':\n    case 'priority':\n    case 'issueType':\n      return (a, b) => {\n        return a[sortColumn].localeCompare(b[sortColumn]);\n      };\n    case 'complete':\n      return (a, b) => {\n        return a[sortColumn] - b[sortColumn];\n      };\n    default:\n      throw new Error(`unsupported sortColumn: \"${sortColumn}\"`);\n  }\n}\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useState, useReducer, useRef, useLayoutEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { css } from '@linaria/core';\nimport { faker } from '@faker-js/faker';\n\nimport DataGrid from '../../src';\nimport type { Column } from '../../src';\nimport type { Props } from './types';\n\nconst contextMenuClassname = css`\n  position: absolute;\n  background-color: #ffffff;\n  border: 1px solid black;\n  padding: 16px;\n  list-style: none;\n\n  > li {\n    padding: 8px;\n  }\n`;\n\ninterface Row {\n  id: number;\n  product: string;\n  price: string;\n}\n\nfunction createRows(): Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 1; i < 1000; i++) {\n    rows.push({\n      id: i,\n      product: faker.commerce.productName(),\n      price: faker.commerce.price()\n    });\n  }\n\n  return rows;\n}\n\nconst columns: readonly Column<Row>[] = [\n  { key: 'id', name: 'ID' },\n  { key: 'product', name: 'Product' },\n  { key: 'price', name: 'Price' }\n];\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nexport default function ContextMenuDemo({ direction }: Props) {\n  const [rows, setRows] = useState(createRows);\n  const [nextId, setNextId] = useReducer((id: number) => id + 1, rows[rows.length - 1].id + 1);\n  const [contextMenuProps, setContextMenuProps] = useState<{\n    rowIdx: number;\n    top: number;\n    left: number;\n  } | null>(null);\n  const menuRef = useRef<HTMLMenuElement | null>(null);\n  const isContextMenuOpen = contextMenuProps !== null;\n\n  useLayoutEffect(() => {\n    if (!isContextMenuOpen) return;\n\n    function onClick(event: MouseEvent) {\n      if (event.target instanceof Node && menuRef.current?.contains(event.target)) {\n        return;\n      }\n      setContextMenuProps(null);\n    }\n\n    addEventListener('click', onClick);\n\n    return () => {\n      removeEventListener('click', onClick);\n    };\n  }, [isContextMenuOpen]);\n\n  function insertRow(insertRowIdx: number) {\n    const newRow: Row = {\n      id: nextId,\n      product: faker.commerce.productName(),\n      price: faker.commerce.price()\n    };\n\n    setRows([...rows.slice(0, insertRowIdx), newRow, ...rows.slice(insertRowIdx)]);\n    setNextId();\n  }\n\n  return (\n    <>\n      <DataGrid\n        rowKeyGetter={rowKeyGetter}\n        columns={columns}\n        rows={rows}\n        className=\"fill-grid\"\n        direction={direction}\n        onCellContextMenu={({ row }, event) => {\n          event.preventGridDefault();\n          // Do not show the default context menu\n          event.preventDefault();\n          setContextMenuProps({\n            rowIdx: rows.indexOf(row),\n            top: event.clientY,\n            left: event.clientX\n          });\n        }}\n      />\n      {isContextMenuOpen &&\n        createPortal(\n          <menu\n            ref={menuRef}\n            className={contextMenuClassname}\n            style={\n              {\n                top: contextMenuProps.top,\n                left: contextMenuProps.left\n              } as unknown as React.CSSProperties\n            }\n          >\n            <li>\n              <button\n                onClick={() => {\n                  const { rowIdx } = contextMenuProps;\n                  setRows([...rows.slice(0, rowIdx), ...rows.slice(rowIdx + 1)]);\n                  setContextMenuProps(null);\n                }}\n              >\n                Delete Row\n              </button>\n            </li>\n            <li>\n              <button\n                onClick={() => {\n                  const { rowIdx } = contextMenuProps;\n                  insertRow(rowIdx);\n                  setContextMenuProps(null);\n                }}\n              >\n                Insert Row Above\n              </button>\n            </li>\n            <li>\n              <button\n                onClick={() => {\n                  const { rowIdx } = contextMenuProps;\n                  insertRow(rowIdx + 1);\n                  setContextMenuProps(null);\n                }}\n              >\n                Insert Row Below\n              </button>\n            </li>\n          </menu>,\n          document.body\n        )}\n    </>\n  );\n}\n","import { useState } from 'react';\nimport { groupBy as rowGrouper } from 'lodash';\nimport { css } from '@linaria/core';\nimport { faker } from '@faker-js/faker';\n\nimport DataGrid, { SelectColumn } from '../../src';\nimport type { Column } from '../../src';\nimport type { Props } from './types';\n\nconst groupingClassname = css`\n  display: flex;\n  flex-direction: column;\n  block-size: 100%;\n  gap: 8px;\n\n  > .rdg {\n    flex: 1;\n  }\n`;\n\nconst optionsClassname = css`\n  display: flex;\n  gap: 8px;\n  text-transform: capitalize;\n`;\n\ninterface Row {\n  id: number;\n  country: string;\n  year: number;\n  sport: string;\n  athlete: string;\n  gold: number;\n  silver: number;\n  bronze: number;\n}\n\nconst sports = [\n  'Swimming',\n  'Gymnastics',\n  'Speed Skating',\n  'Cross Country Skiing',\n  'Short-Track Speed Skating',\n  'Diving',\n  'Cycling',\n  'Biathlon',\n  'Alpine Skiing',\n  'Ski Jumping',\n  'Nordic Combined',\n  'Athletics',\n  'Table Tennis',\n  'Tennis',\n  'Synchronized Swimming',\n  'Shooting',\n  'Rowing',\n  'Fencing',\n  'Equestrian',\n  'Canoeing',\n  'Bobsleigh',\n  'Badminton',\n  'Archery',\n  'Wrestling',\n  'Weightlifting',\n  'Waterpolo',\n  'Wrestling',\n  'Weightlifting'\n];\n\nconst columns: readonly Column<Row>[] = [\n  SelectColumn,\n  {\n    key: 'country',\n    name: 'Country'\n  },\n  {\n    key: 'year',\n    name: 'Year'\n  },\n  {\n    key: 'sport',\n    name: 'Sport'\n  },\n  {\n    key: 'athlete',\n    name: 'Athlete'\n  },\n  {\n    key: 'gold',\n    name: 'Gold',\n    groupFormatter({ childRows }) {\n      return <>{childRows.reduce((prev, { gold }) => prev + gold, 0)}</>;\n    }\n  },\n  {\n    key: 'silver',\n    name: 'Silver',\n    groupFormatter({ childRows }) {\n      return <>{childRows.reduce((prev, { silver }) => prev + silver, 0)}</>;\n    }\n  },\n  {\n    key: 'bronze',\n    name: 'Bronze',\n    groupFormatter({ childRows }) {\n      return <>{childRows.reduce((prev, { silver }) => prev + silver, 0)}</>;\n    }\n  },\n  {\n    key: 'total',\n    name: 'Total',\n    formatter({ row }) {\n      return <>{row.gold + row.silver + row.bronze}</>;\n    },\n    groupFormatter({ childRows }) {\n      return <>{childRows.reduce((prev, row) => prev + row.gold + row.silver + row.bronze, 0)}</>;\n    }\n  }\n];\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nfunction createRows(): readonly Row[] {\n  const rows: Row[] = [];\n  for (let i = 1; i < 10000; i++) {\n    rows.push({\n      id: i,\n      year: 2015 + faker.datatype.number(3),\n      country: faker.address.country(),\n      sport: sports[faker.datatype.number(sports.length - 1)],\n      athlete: faker.name.fullName(),\n      gold: faker.datatype.number(5),\n      silver: faker.datatype.number(5),\n      bronze: faker.datatype.number(5)\n    });\n  }\n\n  return rows.sort((r1, r2) => r2.country.localeCompare(r1.country));\n}\n\nconst options = ['country', 'year', 'sport', 'athlete'] as const;\n\nexport default function Grouping({ direction }: Props) {\n  const [rows] = useState(createRows);\n  const [selectedRows, setSelectedRows] = useState<ReadonlySet<number>>(() => new Set());\n  const [selectedOptions, setSelectedOptions] = useState<readonly string[]>([\n    options[0],\n    options[1]\n  ]);\n  const [expandedGroupIds, setExpandedGroupIds] = useState<ReadonlySet<unknown>>(\n    () => new Set<unknown>(['United States of America', 'United States of America__2015'])\n  );\n\n  function toggleOption(option: string, enabled: boolean) {\n    const index = selectedOptions.indexOf(option);\n    if (enabled) {\n      if (index === -1) {\n        setSelectedOptions((options) => [...options, option]);\n      }\n    } else if (index !== -1) {\n      setSelectedOptions((options) => {\n        const newOptions = [...options];\n        newOptions.splice(index, 1);\n        return newOptions;\n      });\n    }\n    setExpandedGroupIds(new Set());\n  }\n\n  return (\n    <div className={groupingClassname}>\n      <b>Group by columns:</b>\n      <div className={optionsClassname}>\n        {options.map((option) => (\n          <label key={option}>\n            <input\n              type=\"checkbox\"\n              checked={selectedOptions.includes(option)}\n              onChange={(event) => toggleOption(option, event.target.checked)}\n            />{' '}\n            {option}\n          </label>\n        ))}\n      </div>\n\n      <DataGrid\n        columns={columns}\n        rows={rows}\n        rowKeyGetter={rowKeyGetter}\n        selectedRows={selectedRows}\n        onSelectedRowsChange={setSelectedRows}\n        groupBy={selectedOptions}\n        rowGrouper={rowGrouper}\n        expandedGroupIds={expandedGroupIds}\n        onExpandedGroupIdsChange={setExpandedGroupIds}\n        defaultColumnOptions={{ resizable: true }}\n        direction={direction}\n      />\n    </div>\n  );\n}\n","import { createContext, useContext, useMemo, useState } from 'react';\nimport { css } from '@linaria/core';\nimport { faker } from '@faker-js/faker';\n\nimport DataGrid, { useFocusRef } from '../../src';\nimport type { Column, HeaderRendererProps } from '../../src';\nimport type { Omit } from '../../src/types';\nimport type { Props } from './types';\n\nconst rootClassname = css`\n  display: flex;\n  flex-direction: column;\n  block-size: 100%;\n  gap: 10px;\n\n  > .rdg {\n    flex: 1;\n  }\n`;\n\nconst toolbarClassname = css`\n  text-align: end;\n`;\n\nconst filterColumnClassName = 'filter-cell';\n\nconst filterContainerClassname = css`\n  .${filterColumnClassName} {\n    line-height: 35px;\n    padding: 0;\n\n    > div {\n      padding-block: 0;\n      padding-inline: 8px;\n\n      &:first-child {\n        border-block-end: 1px solid var(--rdg-border-color);\n      }\n    }\n  }\n`;\n\nconst filterClassname = css`\n  inline-size: 100%;\n  padding: 4px;\n  font-size: 14px;\n`;\n\ninterface Row {\n  id: number;\n  task: string;\n  priority: string;\n  issueType: string;\n  developer: string;\n  complete: number;\n}\n\ninterface Filter extends Omit<Row, 'id' | 'complete'> {\n  complete: number | undefined;\n  enabled: boolean;\n}\n\n// Context is needed to read filter values otherwise columns are\n// re-created when filters are changed and filter loses focus\nconst FilterContext = createContext<Filter | undefined>(undefined);\n\nfunction inputStopPropagation(event: React.KeyboardEvent<HTMLInputElement>) {\n  if (['ArrowLeft', 'ArrowRight'].includes(event.key)) {\n    event.stopPropagation();\n  }\n}\n\nfunction selectStopPropagation(event: React.KeyboardEvent<HTMLSelectElement>) {\n  if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n    event.stopPropagation();\n  }\n}\n\nexport default function HeaderFilters({ direction }: Props) {\n  const [rows] = useState(createRows);\n  const [filters, setFilters] = useState<Filter>({\n    task: '',\n    priority: 'Critical',\n    issueType: 'All',\n    developer: '',\n    complete: undefined,\n    enabled: true\n  });\n\n  const developerOptions = useMemo(\n    () =>\n      Array.from(new Set(rows.map((r) => r.developer))).map((d) => ({\n        label: d,\n        value: d\n      })),\n    [rows]\n  );\n\n  const columns = useMemo((): readonly Column<Row>[] => {\n    return [\n      {\n        key: 'id',\n        name: 'ID',\n        width: 50\n      },\n      {\n        key: 'task',\n        name: 'Title',\n        headerCellClass: filterColumnClassName,\n        headerRenderer: (p) => (\n          <FilterRenderer<Row, unknown, HTMLInputElement> {...p}>\n            {({ filters, ...rest }) => (\n              <input\n                {...rest}\n                className={filterClassname}\n                value={filters.task}\n                onChange={(e) =>\n                  setFilters({\n                    ...filters,\n                    task: e.target.value\n                  })\n                }\n                onKeyDown={inputStopPropagation}\n              />\n            )}\n          </FilterRenderer>\n        )\n      },\n      {\n        key: 'priority',\n        name: 'Priority',\n        headerCellClass: filterColumnClassName,\n        headerRenderer: (p) => (\n          <FilterRenderer<Row, unknown, HTMLSelectElement> {...p}>\n            {({ filters, ...rest }) => (\n              <select\n                {...rest}\n                className={filterClassname}\n                value={filters.priority}\n                onChange={(e) =>\n                  setFilters({\n                    ...filters,\n                    priority: e.target.value\n                  })\n                }\n                onKeyDown={selectStopPropagation}\n              >\n                <option value=\"All\">All</option>\n                <option value=\"Critical\">Critical</option>\n                <option value=\"High\">High</option>\n                <option value=\"Medium\">Medium</option>\n                <option value=\"Low\">Low</option>\n              </select>\n            )}\n          </FilterRenderer>\n        )\n      },\n      {\n        key: 'issueType',\n        name: 'Issue Type',\n        headerCellClass: filterColumnClassName,\n        headerRenderer: (p) => (\n          <FilterRenderer<Row, unknown, HTMLSelectElement> {...p}>\n            {({ filters, ...rest }) => (\n              <select\n                {...rest}\n                className={filterClassname}\n                value={filters.issueType}\n                onChange={(e) =>\n                  setFilters({\n                    ...filters,\n                    issueType: e.target.value\n                  })\n                }\n                onKeyDown={selectStopPropagation}\n              >\n                <option value=\"All\">All</option>\n                <option value=\"Bug\">Bug</option>\n                <option value=\"Improvement\">Improvement</option>\n                <option value=\"Epic\">Epic</option>\n                <option value=\"Story\">Story</option>\n              </select>\n            )}\n          </FilterRenderer>\n        )\n      },\n      {\n        key: 'developer',\n        name: 'Developer',\n        headerCellClass: filterColumnClassName,\n        headerRenderer: (p) => (\n          <FilterRenderer<Row, unknown, HTMLInputElement> {...p}>\n            {({ filters, ...rest }) => (\n              <input\n                {...rest}\n                className={filterClassname}\n                value={filters.developer}\n                onChange={(e) =>\n                  setFilters({\n                    ...filters,\n                    developer: e.target.value\n                  })\n                }\n                onKeyDown={inputStopPropagation}\n                list=\"developers\"\n              />\n            )}\n          </FilterRenderer>\n        )\n      },\n      {\n        key: 'complete',\n        name: '% Complete',\n        headerCellClass: filterColumnClassName,\n        headerRenderer: (p) => (\n          <FilterRenderer<Row, unknown, HTMLInputElement> {...p}>\n            {({ filters, ...rest }) => (\n              <input\n                {...rest}\n                type=\"number\"\n                className={filterClassname}\n                value={filters.complete}\n                onChange={(e) =>\n                  setFilters({\n                    ...filters,\n                    complete: Number.isFinite(e.target.valueAsNumber)\n                      ? e.target.valueAsNumber\n                      : undefined\n                  })\n                }\n                onKeyDown={inputStopPropagation}\n              />\n            )}\n          </FilterRenderer>\n        )\n      }\n    ];\n  }, []);\n\n  const filteredRows = useMemo(() => {\n    return rows.filter((r) => {\n      return (\n        (filters.task ? r.task.includes(filters.task) : true) &&\n        (filters.priority !== 'All' ? r.priority === filters.priority : true) &&\n        (filters.issueType !== 'All' ? r.issueType === filters.issueType : true) &&\n        (filters.developer\n          ? r.developer.toLowerCase().startsWith(filters.developer.toLowerCase())\n          : true) &&\n        (filters.complete !== undefined ? r.complete >= filters.complete : true)\n      );\n    });\n  }, [rows, filters]);\n\n  function clearFilters() {\n    setFilters({\n      task: '',\n      priority: 'All',\n      issueType: 'All',\n      developer: '',\n      complete: undefined,\n      enabled: true\n    });\n  }\n\n  function toggleFilters() {\n    setFilters((filters) => ({\n      ...filters,\n      enabled: !filters.enabled\n    }));\n  }\n\n  return (\n    <div className={rootClassname}>\n      <div className={toolbarClassname}>\n        <button type=\"button\" onClick={toggleFilters}>\n          Toggle Filters\n        </button>{' '}\n        <button type=\"button\" onClick={clearFilters}>\n          Clear Filters\n        </button>\n      </div>\n      <FilterContext.Provider value={filters}>\n        <DataGrid\n          className={filters.enabled ? filterContainerClassname : undefined}\n          columns={columns}\n          rows={filteredRows}\n          headerRowHeight={filters.enabled ? 70 : undefined}\n          direction={direction}\n        />\n      </FilterContext.Provider>\n      <datalist id=\"developers\">\n        {developerOptions.map(({ label, value }) => (\n          <option key={value} value={value}>\n            {label}\n          </option>\n        ))}\n      </datalist>\n    </div>\n  );\n}\n\nfunction FilterRenderer<R, SR, T extends HTMLOrSVGElement>({\n  isCellSelected,\n  column,\n  children\n}: HeaderRendererProps<R, SR> & {\n  children: (args: {\n    ref: React.RefObject<T>;\n    tabIndex: number;\n    filters: Filter;\n  }) => React.ReactElement;\n}) {\n  const filters = useContext(FilterContext)!;\n  const { ref, tabIndex } = useFocusRef<T>(isCellSelected);\n\n  return (\n    <>\n      <div>{column.name}</div>\n      {filters.enabled && <div>{children({ ref, tabIndex, filters })}</div>}\n    </>\n  );\n}\n\nfunction createRows() {\n  const rows: Row[] = [];\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.floor(Math.random() * 4)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.floor(Math.random() * 4)],\n      developer: faker.name.fullName()\n    });\n  }\n  return rows;\n}\n","import { useState } from 'react';\nimport { css } from '@linaria/core';\nimport { faker } from '@faker-js/faker';\n\nimport DataGrid from '../../src';\nimport type { Column } from '../../src';\nimport type { Props } from './types';\n\nconst loadMoreRowsClassname = css`\n  inline-size: 180px;\n  padding-block: 8px;\n  padding-inline: 16px;\n  position: absolute;\n  inset-block-end: 8px;\n  inset-inline-end: 8px;\n  color: white;\n  line-height: 35px;\n  background: rgb(0 0 0 / 0.6);\n`;\n\ninterface Row {\n  id: string;\n  email: string;\n  title: string;\n  firstName: string;\n  lastName: string;\n}\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nconst columns: readonly Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID'\n  },\n  {\n    key: 'title',\n    name: 'Title'\n  },\n  {\n    key: 'firstName',\n    name: 'First Name'\n  },\n  {\n    key: 'lastName',\n    name: 'Last Name'\n  },\n  {\n    key: 'email',\n    name: 'Email'\n  }\n];\n\nfunction createFakeRowObjectData(index: number): Row {\n  return {\n    id: `id_${index}`,\n    email: faker.internet.email(),\n    title: faker.name.prefix(),\n    firstName: faker.name.firstName(),\n    lastName: faker.name.lastName()\n  };\n}\n\nfunction createRows(numberOfRows: number): Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 0; i < numberOfRows; i++) {\n    rows[i] = createFakeRowObjectData(i);\n  }\n\n  return rows;\n}\n\nfunction isAtBottom({ currentTarget }: React.UIEvent<HTMLDivElement>): boolean {\n  return currentTarget.scrollTop + 10 >= currentTarget.scrollHeight - currentTarget.clientHeight;\n}\n\nfunction loadMoreRows(newRowsCount: number, length: number): Promise<Row[]> {\n  return new Promise((resolve) => {\n    const newRows: Row[] = [];\n\n    for (let i = 0; i < newRowsCount; i++) {\n      newRows[i] = createFakeRowObjectData(i + length);\n    }\n\n    setTimeout(() => resolve(newRows), 1000);\n  });\n}\n\nexport default function InfiniteScrolling({ direction }: Props) {\n  const [rows, setRows] = useState(() => createRows(50));\n  const [isLoading, setIsLoading] = useState(false);\n\n  async function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    if (isLoading || !isAtBottom(event)) return;\n\n    setIsLoading(true);\n\n    const newRows = await loadMoreRows(50, rows.length);\n\n    setRows([...rows, ...newRows]);\n    setIsLoading(false);\n  }\n\n  return (\n    <>\n      <DataGrid\n        columns={columns}\n        rows={rows}\n        rowKeyGetter={rowKeyGetter}\n        onRowsChange={setRows}\n        rowHeight={30}\n        onScroll={handleScroll}\n        className=\"fill-grid\"\n        direction={direction}\n      />\n      {isLoading && <div className={loadMoreRowsClassname}>Loading more rows...</div>}\n    </>\n  );\n}\n","import { css } from '@linaria/core';\nimport { useFocusRef } from '../../../../src';\n\nconst cellExpandClassname = css`\n  /* needed on chrome */\n  float: right;\n  float: inline-end;\n  display: table;\n  block-size: 100%;\n\n  > span {\n    display: table-cell;\n    vertical-align: middle;\n    cursor: pointer;\n  }\n`;\n\ninterface CellExpanderFormatterProps {\n  isCellSelected: boolean;\n  expanded: boolean;\n  onCellExpand: () => void;\n}\n\nexport function CellExpanderFormatter({\n  isCellSelected,\n  expanded,\n  onCellExpand\n}: CellExpanderFormatterProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(e: React.KeyboardEvent<HTMLSpanElement>) {\n    if (e.key === ' ' || e.key === 'Enter') {\n      e.preventDefault();\n      onCellExpand();\n    }\n  }\n\n  return (\n    <div className={cellExpandClassname}>\n      <span onClick={onCellExpand} onKeyDown={handleKeyDown}>\n        <span ref={ref} tabIndex={tabIndex}>\n          {expanded ? '\\u25BC' : '\\u25B6'}\n        </span>\n      </span>\n    </div>\n  );\n}\n","import { useEffect, useMemo, useRef, useState } from 'react';\nimport { css } from '@linaria/core';\nimport { faker } from '@faker-js/faker';\n\nimport DataGrid from '../../src';\nimport type { Column, RowsChangeData, DataGridHandle } from '../../src';\nimport { CellExpanderFormatter } from './components/Formatters';\nimport type { Props } from './types';\nimport type { Direction } from '../../src/types';\n\ntype DepartmentRow =\n  | {\n      type: 'MASTER';\n      id: number;\n      department: string;\n      expanded: boolean;\n    }\n  | {\n      type: 'DETAIL';\n      id: number;\n      parentId: number;\n    };\n\ninterface ProductRow {\n  id: number;\n  product: string;\n  description: string;\n  price: string;\n}\n\nfunction createDepartments(): readonly DepartmentRow[] {\n  const departments: DepartmentRow[] = [];\n  for (let i = 1; i < 30; i++) {\n    departments.push({\n      type: 'MASTER',\n      id: i,\n      department: faker.commerce.department(),\n      expanded: false\n    });\n  }\n  return departments;\n}\n\nconst productsMap = new Map<number, readonly ProductRow[]>();\nfunction getProducts(parentId: number): readonly ProductRow[] {\n  if (productsMap.has(parentId)) return productsMap.get(parentId)!;\n  const products: ProductRow[] = [];\n  for (let i = 0; i < 20; i++) {\n    products.push({\n      id: i,\n      product: faker.commerce.productName(),\n      description: faker.commerce.productDescription(),\n      price: faker.commerce.price()\n    });\n  }\n  productsMap.set(parentId, products);\n  return products;\n}\n\nconst productColumns: readonly Column<ProductRow>[] = [\n  { key: 'id', name: 'ID', width: 35 },\n  { key: 'product', name: 'Product' },\n  { key: 'description', name: 'Description' },\n  { key: 'price', name: 'Price' }\n];\n\nexport default function MasterDetail({ direction }: Props) {\n  const columns = useMemo((): readonly Column<DepartmentRow>[] => {\n    return [\n      {\n        key: 'expanded',\n        name: '',\n        minWidth: 30,\n        width: 30,\n        colSpan(args) {\n          return args.type === 'ROW' && args.row.type === 'DETAIL' ? 3 : undefined;\n        },\n        cellClass(row) {\n          return row.type === 'DETAIL'\n            ? css`\n                padding: 24px;\n              `\n            : undefined;\n        },\n        formatter({ row, isCellSelected, onRowChange }) {\n          if (row.type === 'DETAIL') {\n            return (\n              <ProductGrid\n                isCellSelected={isCellSelected}\n                parentId={row.parentId}\n                direction={direction}\n              />\n            );\n          }\n\n          return (\n            <CellExpanderFormatter\n              expanded={row.expanded}\n              isCellSelected={isCellSelected}\n              onCellExpand={() => {\n                onRowChange({ ...row, expanded: !row.expanded });\n              }}\n            />\n          );\n        }\n      },\n      { key: 'id', name: 'ID', width: 35 },\n      { key: 'department', name: 'Department' }\n    ];\n  }, [direction]);\n  const [rows, setRows] = useState(createDepartments);\n\n  function onRowsChange(rows: DepartmentRow[], { indexes }: RowsChangeData<DepartmentRow>) {\n    const row = rows[indexes[0]];\n    if (row.type === 'MASTER') {\n      if (row.expanded) {\n        rows.splice(indexes[0] + 1, 0, {\n          type: 'DETAIL',\n          id: row.id + 100,\n          parentId: row.id\n        });\n      } else {\n        rows.splice(indexes[0] + 1, 1);\n      }\n      setRows(rows);\n    }\n  }\n\n  return (\n    <DataGrid\n      rowKeyGetter={rowKeyGetter}\n      columns={columns}\n      rows={rows}\n      onRowsChange={onRowsChange}\n      headerRowHeight={45}\n      rowHeight={(args) => (args.type === 'ROW' && args.row.type === 'DETAIL' ? 300 : 45)}\n      className=\"fill-grid\"\n      enableVirtualization={false}\n      direction={direction}\n      onCellKeyDown={(_, event) => {\n        if (event.isDefaultPrevented()) {\n          // skip parent grid keyboard navigation if nested grid handled it\n          event.preventGridDefault();\n        }\n      }}\n    />\n  );\n}\n\nfunction ProductGrid({\n  parentId,\n  isCellSelected,\n  direction\n}: {\n  parentId: number;\n  isCellSelected: boolean;\n  direction: Direction;\n}) {\n  const gridRef = useRef<DataGridHandle>(null);\n  useEffect(() => {\n    if (!isCellSelected) return;\n    gridRef\n      .current!.element!.querySelector<HTMLDivElement>('[tabindex=\"0\"]')!\n      .focus({ preventScroll: true });\n  }, [isCellSelected]);\n  const products = getProducts(parentId);\n\n  return (\n    <DataGrid\n      ref={gridRef}\n      rows={products}\n      columns={productColumns}\n      rowKeyGetter={rowKeyGetter}\n      style={{ blockSize: 250 }}\n      direction={direction}\n    />\n  );\n}\n\nfunction rowKeyGetter(row: DepartmentRow | ProductRow) {\n  return row.id;\n}\n","import { useMemo } from 'react';\nimport DataGrid from '../../src';\nimport type { Column, FormatterProps } from '../../src';\nimport type { Props } from './types';\n\ntype Row = number;\nconst rows: readonly Row[] = [...Array(1000).keys()];\n\nfunction cellFormatter(props: FormatterProps<Row>) {\n  return (\n    <>\n      {props.column.key}&times;{props.row}\n    </>\n  );\n}\n\nexport default function MillionCells({ direction }: Props) {\n  const columns = useMemo((): readonly Column<Row>[] => {\n    const columns: Column<Row>[] = [];\n\n    for (let i = 0; i < 1000; i++) {\n      const key = String(i);\n      columns.push({\n        key,\n        name: key,\n        frozen: i < 5,\n        width: 80,\n        resizable: true,\n        formatter: cellFormatter\n      });\n    }\n\n    return columns;\n  }, []);\n\n  return (\n    <DataGrid\n      columns={columns}\n      rows={rows}\n      rowHeight={22}\n      className=\"fill-grid\"\n      direction={direction}\n    />\n  );\n}\n","import { useState } from 'react';\nimport { css } from '@linaria/core';\n\nimport DataGrid, { SelectColumn } from '../../src';\nimport type { Column } from '../../src';\nimport type { Props } from './types';\n\nconst gridClassname = css`\n  block-size: 300px;\n`;\n\nfunction EmptyRowsRenderer() {\n  return (\n    <div style={{ textAlign: 'center', gridColumn: '1/-1' }}>\n      Nothing to show{' '}\n      <span lang=\"ja\" title=\"ショボーン\">\n        (´・ω・`)\n      </span>\n    </div>\n  );\n}\n\ninterface Row {\n  id: number;\n  title: string;\n  count: number;\n}\n\nconst columns: readonly Column<Row>[] = [\n  SelectColumn,\n  { key: 'id', name: 'ID' },\n  { key: 'title', name: 'Title' },\n  { key: 'count', name: 'Count' }\n];\n\nconst rows: readonly Row[] = [];\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nexport default function NoRows({ direction }: Props) {\n  const [selectedRows, onSelectedRowsChange] = useState((): ReadonlySet<number> => new Set());\n\n  return (\n    <DataGrid\n      columns={columns}\n      rows={rows}\n      renderers={{ noRowsFallback: <EmptyRowsRenderer /> }}\n      selectedRows={selectedRows}\n      onSelectedRowsChange={onSelectedRowsChange}\n      rowKeyGetter={rowKeyGetter}\n      className={gridClassname}\n      direction={direction}\n    />\n  );\n}\n","import DataGrid from '../../src';\nimport type { Column, FormatterProps } from '../../src';\nimport type { Props } from './types';\n\ntype Row = number;\nconst rows: readonly Row[] = [...Array(100).keys()];\n\nfunction cellFormatter(props: FormatterProps<Row>) {\n  return (\n    <>\n      {props.column.key}&times;{props.row}\n    </>\n  );\n}\n\nconst columns: Column<Row>[] = [];\n\nfor (let i = 0; i < 50; i++) {\n  const key = String(i);\n  columns.push({\n    key,\n    name: key,\n    formatter: cellFormatter\n  });\n}\n\nexport default function ResizableGrid({ direction }: Props) {\n  return (\n    <DataGrid\n      columns={columns}\n      rows={rows}\n      className=\"fill-grid\"\n      style={{ resize: 'both' }}\n      direction={direction}\n    />\n  );\n}\n","import { useDrag, useDrop } from 'react-dnd';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { Row } from '../../../../src';\nimport type { RowRendererProps } from '../../../../src';\n\nconst rowDraggingClassname = css`\n  opacity: 0.5;\n`;\n\nconst rowOverClassname = css`\n  background-color: #ececec;\n`;\n\ninterface DraggableRowRenderProps<R, SR> extends RowRendererProps<R, SR> {\n  onRowReorder: (sourceIndex: number, targetIndex: number) => void;\n}\n\nexport function DraggableRowRenderer<R, SR>({\n  rowIdx,\n  isRowSelected,\n  className,\n  onRowReorder,\n  ...props\n}: DraggableRowRenderProps<R, SR>) {\n  const [{ isDragging }, drag] = useDrag({\n    type: 'ROW_DRAG',\n    item: { index: rowIdx },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n\n  const [{ isOver }, drop] = useDrop({\n    accept: 'ROW_DRAG',\n    drop({ index }: { index: number }) {\n      onRowReorder(index, rowIdx);\n    },\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  });\n\n  className = clsx(className, {\n    [rowDraggingClassname]: isDragging,\n    [rowOverClassname]: isOver\n  });\n\n  return (\n    <Row\n      ref={(ref) => {\n        if (ref) {\n          drag(ref.firstElementChild);\n        }\n        drop(ref);\n      }}\n      rowIdx={rowIdx}\n      isRowSelected={isRowSelected}\n      className={className}\n      {...props}\n    />\n  );\n}\n","import { useCallback, useState } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\n\nimport { DraggableRowRenderer } from './components/RowRenderers';\nimport DataGrid, { textEditor } from '../../src';\nimport type { Column, RowRendererProps } from '../../src';\nimport type { Props } from './types';\n\ninterface Row {\n  id: number;\n  task: string;\n  complete: number;\n  priority: string;\n  issueType: string;\n}\n\nfunction createRows(): readonly Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.round(Math.random() * 3)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.round(Math.random() * 3)]\n    });\n  }\n\n  return rows;\n}\n\nconst columns: readonly Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80\n  },\n  {\n    key: 'task',\n    name: 'Title',\n    editor: textEditor\n  },\n  {\n    key: 'priority',\n    name: 'Priority'\n  },\n  {\n    key: 'issueType',\n    name: 'Issue Type'\n  },\n  {\n    key: 'complete',\n    name: '% Complete'\n  }\n];\n\nexport default function RowsReordering({ direction }: Props) {\n  const [rows, setRows] = useState(createRows);\n\n  const rowRenderer = useCallback((key: React.Key, props: RowRendererProps<Row>) => {\n    function onRowReorder(fromIndex: number, toIndex: number) {\n      setRows((rows) => {\n        const newRows = [...rows];\n        newRows.splice(toIndex, 0, newRows.splice(fromIndex, 1)[0]);\n        return newRows;\n      });\n    }\n\n    return <DraggableRowRenderer key={key} {...props} onRowReorder={onRowReorder} />;\n  }, []);\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <DataGrid\n        columns={columns}\n        rows={rows}\n        onRowsChange={setRows}\n        renderers={{ rowRenderer }}\n        direction={direction}\n      />\n    </DndProvider>\n  );\n}\n","import { useState, useRef } from 'react';\nimport DataGrid from '../../src';\nimport type { Column, DataGridHandle } from '../../src';\nimport type { Props } from './types';\n\ninterface Row {\n  id: number;\n  title: string;\n  count: number;\n}\n\nconst columns: readonly Column<Row>[] = [\n  { key: 'id', name: 'ID' },\n  { key: 'title', name: 'Title' },\n  { key: 'count', name: 'Count' }\n];\n\nexport default function ScrollToRow({ direction }: Props) {\n  const [rows] = useState(() => {\n    const rows: Row[] = [];\n\n    for (let i = 0; i < 1000; i++) {\n      rows.push({\n        id: i,\n        title: `Title ${i}`,\n        count: i * 1000\n      });\n    }\n\n    return rows;\n  });\n  const [value, setValue] = useState(10);\n  const gridRef = useRef<DataGridHandle>(null);\n\n  return (\n    <>\n      <div style={{ marginBlockEnd: 5 }}>\n        <span style={{ marginInlineEnd: 5 }}>Row index: </span>\n        <input\n          style={{ inlineSize: 50 }}\n          type=\"number\"\n          value={value}\n          onChange={(event) => setValue(event.target.valueAsNumber)}\n        />\n        <button type=\"button\" onClick={() => gridRef.current!.scrollToRow(value)}>\n          Scroll to row\n        </button>\n      </div>\n      <DataGrid ref={gridRef} columns={columns} rows={rows} direction={direction} />\n    </>\n  );\n}\n","import { css } from '@linaria/core';\nimport { useFocusRef } from '../../../../src';\n\nconst childRowActionCrossClassname = css`\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    background: grey;\n  }\n\n  &::before {\n    inset-inline-start: 21px;\n    inline-size: 1px;\n    block-size: 100%;\n  }\n\n  &::after {\n    inset-block-start: 50%;\n    inset-inline-start: 20px;\n    block-size: 1px;\n    inline-size: 15px;\n  }\n\n  &:hover {\n    background: red;\n  }\n`;\n\nconst childRowButtonClassname = css`\n  cursor: pointer;\n  position: absolute;\n  inset-inline-start: 21px;\n  transform: translateX(-50%);\n  filter: grayscale(1);\n  &:dir(rtl) {\n    transform: translateX(50%);\n  }\n`;\n\ninterface ChildRowDeleteButtonProps {\n  isCellSelected: boolean;\n  isDeleteSubRowEnabled: boolean;\n  onDeleteSubRow: () => void;\n}\n\nexport function ChildRowDeleteButton({\n  isCellSelected,\n  onDeleteSubRow,\n  isDeleteSubRowEnabled\n}: ChildRowDeleteButtonProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(e: React.KeyboardEvent<HTMLSpanElement>) {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      onDeleteSubRow();\n    }\n  }\n\n  return (\n    <>\n      <div className={childRowActionCrossClassname} />\n      {isDeleteSubRowEnabled && (\n        <div className={childRowButtonClassname} onClick={onDeleteSubRow}>\n          <span ref={ref} tabIndex={tabIndex} onKeyDown={handleKeyDown}>\n            ❌\n          </span>\n        </div>\n      )}\n    </>\n  );\n}\n","import { useState, useReducer, useMemo } from 'react';\nimport { css } from '@linaria/core';\n\nimport DataGrid from '../../src';\nimport type { Column } from '../../src';\nimport { CellExpanderFormatter, ChildRowDeleteButton } from './components/Formatters';\nimport type { Props } from './types';\n\nconst gridClassname = css`\n  block-size: 600px;\n`;\n\ninterface Row {\n  id: string;\n  name: string;\n  format: string;\n  position: string;\n  price: number;\n  children?: Row[];\n  parentId?: string;\n  isExpanded?: boolean;\n}\n\ninterface Action {\n  type: 'toggleSubRow' | 'deleteSubRow';\n  id: string;\n}\n\nfunction createRows(): Row[] {\n  const rows = [];\n  for (let i = 0; i < 100; i++) {\n    const price = Math.random() * 30;\n    const id = `row${i}`;\n    const row: Row = {\n      id,\n      name: `supplier ${i}`,\n      format: `package ${i}`,\n      position: 'Run of site',\n      price,\n      children: [\n        {\n          id: `${id}-0`,\n          parentId: id,\n          name: `supplier ${i}`,\n          format: '728x90',\n          position: 'run of site',\n          price: price / 2\n        },\n        {\n          id: `${id}-1`,\n          parentId: id,\n          name: `supplier ${i}`,\n          format: '480x600',\n          position: 'run of site',\n          price: price * 0.25\n        },\n        {\n          id: `${id}-2`,\n          parentId: id,\n          name: `supplier ${i}`,\n          format: '328x70',\n          position: 'run of site',\n          price: price * 0.25\n        }\n      ],\n      isExpanded: false\n    };\n    rows.push(row);\n  }\n  return rows;\n}\n\nfunction toggleSubRow(rows: Row[], id: string): Row[] {\n  const rowIndex = rows.findIndex((r) => r.id === id);\n  const row = rows[rowIndex];\n  const { children } = row;\n  if (!children) return rows;\n\n  const newRows = [...rows];\n  newRows[rowIndex] = { ...row, isExpanded: !row.isExpanded };\n  if (row.isExpanded) {\n    newRows.splice(rowIndex + 1, children.length);\n  } else {\n    newRows.splice(rowIndex + 1, 0, ...children);\n  }\n  return newRows;\n}\n\nfunction deleteSubRow(rows: Row[], id: string): Row[] {\n  const row = rows.find((r) => r.id === id);\n  if (row?.parentId === undefined) return rows;\n\n  // Remove sub row from flattened rows.\n  const newRows = rows.filter((r) => r.id !== id);\n\n  // Remove sub row from parent row.\n  const parentRowIndex = newRows.findIndex((r) => r.id === row.parentId);\n  const { children } = newRows[parentRowIndex];\n  if (children) {\n    const newChildren = children.filter((sr) => sr.id !== id);\n    newRows[parentRowIndex] = { ...newRows[parentRowIndex], children: newChildren };\n  }\n\n  return newRows;\n}\n\nfunction reducer(rows: Row[], { type, id }: Action): Row[] {\n  switch (type) {\n    case 'toggleSubRow':\n      return toggleSubRow(rows, id);\n    case 'deleteSubRow':\n      return deleteSubRow(rows, id);\n    default:\n      return rows;\n  }\n}\n\nconst defaultRows = createRows();\n\nexport default function TreeView({ direction }: Props) {\n  const [rows, dispatch] = useReducer(reducer, defaultRows);\n  const [allowDelete, setAllowDelete] = useState(true);\n  const columns: Column<Row>[] = useMemo(() => {\n    return [\n      {\n        key: 'id',\n        name: 'id',\n        frozen: true\n      },\n      {\n        key: 'name',\n        name: 'Name'\n      },\n      {\n        key: 'format',\n        name: 'format',\n        formatter({ row, isCellSelected }) {\n          const hasChildren = row.children !== undefined;\n          const style = hasChildren ? undefined : { marginInlineStart: 30 };\n          return (\n            <>\n              {hasChildren && (\n                <CellExpanderFormatter\n                  isCellSelected={isCellSelected}\n                  expanded={row.isExpanded === true}\n                  onCellExpand={() => dispatch({ id: row.id, type: 'toggleSubRow' })}\n                />\n              )}\n              <div className=\"rdg-cell-value\">\n                {!hasChildren && (\n                  <ChildRowDeleteButton\n                    isCellSelected={isCellSelected}\n                    isDeleteSubRowEnabled={allowDelete}\n                    onDeleteSubRow={() => dispatch({ id: row.id, type: 'deleteSubRow' })}\n                  />\n                )}\n                <div style={style}>{row.format}</div>\n              </div>\n            </>\n          );\n        }\n      },\n      {\n        key: 'position',\n        name: 'position'\n      },\n      {\n        key: 'price',\n        name: 'price'\n      }\n    ];\n  }, [allowDelete]);\n\n  return (\n    <>\n      <label>\n        Allow Delete\n        <input\n          type=\"checkbox\"\n          checked={allowDelete}\n          onChange={() => setAllowDelete(!allowDelete)}\n        />\n      </label>\n      <DataGrid columns={columns} rows={rows} className={gridClassname} direction={direction} />\n    </>\n  );\n}\n","import { useMemo } from 'react';\n\nimport DataGrid from '../../src';\nimport type { Column, FormatterProps } from '../../src';\nimport type { Props } from './types';\n\ntype Row = number;\nconst rows: readonly Row[] = [...Array(500).keys()];\n\nfunction cellFormatter(props: FormatterProps<Row>) {\n  return (\n    <>\n      {props.column.key}&times;{props.row}\n    </>\n  );\n}\n\nexport default function VariableRowHeight({ direction }: Props) {\n  const columns = useMemo((): readonly Column<Row>[] => {\n    const columns: Column<Row>[] = [];\n\n    for (let i = 0; i < 30; i++) {\n      const key = String(i);\n      columns.push({\n        key,\n        name: key,\n        frozen: i < 5,\n        resizable: true,\n        formatter: cellFormatter\n      });\n    }\n\n    return columns;\n  }, []);\n\n  return (\n    <DataGrid\n      columns={columns}\n      rows={rows}\n      rowHeight={rowHeight}\n      className=\"fill-grid\"\n      direction={direction}\n    />\n  );\n}\n\nfunction rowHeight() {\n  // should be based on the content of the row\n  return 25 + Math.round(Math.random() * 75);\n}\n","import { useState } from 'react';\nimport { css } from '@linaria/core';\n\nimport DataGrid from '../../src';\nimport type { Column } from '../../src';\nimport type { Props } from './types';\n\nconst rangeClassname = css`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 8px;\n`;\n\nconst transitionClassname = css`\n  transition: grid-template-rows 0.5s ease;\n\n  > :is(.rdg-header-row, .rdg-row) {\n    transition: line-height 0.5s ease;\n  }\n`;\n\ninterface Row {\n  readonly id: number;\n  readonly task: string;\n  readonly complete: number;\n  readonly priority: string;\n  readonly issueType: string;\n}\n\nfunction createRows(): Row[] {\n  const rows: Row[] = [];\n\n  for (let i = 1; i < 500; i++) {\n    rows.push({\n      id: i,\n      task: `Task ${i}`,\n      complete: Math.min(100, Math.round(Math.random() * 110)),\n      priority: ['Critical', 'High', 'Medium', 'Low'][Math.round(Math.random() * 3)],\n      issueType: ['Bug', 'Improvement', 'Epic', 'Story'][Math.round(Math.random() * 3)]\n    });\n  }\n\n  return rows;\n}\n\nconst columns: Column<Row>[] = [\n  {\n    key: 'id',\n    name: 'ID',\n    width: 80\n  },\n  {\n    key: 'task',\n    name: 'Title',\n    resizable: true\n  },\n  {\n    key: 'priority',\n    name: 'Priority',\n    resizable: true\n  },\n  {\n    key: 'issueType',\n    name: 'Issue Type',\n    resizable: true\n  },\n  {\n    key: 'complete',\n    name: '% Complete',\n    resizable: true\n  }\n];\n\nconst rows = createRows();\n\nexport default function ColumnsReordering({ direction }: Props) {\n  const [rowHeight, setRowHeight] = useState(30);\n\n  return (\n    <>\n      <div className={rangeClassname}>\n        Row Height\n        <button onClick={() => setRowHeight(30)}>Small</button>\n        <button onClick={() => setRowHeight(60)}>Medium</button>\n        <button onClick={() => setRowHeight(90)}>Large</button>\n      </div>\n      <DataGrid\n        className={`${transitionClassname} fill-grid`}\n        columns={columns}\n        rows={rows}\n        direction={direction}\n        rowHeight={rowHeight}\n      />\n    </>\n  );\n}\n","import './root.css';\nimport { StrictMode, useState } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { css } from '@linaria/core';\nimport { HashRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\n\nimport type { Direction } from '../src/types';\nimport Nav from './Nav';\n\nimport CommonFeatures from './demos/CommonFeatures';\nimport AllFeatures from './demos/AllFeatures';\nimport CellNavigation from './demos/CellNavigation';\nimport ColumnSpanning from './demos/ColumnSpanning';\nimport ColumnsReordering from './demos/ColumnsReordering';\nimport CustomizableRenderers from './demos/CustomizableRenderers';\nimport ContextMenuDemo from './demos/ContextMenu';\nimport Grouping from './demos/Grouping';\nimport HeaderFilters from './demos/HeaderFilters';\nimport InfiniteScrolling from './demos/InfiniteScrolling';\nimport MasterDetail from './demos/MasterDetail';\nimport MillionCells from './demos/MillionCells';\nimport NoRows from './demos/NoRows';\nimport ResizableGrid from './demos/Resizable';\nimport RowsReordering from './demos/RowsReordering';\nimport ScrollToRow from './demos/ScrollToRow';\nimport TreeView from './demos/TreeView';\nimport VariableRowHeight from './demos/VariableRowHeight';\nimport Animation from './demos/Animation';\n\nconst mainClassname = css`\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  block-size: 100vh;\n  padding: 8px;\n  overflow: hidden;\n`;\n\nfunction Root() {\n  const [direction, setDirection] = useState<Direction>('ltr');\n  return (\n    <Router>\n      <Nav direction={direction} onDirectionChange={setDirection} />\n      <main className={mainClassname} dir={direction}>\n        <Routes>\n          <Route index element={<Navigate to=\"common-features\" replace />} />\n          <Route path=\"common-features\" element={<CommonFeatures direction={direction} />} />\n          <Route path=\"all-features\" element={<AllFeatures direction={direction} />} />\n          <Route path=\"cell-navigation\" element={<CellNavigation direction={direction} />} />\n          <Route path=\"column-spanning\" element={<ColumnSpanning direction={direction} />} />\n          <Route path=\"columns-reordering\" element={<ColumnsReordering direction={direction} />} />\n          <Route path=\"context-menu\" element={<ContextMenuDemo direction={direction} />} />\n          <Route\n            path=\"customizable-renderers\"\n            element={<CustomizableRenderers direction={direction} />}\n          />\n          <Route path=\"grouping\" element={<Grouping direction={direction} />} />\n          <Route path=\"header-filters\" element={<HeaderFilters direction={direction} />} />\n          <Route path=\"infinite-scrolling\" element={<InfiniteScrolling direction={direction} />} />\n          <Route path=\"master-detail\" element={<MasterDetail direction={direction} />} />\n          <Route path=\"million-cells\" element={<MillionCells direction={direction} />} />\n          <Route path=\"no-rows\" element={<NoRows direction={direction} />} />\n          <Route path=\"resizable-grid\" element={<ResizableGrid direction={direction} />} />\n          <Route path=\"rows-reordering\" element={<RowsReordering direction={direction} />} />\n          <Route path=\"scroll-to-row\" element={<ScrollToRow direction={direction} />} />\n          <Route path=\"tree-view\" element={<TreeView direction={direction} />} />\n          <Route path=\"variable-row-height\" element={<VariableRowHeight direction={direction} />} />\n          <Route path=\"animation\" element={<Animation direction={direction} />} />\n          <Route path=\"*\" element=\"Nothing to see here\" />\n        </Routes>\n      </main>\n    </Router>\n  );\n}\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <Root />\n  </StrictMode>\n);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + {\"105\":\"61e55a8c00071c4252bf\",\"120\":\"b639b2ce9b732b17f227\",\"159\":\"c298eb1c329079dfd56d\",\"168\":\"15ac6746d3a1c7cc37cc\",\"392\":\"78974ecd5a4e72d10a37\",\"762\":\"3d14eebdda7b3c46b936\",\"856\":\"b73e6e389acd56063121\"}[chunkId] + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = globalThis[\"webpackChunkreact_data_grid\"] = globalThis[\"webpackChunkreact_data_grid\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [23], () => (__webpack_require__(3504)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","inProgress","dataWebpackPrefix","navClassname","activeNavClassname","rtlCheckboxClassname","Nav","direction","onDirectionChange","_jsxs","className","children","_jsx","NavLink","to","end","getActiveClassname","href","target","rel","type","checked","onChange","isActive","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","useFocusRef","isSelected","ref","useRef","current","focus","preventScroll","tabIndex","DataGridDefaultRenderersContext","createContext","undefined","DataGridDefaultRenderersProvider","Provider","useDefaultRenderers","useContext","SelectCellFormatter","value","isCellSelected","disabled","ariaLabel","ariaLabelledBy","checkboxFormatter","_Fragment","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","Error","SELECT_COLUMN_KEY","HeaderRenderer","props","isRowSelected","onRowSelectionChange","SelectFormatter","isShiftClick","row","SelectGroupFormatter","SelectColumn","key","name","width","minWidth","maxWidth","resizable","sortable","frozen","headerRenderer","formatter","groupFormatter","textEditorClassname","autoFocusAndSelect","input","select","textEditor","column","onRowChange","onClose","event","onBlur","rowClassname","rowSelectedClassname","valueFormatter","groupCellContentClassname","caretClassname","toggleGroupFormatter","ToggleGroup","groupKey","isExpanded","toggleGroup","d","onKeyDown","viewBox","height","min","max","round","floor","sign","abs","Math","assertIsValidKeyGetter","keyGetter","clampColumnWidth","getColSpan","lastFrozenColumnIndex","args","colSpan","Number","isInteger","idx","useLatestFunc","fn","callbackFn","useCallback","headerSortCellClassname","headerSortNameClassname","sortDirection","priority","onSort","SortableHeaderCell","sortStatus","onClick","ctrlKey","metaKey","preventDefault","cellClassname","cellFrozenClassname","cellFrozenLastClassname","getRowStyle","rowIdx","getCellStyle","gridColumnStart","gridColumnEnd","insetInlineStart","getCellClassname","extraClasses","clsx","isLastFrozenColumn","scrollIntoView","element","inline","block","useRovingCellRef","skipCellFocusRef","isChildFocused","setIsChildFocused","useState","cell","contains","document","activeElement","onFocus","currentTarget","cellResizableClassname","HeaderCell","onColumnResize","sortColumns","onSortColumnsChange","selectCell","shouldFocusGrid","isRtl","sortIndex","findIndex","sort","columnKey","sortColumn","length","ariaSort","headerCellClass","defaultHeaderRenderer","role","style","onDoubleClick","right","left","getBoundingClientRect","clientX","onPointerDown","pointerType","buttons","pointerId","offset","onPointerMove","setPointerCapture","addEventListener","onLostPointerCapture","removeEventListener","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","HeaderRow","columns","selectedCellIdx","cells","index","push","memo","isSelectedCellEditable","selectedPosition","rows","isGroupRow","isCellEditable","editor","rowGroup","editable","getSelectedCellColSpan","topSummaryRows","bottomSummaryRows","topSummaryRowsCount","minRowIdx","createCellEvent","defaultPrevented","cellEvent","preventGridDefault","isGridDefaultPrevented","Object","setPrototypeOf","getPrototypeOf","Cell","isCopied","isDraggedOver","dragHandle","onContextMenu","cellClass","isEditable","selectCellWrapper","openEditor","newRow","Row","gridRowStart","copiedCellIdx","draggedOverCellIdx","viewportColumns","selectedCellEditor","selectedCellDragHandle","onCellClick","onCellDoubleClick","onCellContextMenu","rowClass","setDraggedOverRowIdx","onMouseEnter","handleRowChange","RowComponent","forwardRef","defaultRowRenderer","GroupCell","id","childRows","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","GroupedRow","level","selectGroup","map","SummaryCell","summaryCellClass","summaryFormatter","SummaryRow","top","bottom","isTop","showBorder","ariaRowIndex","nonInputKeys","Set","isCtrlKeyHeldDown","e","cellEditing","EditCell","closeEditor","navigate","frameRequestRef","commitOnOutsideClick","editorOptions","commitOnOutsideMouseDown","cancelFrameRequest","cancelAnimationFrame","commitChanges","onWindowCaptureMouseDown","requestAnimationFrame","capture","renderFormatter","mode","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","onEditorNavigation","onMouseDownCapture","cellDragHandleClassname","DragHandle","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","updateRows","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","i","updatedRow","targetRow","onMouseDown","onMouseOver","onMouseUp","overRowIdx","handleDragEnd","stopPropagation","arrowClassname","sortIcon","sortPriority","checkboxLabelClassname","checkboxInputClassname","checkboxClassname","checkboxLabelDisabledClassname","nativeEvent","shiftKey","measuringCellClassname","renderMeasuringCells","DataGrid","rawColumns","rawRows","rowKeyGetter","rowHeight","rawRowHeight","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","defaultColumnOptions","groupBy","rawGroupBy","rowGrouper","expandedGroupIds","onExpandedGroupIdsChange","onCellKeyDown","onScroll","onCopy","onPaste","enableVirtualization","rawEnableVirtualization","renderers","rawDirection","ariaDescribedBy","testId","defaultRenderers","rowRenderer","defaultSortStatus","defaultCheckboxFormatter","noRowsFallback","bottomSummaryRowsCount","summaryRowsCount","headerAndTopSummaryRowsCount","scrollTop","setScrollTop","scrollLeft","setScrollLeft","columnWidths","setColumnWidths","Map","setSelectedPosition","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","prevSelectedPosition","lastSelectedRowIdx","rowRef","gridRef","gridWidth","gridHeight","isWidthInitialized","inlineSize","setInlineSize","blockSize","setBlockSize","setWidthInitialized","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","initialHeight","resizeObserver","entries","size","contentBoxSize","observe","disconnect","useGridDimensions","isSelectable","leftKey","rightKey","defaultGridComponents","useMemo","allRowsSelected","every","has","colSpanColumns","colOverscanStartIdx","colOverscanEndIdx","templateColumns","layoutCssVars","columnMetrics","totalFrozenColumnWidth","viewportWidth","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultFormatter","defaultSortable","defaultResizable","rawColumn","includes","aKey","frozenA","bKey","frozenB","indexOf","forEach","get","set","columnMetric","gridTemplateColumns","join","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useCalculatedColumns","rowOverscanStartIdx","rowOverscanEndIdx","rowsCount","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","groupedRows","groupRows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childGroups","childRowsCount","allGroupRows","flattenedRows","expandGroup","parentId","arr","Array","isArray","keys","posInSet","groupRow","setSize","add","rowPositions","currentRowHeight","position","validateRowIdx","start","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","useViewportRows","flexWidthViewportColumns","startIdx","updateStartIdx","colIdx","filter","useViewportColumns","hasGroups","minColIdx","maxColIdx","maxRowIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","handleColumnResizeLatest","newTemplateColumns","measuredWidth","querySelector","measuredWidthPx","newColumnWidths","onSortColumnsChangeLatest","onCellClickLatest","onCellDoubleClickLatest","onCellContextMenuLatest","selectRowLatest","selectRow","handleFormatterRowChangeLatest","updateRow","selectCellLatest","selectGroupLatest","selectHeaderCellLatest","toggleGroupLatest","isSamePosition","grid","measuringCell","useImperativeHandle","scrollToColumn","scrollToRow","scrollTo","behavior","newSelectedRows","rowKey","delete","selectAllRows","childRow","previousRowIdx","step","expandedGroupId","newExpandedGroupIds","handleKeyDown","Element","isCellEvent","closest","isRowEvent","keyCode","vKey","getRawRowIdx","sourceColumnKey","handleCopy","targetColumn","targetColumnKey","handlePaste","isRowIdxWithinViewportBounds","isDefaultCellInput","originalRow","handleCellInput","rawRowIdx","commitEditorChanges","isColIdxWithinSelectionBounds","enableEditor","isCellAtRightBoundary","cellNavigationMode","canExitGrid","nextPosition","parentRowIdx","parentRow","nextRowY","getNextPosition","nextSelectedCellPosition","currentPosition","currentIdx","isCellWithinBounds","nextIdx","nextRowIdx","setColSpan","moveRight","columnsCount","isBeforeFirstColumn","getNextSelectedCellPosition","getDraggedOverCellIdx","currentRowIdx","getDragHandle","getCellEditor","flushSync","getRowViewportColumns","selectedColumn","slice","templateRows","isGroupRowFocused","scrollPaddingInlineStart","scrollPaddingBlock","getLayoutCssVars","dir","summaryRowIdx","isSummaryRowSelected","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","isGroupRowSelected","cr","GroupRowRenderer","c","getViewportRows","p1","p2","async","getGridContent","gridElement","renderToStaticMarkup","createElement","innerHTML","cloneElement","head","getRows","body","foot","selector","from","querySelectorAll","gridRow","gridCell","innerText","serialiseCellValue","formattedValue","replace","toolbarClassname","dialogContainerClassname","dateFormatter","Intl","DateTimeFormat","navigator","language","currencyFormatter","NumberFormat","currency","TimestampFormatter","timestamp","format","CurrencyFormatter","createRows","now","Date","title","client","faker","area","country","contact","assignee","progress","random","startTimestamp","endTimestamp","budget","transaction","account","version","available","getComparator","a","b","localeCompare","CommonFeatures","setRows","setSortColumns","setSelectedRows","countries","r","Collator","compare","totalCount","p","autoFocus","createPortal","open","valueAsNumber","yesCount","getColumns","summaryRows","sortedRows","compResult","comparator","ExportButton","onExport","fileName","content","data","downloadLink","download","url","URL","createObjectURL","click","revokeObjectURL","downloadFile","Blob","exportToCsv","utils","writeFile","Promise","all","wb","book_new","ws","aoa_to_sheet","book_append_sheet","exportToXlsx","jsPDF","autoTable","default","doc","orientation","unit","horizontalPageBreak","styles","cellPadding","fontSize","cellWidth","tableWidth","save","exportToPdf","exporting","setExporting","titles","ImageFormatter","backgroundImage","highlightClassname","avatar","email","firstName","lastName","street","zipCode","date","toLocaleDateString","bs","catchPhrase","companyName","words","sentence","AllFeatures","isSecureContext","clipboard","writeText","incompatibleColumns","getRandomDate","getTime","task","complete","issueType","startDate","completeDate","CellNavigation","setCellNavigationMode","marginBlockEnd","changeRowNavigation","loopOverColumnNavigation","newRowIdx","colSpanClassname","cellFormatter","ColumnSpanning","String","DraggableHeaderRenderer","onColumnsReorder","drag","useDrag","item","collect","monitor","isOver","drop","useDrop","accept","canDrop","opacity","backgroundColor","createColumns","ColumnsReordering","setColumns","draggableColumns","handleColumnsReorder","sourceKey","targetKey","sourceColumnIndex","targetColumnIndex","reorderedColumns","reverse","DndProvider","backend","HTML5Backend","selectCellClassname","sortPriorityClassname","CustomizableRenderers","contextMenuClassname","product","price","ContextMenuDemo","nextId","setNextId","useReducer","contextMenuProps","setContextMenuProps","menuRef","isContextMenuOpen","insertRow","insertRowIdx","Node","clientY","groupingClassname","optionsClassname","sports","reduce","prev","gold","silver","bronze","year","sport","athlete","r1","r2","options","Grouping","selectedOptions","setSelectedOptions","setExpandedGroupIds","option","enabled","newOptions","toggleOption","rootClassname","filterColumnClassName","filterContainerClassname","filterClassname","FilterContext","inputStopPropagation","selectStopPropagation","HeaderFilters","filters","setFilters","developer","developerOptions","label","FilterRenderer","rest","list","isFinite","filteredRows","toLowerCase","startsWith","loadMoreRowsClassname","createFakeRowObjectData","InfiniteScrolling","numberOfRows","isLoading","setIsLoading","scrollHeight","isAtBottom","newRows","resolve","setTimeout","cellExpandClassname","CellExpanderFormatter","expanded","onCellExpand","createDepartments","departments","department","productsMap","productColumns","MasterDetail","ProductGrid","_","isDefaultPrevented","products","description","getProducts","MillionCells","gridClassname","EmptyRowsRenderer","textAlign","gridColumn","lang","NoRows","ResizableGrid","resize","rowDraggingClassname","rowOverClassname","DraggableRowRenderer","onRowReorder","firstElementChild","RowsReordering","fromIndex","toIndex","ScrollToRow","count","setValue","marginInlineEnd","childRowActionCrossClassname","childRowButtonClassname","ChildRowDeleteButton","onDeleteSubRow","isDeleteSubRowEnabled","reducer","rowIndex","toggleSubRow","find","parentRowIndex","newChildren","sr","deleteSubRow","defaultRows","TreeView","dispatch","allowDelete","setAllowDelete","hasChildren","marginInlineStart","VariableRowHeight","rangeClassname","transitionClassname","setRowHeight","Root","setDirection","Router","Routes","Route","Navigate","path","Animation","createRoot","getElementById","render","StrictMode","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","m","O","result","chunkIds","notFulfilled","Infinity","fulfilled","j","obj","t","this","__esModule","then","ns","create","def","getOwnPropertyNames","definition","o","defineProperty","enumerable","f","chunkId","promises","u","miniCssF","g","globalThis","Function","prop","prototype","hasOwnProperty","l","done","script","needAttach","scripts","getElementsByTagName","s","getAttribute","charset","timeout","nc","setAttribute","src","onScriptComplete","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","bind","appendChild","Symbol","toStringTag","scriptUrl","importScripts","location","currentScript","installedChunks","installedChunkData","promise","reject","error","errorType","realSrc","message","request","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}